
stepperMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028bc  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002a54  08002a54  00003a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a6c  08002a6c  00004010  2**0
                  CONTENTS
  4 .ARM          00000008  08002a6c  08002a6c  00003a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a74  08002a74  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a74  08002a74  00003a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a78  08002a78  00003a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002a7c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000010  08002a8c  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08002a8c  000040f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008eea  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a22  00000000  00000000  0000cf2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000728  00000000  00000000  0000e950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000056e  00000000  00000000  0000f078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015d7f  00000000  00000000  0000f5e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009eb0  00000000  00000000  00025365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000859a3  00000000  00000000  0002f215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4bb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bc8  00000000  00000000  000b4bfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000b67c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002a3c 	.word	0x08002a3c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08002a3c 	.word	0x08002a3c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <runStep>:
uint8_t stepTable[] = {0b1010, 0b0110, 0b0101, 0b1001};
// 외부 장치 선언
extern UART_HandleTypeDef huart2;

// [b2] [b1] [a2] [a1]
void runStep(uint8_t inData){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(MTA1_GPIO_Port, MTA1_Pin, ((inData >> 0) & 1));
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	f003 0301 	and.w	r3, r3, #1
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	461a      	mov	r2, r3
 80004dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004e0:	4814      	ldr	r0, [pc, #80]	@ (8000534 <runStep+0x6c>)
 80004e2:	f000 fe99 	bl	8001218 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MTA2_GPIO_Port, MTA2_Pin, ((inData >> 1) & 1));
 80004e6:	79fb      	ldrb	r3, [r7, #7]
 80004e8:	085b      	lsrs	r3, r3, #1
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	f003 0301 	and.w	r3, r3, #1
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	461a      	mov	r2, r3
 80004f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80004f8:	480f      	ldr	r0, [pc, #60]	@ (8000538 <runStep+0x70>)
 80004fa:	f000 fe8d 	bl	8001218 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MTB1_GPIO_Port, MTB1_Pin, ((inData >> 2) & 1));
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	089b      	lsrs	r3, r3, #2
 8000502:	b2db      	uxtb	r3, r3
 8000504:	f003 0301 	and.w	r3, r3, #1
 8000508:	b2db      	uxtb	r3, r3
 800050a:	461a      	mov	r2, r3
 800050c:	2110      	movs	r1, #16
 800050e:	480a      	ldr	r0, [pc, #40]	@ (8000538 <runStep+0x70>)
 8000510:	f000 fe82 	bl	8001218 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MTB2_GPIO_Port, MTB2_Pin, ((inData >> 3) & 1));
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	08db      	lsrs	r3, r3, #3
 8000518:	b2db      	uxtb	r3, r3
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	b2db      	uxtb	r3, r3
 8000520:	461a      	mov	r2, r3
 8000522:	2120      	movs	r1, #32
 8000524:	4804      	ldr	r0, [pc, #16]	@ (8000538 <runStep+0x70>)
 8000526:	f000 fe77 	bl	8001218 <HAL_GPIO_WritePin>
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40020000 	.word	0x40020000
 8000538:	40020400 	.word	0x40020400

0800053c <app>:

void app(){
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
	// uart 장치 초기화
	initUart(&huart2);
 8000542:	4824      	ldr	r0, [pc, #144]	@ (80005d4 <app+0x98>)
 8000544:	f000 fa3a 	bl	80009bc <initUart>
	while(1){
		static uint8_t index = 0;
		static uint8_t direction = 0;
		char ch = getUart();
 8000548:	f000 fa4e 	bl	80009e8 <getUart>
 800054c:	4603      	mov	r3, r0
 800054e:	71fb      	strb	r3, [r7, #7]
		if(ch=='f') direction =1;
 8000550:	79fb      	ldrb	r3, [r7, #7]
 8000552:	2b66      	cmp	r3, #102	@ 0x66
 8000554:	d102      	bne.n	800055c <app+0x20>
 8000556:	4b20      	ldr	r3, [pc, #128]	@ (80005d8 <app+0x9c>)
 8000558:	2201      	movs	r2, #1
 800055a:	701a      	strb	r2, [r3, #0]
		if(ch=='r') direction =2;
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	2b72      	cmp	r3, #114	@ 0x72
 8000560:	d102      	bne.n	8000568 <app+0x2c>
 8000562:	4b1d      	ldr	r3, [pc, #116]	@ (80005d8 <app+0x9c>)
 8000564:	2202      	movs	r2, #2
 8000566:	701a      	strb	r2, [r3, #0]
		if(ch=='s') direction =0;
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	2b73      	cmp	r3, #115	@ 0x73
 800056c:	d102      	bne.n	8000574 <app+0x38>
 800056e:	4b1a      	ldr	r3, [pc, #104]	@ (80005d8 <app+0x9c>)
 8000570:	2200      	movs	r2, #0
 8000572:	701a      	strb	r2, [r3, #0]
		// 현재 명령의 진행
		if(direction ==1) {
 8000574:	4b18      	ldr	r3, [pc, #96]	@ (80005d8 <app+0x9c>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b01      	cmp	r3, #1
 800057a:	d10d      	bne.n	8000598 <app+0x5c>
			index++;
 800057c:	4b17      	ldr	r3, [pc, #92]	@ (80005dc <app+0xa0>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	3301      	adds	r3, #1
 8000582:	b2da      	uxtb	r2, r3
 8000584:	4b15      	ldr	r3, [pc, #84]	@ (80005dc <app+0xa0>)
 8000586:	701a      	strb	r2, [r3, #0]
			index%=4;
 8000588:	4b14      	ldr	r3, [pc, #80]	@ (80005dc <app+0xa0>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	f003 0303 	and.w	r3, r3, #3
 8000590:	b2da      	uxtb	r2, r3
 8000592:	4b12      	ldr	r3, [pc, #72]	@ (80005dc <app+0xa0>)
 8000594:	701a      	strb	r2, [r3, #0]
 8000596:	e010      	b.n	80005ba <app+0x7e>
		}
		else if(direction == 2){
 8000598:	4b0f      	ldr	r3, [pc, #60]	@ (80005d8 <app+0x9c>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b02      	cmp	r3, #2
 800059e:	d10c      	bne.n	80005ba <app+0x7e>
			index--;
 80005a0:	4b0e      	ldr	r3, [pc, #56]	@ (80005dc <app+0xa0>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	3b01      	subs	r3, #1
 80005a6:	b2da      	uxtb	r2, r3
 80005a8:	4b0c      	ldr	r3, [pc, #48]	@ (80005dc <app+0xa0>)
 80005aa:	701a      	strb	r2, [r3, #0]
			if(index==255) index =3;
 80005ac:	4b0b      	ldr	r3, [pc, #44]	@ (80005dc <app+0xa0>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2bff      	cmp	r3, #255	@ 0xff
 80005b2:	d102      	bne.n	80005ba <app+0x7e>
 80005b4:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <app+0xa0>)
 80005b6:	2203      	movs	r2, #3
 80005b8:	701a      	strb	r2, [r3, #0]
		}
		runStep(stepTable[index]);
 80005ba:	4b08      	ldr	r3, [pc, #32]	@ (80005dc <app+0xa0>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	461a      	mov	r2, r3
 80005c0:	4b07      	ldr	r3, [pc, #28]	@ (80005e0 <app+0xa4>)
 80005c2:	5c9b      	ldrb	r3, [r3, r2]
 80005c4:	4618      	mov	r0, r3
 80005c6:	f7ff ff7f 	bl	80004c8 <runStep>
		HAL_Delay(5);
 80005ca:	2005      	movs	r0, #5
 80005cc:	f000 fad8 	bl	8000b80 <HAL_Delay>
	while(1){
 80005d0:	e7ba      	b.n	8000548 <app+0xc>
 80005d2:	bf00      	nop
 80005d4:	20000030 	.word	0x20000030
 80005d8:	2000002c 	.word	0x2000002c
 80005dc:	2000002d 	.word	0x2000002d
 80005e0:	20000000 	.word	0x20000000

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e8:	f000 fa58 	bl	8000a9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ec:	f000 f808 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f0:	f000 f88e 	bl	8000710 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005f4:	f000 f862 	bl	80006bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  app();
 80005f8:	f7ff ffa0 	bl	800053c <app>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <main+0x18>

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	@ 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2230      	movs	r2, #48	@ 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f002 f9e8 	bl	80029e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	4b22      	ldr	r3, [pc, #136]	@ (80006b4 <SystemClock_Config+0xb4>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800062c:	4a21      	ldr	r2, [pc, #132]	@ (80006b4 <SystemClock_Config+0xb4>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	@ 0x40
 8000634:	4b1f      	ldr	r3, [pc, #124]	@ (80006b4 <SystemClock_Config+0xb4>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	4b1c      	ldr	r3, [pc, #112]	@ (80006b8 <SystemClock_Config+0xb8>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a1b      	ldr	r2, [pc, #108]	@ (80006b8 <SystemClock_Config+0xb8>)
 800064a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b19      	ldr	r3, [pc, #100]	@ (80006b8 <SystemClock_Config+0xb8>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800065c:	2302      	movs	r3, #2
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000660:	2301      	movs	r3, #1
 8000662:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000664:	2310      	movs	r3, #16
 8000666:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000668:	2300      	movs	r3, #0
 800066a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 0320 	add.w	r3, r7, #32
 8000670:	4618      	mov	r0, r3
 8000672:	f000 fdeb 	bl	800124c <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800067c:	f000 f8a4 	bl	80007c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000684:	2300      	movs	r3, #0
 8000686:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f001 f84e 	bl	800173c <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006a6:	f000 f88f 	bl	80007c8 <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3750      	adds	r7, #80	@ 0x50
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c0:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <MX_USART2_UART_Init+0x4c>)
 80006c2:	4a12      	ldr	r2, [pc, #72]	@ (800070c <MX_USART2_UART_Init+0x50>)
 80006c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006c6:	4b10      	ldr	r3, [pc, #64]	@ (8000708 <MX_USART2_UART_Init+0x4c>)
 80006c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000708 <MX_USART2_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <MX_USART2_UART_Init+0x4c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006da:	4b0b      	ldr	r3, [pc, #44]	@ (8000708 <MX_USART2_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e0:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <MX_USART2_UART_Init+0x4c>)
 80006e2:	220c      	movs	r2, #12
 80006e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	@ (8000708 <MX_USART2_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ec:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <MX_USART2_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	@ (8000708 <MX_USART2_UART_Init+0x4c>)
 80006f4:	f001 fa02 	bl	8001afc <HAL_UART_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006fe:	f000 f863 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000030 	.word	0x20000030
 800070c:	40004400 	.word	0x40004400

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	4b24      	ldr	r3, [pc, #144]	@ (80007bc <MX_GPIO_Init+0xac>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	4a23      	ldr	r2, [pc, #140]	@ (80007bc <MX_GPIO_Init+0xac>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6313      	str	r3, [r2, #48]	@ 0x30
 8000736:	4b21      	ldr	r3, [pc, #132]	@ (80007bc <MX_GPIO_Init+0xac>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	4b1d      	ldr	r3, [pc, #116]	@ (80007bc <MX_GPIO_Init+0xac>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4a1c      	ldr	r2, [pc, #112]	@ (80007bc <MX_GPIO_Init+0xac>)
 800074c:	f043 0302 	orr.w	r3, r3, #2
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4b1a      	ldr	r3, [pc, #104]	@ (80007bc <MX_GPIO_Init+0xac>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f003 0302 	and.w	r3, r3, #2
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MTA2_Pin|MTB1_Pin|MTB2_Pin, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 8000764:	4816      	ldr	r0, [pc, #88]	@ (80007c0 <MX_GPIO_Init+0xb0>)
 8000766:	f000 fd57 	bl	8001218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MTA1_GPIO_Port, MTA1_Pin, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000770:	4814      	ldr	r0, [pc, #80]	@ (80007c4 <MX_GPIO_Init+0xb4>)
 8000772:	f000 fd51 	bl	8001218 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MTA2_Pin MTB1_Pin MTB2_Pin */
  GPIO_InitStruct.Pin = MTA2_Pin|MTB1_Pin|MTB2_Pin;
 8000776:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 800077a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2301      	movs	r3, #1
 800077e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2300      	movs	r3, #0
 8000786:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	4619      	mov	r1, r3
 800078e:	480c      	ldr	r0, [pc, #48]	@ (80007c0 <MX_GPIO_Init+0xb0>)
 8000790:	f000 fbbe 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : MTA1_Pin */
  GPIO_InitStruct.Pin = MTA1_Pin;
 8000794:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000798:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079a:	2301      	movs	r3, #1
 800079c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MTA1_GPIO_Port, &GPIO_InitStruct);
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	4619      	mov	r1, r3
 80007ac:	4805      	ldr	r0, [pc, #20]	@ (80007c4 <MX_GPIO_Init+0xb4>)
 80007ae:	f000 fbaf 	bl	8000f10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007b2:	bf00      	nop
 80007b4:	3720      	adds	r7, #32
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40020400 	.word	0x40020400
 80007c4:	40020000 	.word	0x40020000

080007c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007cc:	b672      	cpsid	i
}
 80007ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <Error_Handler+0x8>

080007d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b10      	ldr	r3, [pc, #64]	@ (8000820 <HAL_MspInit+0x4c>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000820 <HAL_MspInit+0x4c>)
 80007e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80007ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000820 <HAL_MspInit+0x4c>)
 80007ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <HAL_MspInit+0x4c>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007fe:	4a08      	ldr	r2, [pc, #32]	@ (8000820 <HAL_MspInit+0x4c>)
 8000800:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000804:	6413      	str	r3, [r2, #64]	@ 0x40
 8000806:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <HAL_MspInit+0x4c>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800080a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800

08000824 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	@ 0x28
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a1d      	ldr	r2, [pc, #116]	@ (80008b8 <HAL_UART_MspInit+0x94>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d133      	bne.n	80008ae <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
 800084a:	4b1c      	ldr	r3, [pc, #112]	@ (80008bc <HAL_UART_MspInit+0x98>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084e:	4a1b      	ldr	r2, [pc, #108]	@ (80008bc <HAL_UART_MspInit+0x98>)
 8000850:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000854:	6413      	str	r3, [r2, #64]	@ 0x40
 8000856:	4b19      	ldr	r3, [pc, #100]	@ (80008bc <HAL_UART_MspInit+0x98>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <HAL_UART_MspInit+0x98>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a14      	ldr	r2, [pc, #80]	@ (80008bc <HAL_UART_MspInit+0x98>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <HAL_UART_MspInit+0x98>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800087e:	230c      	movs	r3, #12
 8000880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088a:	2303      	movs	r3, #3
 800088c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800088e:	2307      	movs	r3, #7
 8000890:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	4619      	mov	r1, r3
 8000898:	4809      	ldr	r0, [pc, #36]	@ (80008c0 <HAL_UART_MspInit+0x9c>)
 800089a:	f000 fb39 	bl	8000f10 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2100      	movs	r1, #0
 80008a2:	2026      	movs	r0, #38	@ 0x26
 80008a4:	f000 fa6b 	bl	8000d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008a8:	2026      	movs	r0, #38	@ 0x26
 80008aa:	f000 fa84 	bl	8000db6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80008ae:	bf00      	nop
 80008b0:	3728      	adds	r7, #40	@ 0x28
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40004400 	.word	0x40004400
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40020000 	.word	0x40020000

080008c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <NMI_Handler+0x4>

080008cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <HardFault_Handler+0x4>

080008d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <MemManage_Handler+0x4>

080008dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <BusFault_Handler+0x4>

080008e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <UsageFault_Handler+0x4>

080008ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800091a:	f000 f911 	bl	8000b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000928:	4802      	ldr	r0, [pc, #8]	@ (8000934 <USART2_IRQHandler+0x10>)
 800092a:	f001 f95d 	bl	8001be8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000030 	.word	0x20000030

08000938 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800093c:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <SystemInit+0x20>)
 800093e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000942:	4a05      	ldr	r2, [pc, #20]	@ (8000958 <SystemInit+0x20>)
 8000944:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000948:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <HAL_UART_RxCpltCallback>:
	HAL_UART_Transmit(myHuart, (uint8_t *)p, len, 10);
	return len;
}

// 수신 인터럽트(interrupt = event) 콜백(listner, isr)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	//수신된 문자 저장
	rxBuffer[rxBufferWriteIndex++] = rxCharacter;
 8000964:	4b10      	ldr	r3, [pc, #64]	@ (80009a8 <HAL_UART_RxCpltCallback+0x4c>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	1c5a      	adds	r2, r3, #1
 800096a:	490f      	ldr	r1, [pc, #60]	@ (80009a8 <HAL_UART_RxCpltCallback+0x4c>)
 800096c:	600a      	str	r2, [r1, #0]
 800096e:	4a0f      	ldr	r2, [pc, #60]	@ (80009ac <HAL_UART_RxCpltCallback+0x50>)
 8000970:	7811      	ldrb	r1, [r2, #0]
 8000972:	4a0f      	ldr	r2, [pc, #60]	@ (80009b0 <HAL_UART_RxCpltCallback+0x54>)
 8000974:	54d1      	strb	r1, [r2, r3]
	//최대값 도달시 처음으로
	rxBufferWriteIndex %=rxBufferMax;
 8000976:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <HAL_UART_RxCpltCallback+0x4c>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <HAL_UART_RxCpltCallback+0x58>)
 800097c:	fb83 1302 	smull	r1, r3, r3, r2
 8000980:	1159      	asrs	r1, r3, #5
 8000982:	17d3      	asrs	r3, r2, #31
 8000984:	1acb      	subs	r3, r1, r3
 8000986:	2164      	movs	r1, #100	@ 0x64
 8000988:	fb01 f303 	mul.w	r3, r1, r3
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	4a06      	ldr	r2, [pc, #24]	@ (80009a8 <HAL_UART_RxCpltCallback+0x4c>)
 8000990:	6013      	str	r3, [r2, #0]
	//인터럽트 재 장전
	HAL_UART_Receive_IT(myHuart, &rxCharacter, 1);
 8000992:	4b09      	ldr	r3, [pc, #36]	@ (80009b8 <HAL_UART_RxCpltCallback+0x5c>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2201      	movs	r2, #1
 8000998:	4904      	ldr	r1, [pc, #16]	@ (80009ac <HAL_UART_RxCpltCallback+0x50>)
 800099a:	4618      	mov	r0, r3
 800099c:	f001 f8fe 	bl	8001b9c <HAL_UART_Receive_IT>
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	200000e8 	.word	0x200000e8
 80009ac:	2000007c 	.word	0x2000007c
 80009b0:	20000080 	.word	0x20000080
 80009b4:	51eb851f 	.word	0x51eb851f
 80009b8:	20000078 	.word	0x20000078

080009bc <initUart>:

//uart 장치 초기화
void initUart(UART_HandleTypeDef *inHuart){
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	//uart 장치 주소 백업
	myHuart = inHuart;
 80009c4:	4a06      	ldr	r2, [pc, #24]	@ (80009e0 <initUart+0x24>)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6013      	str	r3, [r2, #0]
	//인터럽트 장전
	HAL_UART_Receive_IT(myHuart, &rxCharacter, 1);
 80009ca:	4b05      	ldr	r3, [pc, #20]	@ (80009e0 <initUart+0x24>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2201      	movs	r2, #1
 80009d0:	4904      	ldr	r1, [pc, #16]	@ (80009e4 <initUart+0x28>)
 80009d2:	4618      	mov	r0, r3
 80009d4:	f001 f8e2 	bl	8001b9c <HAL_UART_Receive_IT>
}
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000078 	.word	0x20000078
 80009e4:	2000007c 	.word	0x2000007c

080009e8 <getUart>:

char getUart(){
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
	char result;
	if(rxBufferReadIndex == rxBufferWriteIndex) return 0;
 80009ee:	4b12      	ldr	r3, [pc, #72]	@ (8000a38 <getUart+0x50>)
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	4b12      	ldr	r3, [pc, #72]	@ (8000a3c <getUart+0x54>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d101      	bne.n	80009fe <getUart+0x16>
 80009fa:	2300      	movs	r3, #0
 80009fc:	e016      	b.n	8000a2c <getUart+0x44>
	result = rxBuffer[rxBufferReadIndex++];
 80009fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000a38 <getUart+0x50>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	1c5a      	adds	r2, r3, #1
 8000a04:	490c      	ldr	r1, [pc, #48]	@ (8000a38 <getUart+0x50>)
 8000a06:	600a      	str	r2, [r1, #0]
 8000a08:	4a0d      	ldr	r2, [pc, #52]	@ (8000a40 <getUart+0x58>)
 8000a0a:	5cd3      	ldrb	r3, [r2, r3]
 8000a0c:	71fb      	strb	r3, [r7, #7]
	rxBufferReadIndex %= rxBufferMax;
 8000a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a38 <getUart+0x50>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	4b0c      	ldr	r3, [pc, #48]	@ (8000a44 <getUart+0x5c>)
 8000a14:	fb83 1302 	smull	r1, r3, r3, r2
 8000a18:	1159      	asrs	r1, r3, #5
 8000a1a:	17d3      	asrs	r3, r2, #31
 8000a1c:	1acb      	subs	r3, r1, r3
 8000a1e:	2164      	movs	r1, #100	@ 0x64
 8000a20:	fb01 f303 	mul.w	r3, r1, r3
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	4a04      	ldr	r2, [pc, #16]	@ (8000a38 <getUart+0x50>)
 8000a28:	6013      	str	r3, [r2, #0]
	return result;
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	200000e4 	.word	0x200000e4
 8000a3c:	200000e8 	.word	0x200000e8
 8000a40:	20000080 	.word	0x20000080
 8000a44:	51eb851f 	.word	0x51eb851f

08000a48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a4c:	f7ff ff74 	bl	8000938 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a50:	480c      	ldr	r0, [pc, #48]	@ (8000a84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a52:	490d      	ldr	r1, [pc, #52]	@ (8000a88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a54:	4a0d      	ldr	r2, [pc, #52]	@ (8000a8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a58:	e002      	b.n	8000a60 <LoopCopyDataInit>

08000a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a5e:	3304      	adds	r3, #4

08000a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a64:	d3f9      	bcc.n	8000a5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a66:	4a0a      	ldr	r2, [pc, #40]	@ (8000a90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a68:	4c0a      	ldr	r4, [pc, #40]	@ (8000a94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a6c:	e001      	b.n	8000a72 <LoopFillZerobss>

08000a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a70:	3204      	adds	r2, #4

08000a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a74:	d3fb      	bcc.n	8000a6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a76:	f001 ffbd 	bl	80029f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a7a:	f7ff fdb3 	bl	80005e4 <main>
  bx  lr    
 8000a7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a88:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a8c:	08002a7c 	.word	0x08002a7c
  ldr r2, =_sbss
 8000a90:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a94:	200000f0 	.word	0x200000f0

08000a98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a98:	e7fe      	b.n	8000a98 <ADC_IRQHandler>
	...

08000a9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8000adc <HAL_Init+0x40>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8000adc <HAL_Init+0x40>)
 8000aa6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000aaa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aac:	4b0b      	ldr	r3, [pc, #44]	@ (8000adc <HAL_Init+0x40>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8000adc <HAL_Init+0x40>)
 8000ab2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ab6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab8:	4b08      	ldr	r3, [pc, #32]	@ (8000adc <HAL_Init+0x40>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a07      	ldr	r2, [pc, #28]	@ (8000adc <HAL_Init+0x40>)
 8000abe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ac2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac4:	2003      	movs	r0, #3
 8000ac6:	f000 f94f 	bl	8000d68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aca:	200f      	movs	r0, #15
 8000acc:	f000 f808 	bl	8000ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad0:	f7ff fe80 	bl	80007d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40023c00 	.word	0x40023c00

08000ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae8:	4b12      	ldr	r3, [pc, #72]	@ (8000b34 <HAL_InitTick+0x54>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b12      	ldr	r3, [pc, #72]	@ (8000b38 <HAL_InitTick+0x58>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	4619      	mov	r1, r3
 8000af2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 f967 	bl	8000dd2 <HAL_SYSTICK_Config>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e00e      	b.n	8000b2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2b0f      	cmp	r3, #15
 8000b12:	d80a      	bhi.n	8000b2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b14:	2200      	movs	r2, #0
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1c:	f000 f92f 	bl	8000d7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b20:	4a06      	ldr	r2, [pc, #24]	@ (8000b3c <HAL_InitTick+0x5c>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b26:	2300      	movs	r3, #0
 8000b28:	e000      	b.n	8000b2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000004 	.word	0x20000004
 8000b38:	2000000c 	.word	0x2000000c
 8000b3c:	20000008 	.word	0x20000008

08000b40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b44:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <HAL_IncTick+0x20>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <HAL_IncTick+0x24>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	4a04      	ldr	r2, [pc, #16]	@ (8000b64 <HAL_IncTick+0x24>)
 8000b52:	6013      	str	r3, [r2, #0]
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	2000000c 	.word	0x2000000c
 8000b64:	200000ec 	.word	0x200000ec

08000b68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b6c:	4b03      	ldr	r3, [pc, #12]	@ (8000b7c <HAL_GetTick+0x14>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	200000ec 	.word	0x200000ec

08000b80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b88:	f7ff ffee 	bl	8000b68 <HAL_GetTick>
 8000b8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b98:	d005      	beq.n	8000ba6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc4 <HAL_Delay+0x44>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ba6:	bf00      	nop
 8000ba8:	f7ff ffde 	bl	8000b68 <HAL_GetTick>
 8000bac:	4602      	mov	r2, r0
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	68fa      	ldr	r2, [r7, #12]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d8f7      	bhi.n	8000ba8 <HAL_Delay+0x28>
  {
  }
}
 8000bb8:	bf00      	nop
 8000bba:	bf00      	nop
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	2000000c 	.word	0x2000000c

08000bc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c0c <__NVIC_SetPriorityGrouping+0x44>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bde:	68ba      	ldr	r2, [r7, #8]
 8000be0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000be4:	4013      	ands	r3, r2
 8000be6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bfa:	4a04      	ldr	r2, [pc, #16]	@ (8000c0c <__NVIC_SetPriorityGrouping+0x44>)
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	60d3      	str	r3, [r2, #12]
}
 8000c00:	bf00      	nop
 8000c02:	3714      	adds	r7, #20
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c14:	4b04      	ldr	r3, [pc, #16]	@ (8000c28 <__NVIC_GetPriorityGrouping+0x18>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	0a1b      	lsrs	r3, r3, #8
 8000c1a:	f003 0307 	and.w	r3, r3, #7
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	db0b      	blt.n	8000c56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	f003 021f 	and.w	r2, r3, #31
 8000c44:	4907      	ldr	r1, [pc, #28]	@ (8000c64 <__NVIC_EnableIRQ+0x38>)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	095b      	lsrs	r3, r3, #5
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000e100 	.word	0xe000e100

08000c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	6039      	str	r1, [r7, #0]
 8000c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	db0a      	blt.n	8000c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	490c      	ldr	r1, [pc, #48]	@ (8000cb4 <__NVIC_SetPriority+0x4c>)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	0112      	lsls	r2, r2, #4
 8000c88:	b2d2      	uxtb	r2, r2
 8000c8a:	440b      	add	r3, r1
 8000c8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c90:	e00a      	b.n	8000ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	4908      	ldr	r1, [pc, #32]	@ (8000cb8 <__NVIC_SetPriority+0x50>)
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	f003 030f 	and.w	r3, r3, #15
 8000c9e:	3b04      	subs	r3, #4
 8000ca0:	0112      	lsls	r2, r2, #4
 8000ca2:	b2d2      	uxtb	r2, r2
 8000ca4:	440b      	add	r3, r1
 8000ca6:	761a      	strb	r2, [r3, #24]
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000e100 	.word	0xe000e100
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b089      	sub	sp, #36	@ 0x24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	f1c3 0307 	rsb	r3, r3, #7
 8000cd6:	2b04      	cmp	r3, #4
 8000cd8:	bf28      	it	cs
 8000cda:	2304      	movcs	r3, #4
 8000cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	2b06      	cmp	r3, #6
 8000ce4:	d902      	bls.n	8000cec <NVIC_EncodePriority+0x30>
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3b03      	subs	r3, #3
 8000cea:	e000      	b.n	8000cee <NVIC_EncodePriority+0x32>
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43da      	mvns	r2, r3
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	401a      	ands	r2, r3
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d04:	f04f 31ff 	mov.w	r1, #4294967295
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0e:	43d9      	mvns	r1, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d14:	4313      	orrs	r3, r2
         );
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3724      	adds	r7, #36	@ 0x24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
	...

08000d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d34:	d301      	bcc.n	8000d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d36:	2301      	movs	r3, #1
 8000d38:	e00f      	b.n	8000d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d64 <SysTick_Config+0x40>)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d42:	210f      	movs	r1, #15
 8000d44:	f04f 30ff 	mov.w	r0, #4294967295
 8000d48:	f7ff ff8e 	bl	8000c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d4c:	4b05      	ldr	r3, [pc, #20]	@ (8000d64 <SysTick_Config+0x40>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d52:	4b04      	ldr	r3, [pc, #16]	@ (8000d64 <SysTick_Config+0x40>)
 8000d54:	2207      	movs	r2, #7
 8000d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	e000e010 	.word	0xe000e010

08000d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff ff29 	bl	8000bc8 <__NVIC_SetPriorityGrouping>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b086      	sub	sp, #24
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	4603      	mov	r3, r0
 8000d86:	60b9      	str	r1, [r7, #8]
 8000d88:	607a      	str	r2, [r7, #4]
 8000d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d90:	f7ff ff3e 	bl	8000c10 <__NVIC_GetPriorityGrouping>
 8000d94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	68b9      	ldr	r1, [r7, #8]
 8000d9a:	6978      	ldr	r0, [r7, #20]
 8000d9c:	f7ff ff8e 	bl	8000cbc <NVIC_EncodePriority>
 8000da0:	4602      	mov	r2, r0
 8000da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da6:	4611      	mov	r1, r2
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff ff5d 	bl	8000c68 <__NVIC_SetPriority>
}
 8000dae:	bf00      	nop
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff31 	bl	8000c2c <__NVIC_EnableIRQ>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f7ff ffa2 	bl	8000d24 <SysTick_Config>
 8000de0:	4603      	mov	r3, r0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b084      	sub	sp, #16
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000df8:	f7ff feb6 	bl	8000b68 <HAL_GetTick>
 8000dfc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d008      	beq.n	8000e1c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2280      	movs	r2, #128	@ 0x80
 8000e0e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e052      	b.n	8000ec2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f022 0216 	bic.w	r2, r2, #22
 8000e2a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	695a      	ldr	r2, [r3, #20]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000e3a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d103      	bne.n	8000e4c <HAL_DMA_Abort+0x62>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d007      	beq.n	8000e5c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f022 0208 	bic.w	r2, r2, #8
 8000e5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f022 0201 	bic.w	r2, r2, #1
 8000e6a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e6c:	e013      	b.n	8000e96 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e6e:	f7ff fe7b 	bl	8000b68 <HAL_GetTick>
 8000e72:	4602      	mov	r2, r0
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	2b05      	cmp	r3, #5
 8000e7a:	d90c      	bls.n	8000e96 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2220      	movs	r2, #32
 8000e80:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2203      	movs	r2, #3
 8000e86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000e92:	2303      	movs	r3, #3
 8000e94:	e015      	b.n	8000ec2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d1e4      	bne.n	8000e6e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ea8:	223f      	movs	r2, #63	@ 0x3f
 8000eaa:	409a      	lsls	r2, r3
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d004      	beq.n	8000ee8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2280      	movs	r2, #128	@ 0x80
 8000ee2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e00c      	b.n	8000f02 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2205      	movs	r2, #5
 8000eec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f022 0201 	bic.w	r2, r2, #1
 8000efe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
	...

08000f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	@ 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
 8000f2a:	e159      	b.n	80011e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	f040 8148 	bne.w	80011da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d005      	beq.n	8000f62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d130      	bne.n	8000fc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43db      	mvns	r3, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4013      	ands	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	68da      	ldr	r2, [r3, #12]
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f98:	2201      	movs	r2, #1
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	091b      	lsrs	r3, r3, #4
 8000fae:	f003 0201 	and.w	r2, r3, #1
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	d017      	beq.n	8001000 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d123      	bne.n	8001054 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	08da      	lsrs	r2, r3, #3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3208      	adds	r2, #8
 8001014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001018:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	f003 0307 	and.w	r3, r3, #7
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	220f      	movs	r2, #15
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	691a      	ldr	r2, [r3, #16]
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	08da      	lsrs	r2, r3, #3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3208      	adds	r2, #8
 800104e:	69b9      	ldr	r1, [r7, #24]
 8001050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0203 	and.w	r2, r3, #3
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001090:	2b00      	cmp	r3, #0
 8001092:	f000 80a2 	beq.w	80011da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	4b57      	ldr	r3, [pc, #348]	@ (80011f8 <HAL_GPIO_Init+0x2e8>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800109e:	4a56      	ldr	r2, [pc, #344]	@ (80011f8 <HAL_GPIO_Init+0x2e8>)
 80010a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010a6:	4b54      	ldr	r3, [pc, #336]	@ (80011f8 <HAL_GPIO_Init+0x2e8>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010b2:	4a52      	ldr	r2, [pc, #328]	@ (80011fc <HAL_GPIO_Init+0x2ec>)
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	089b      	lsrs	r3, r3, #2
 80010b8:	3302      	adds	r3, #2
 80010ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	220f      	movs	r2, #15
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a49      	ldr	r2, [pc, #292]	@ (8001200 <HAL_GPIO_Init+0x2f0>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d019      	beq.n	8001112 <HAL_GPIO_Init+0x202>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a48      	ldr	r2, [pc, #288]	@ (8001204 <HAL_GPIO_Init+0x2f4>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d013      	beq.n	800110e <HAL_GPIO_Init+0x1fe>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a47      	ldr	r2, [pc, #284]	@ (8001208 <HAL_GPIO_Init+0x2f8>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d00d      	beq.n	800110a <HAL_GPIO_Init+0x1fa>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a46      	ldr	r2, [pc, #280]	@ (800120c <HAL_GPIO_Init+0x2fc>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d007      	beq.n	8001106 <HAL_GPIO_Init+0x1f6>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a45      	ldr	r2, [pc, #276]	@ (8001210 <HAL_GPIO_Init+0x300>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d101      	bne.n	8001102 <HAL_GPIO_Init+0x1f2>
 80010fe:	2304      	movs	r3, #4
 8001100:	e008      	b.n	8001114 <HAL_GPIO_Init+0x204>
 8001102:	2307      	movs	r3, #7
 8001104:	e006      	b.n	8001114 <HAL_GPIO_Init+0x204>
 8001106:	2303      	movs	r3, #3
 8001108:	e004      	b.n	8001114 <HAL_GPIO_Init+0x204>
 800110a:	2302      	movs	r3, #2
 800110c:	e002      	b.n	8001114 <HAL_GPIO_Init+0x204>
 800110e:	2301      	movs	r3, #1
 8001110:	e000      	b.n	8001114 <HAL_GPIO_Init+0x204>
 8001112:	2300      	movs	r3, #0
 8001114:	69fa      	ldr	r2, [r7, #28]
 8001116:	f002 0203 	and.w	r2, r2, #3
 800111a:	0092      	lsls	r2, r2, #2
 800111c:	4093      	lsls	r3, r2
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001124:	4935      	ldr	r1, [pc, #212]	@ (80011fc <HAL_GPIO_Init+0x2ec>)
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	089b      	lsrs	r3, r3, #2
 800112a:	3302      	adds	r3, #2
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001132:	4b38      	ldr	r3, [pc, #224]	@ (8001214 <HAL_GPIO_Init+0x304>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	43db      	mvns	r3, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4013      	ands	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001156:	4a2f      	ldr	r2, [pc, #188]	@ (8001214 <HAL_GPIO_Init+0x304>)
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800115c:	4b2d      	ldr	r3, [pc, #180]	@ (8001214 <HAL_GPIO_Init+0x304>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001180:	4a24      	ldr	r2, [pc, #144]	@ (8001214 <HAL_GPIO_Init+0x304>)
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001186:	4b23      	ldr	r3, [pc, #140]	@ (8001214 <HAL_GPIO_Init+0x304>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011aa:	4a1a      	ldr	r2, [pc, #104]	@ (8001214 <HAL_GPIO_Init+0x304>)
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011b0:	4b18      	ldr	r3, [pc, #96]	@ (8001214 <HAL_GPIO_Init+0x304>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011d4:	4a0f      	ldr	r2, [pc, #60]	@ (8001214 <HAL_GPIO_Init+0x304>)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3301      	adds	r3, #1
 80011de:	61fb      	str	r3, [r7, #28]
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	2b0f      	cmp	r3, #15
 80011e4:	f67f aea2 	bls.w	8000f2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	3724      	adds	r7, #36	@ 0x24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40013800 	.word	0x40013800
 8001200:	40020000 	.word	0x40020000
 8001204:	40020400 	.word	0x40020400
 8001208:	40020800 	.word	0x40020800
 800120c:	40020c00 	.word	0x40020c00
 8001210:	40021000 	.word	0x40021000
 8001214:	40013c00 	.word	0x40013c00

08001218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	807b      	strh	r3, [r7, #2]
 8001224:	4613      	mov	r3, r2
 8001226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001228:	787b      	ldrb	r3, [r7, #1]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800122e:	887a      	ldrh	r2, [r7, #2]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001234:	e003      	b.n	800123e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001236:	887b      	ldrh	r3, [r7, #2]
 8001238:	041a      	lsls	r2, r3, #16
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	619a      	str	r2, [r3, #24]
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
	...

0800124c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e267      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d075      	beq.n	8001356 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800126a:	4b88      	ldr	r3, [pc, #544]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 030c 	and.w	r3, r3, #12
 8001272:	2b04      	cmp	r3, #4
 8001274:	d00c      	beq.n	8001290 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001276:	4b85      	ldr	r3, [pc, #532]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800127e:	2b08      	cmp	r3, #8
 8001280:	d112      	bne.n	80012a8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001282:	4b82      	ldr	r3, [pc, #520]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800128a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800128e:	d10b      	bne.n	80012a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001290:	4b7e      	ldr	r3, [pc, #504]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d05b      	beq.n	8001354 <HAL_RCC_OscConfig+0x108>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d157      	bne.n	8001354 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e242      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012b0:	d106      	bne.n	80012c0 <HAL_RCC_OscConfig+0x74>
 80012b2:	4b76      	ldr	r3, [pc, #472]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a75      	ldr	r2, [pc, #468]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80012b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	e01d      	b.n	80012fc <HAL_RCC_OscConfig+0xb0>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012c8:	d10c      	bne.n	80012e4 <HAL_RCC_OscConfig+0x98>
 80012ca:	4b70      	ldr	r3, [pc, #448]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a6f      	ldr	r2, [pc, #444]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80012d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	4b6d      	ldr	r3, [pc, #436]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a6c      	ldr	r2, [pc, #432]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80012dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	e00b      	b.n	80012fc <HAL_RCC_OscConfig+0xb0>
 80012e4:	4b69      	ldr	r3, [pc, #420]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a68      	ldr	r2, [pc, #416]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80012ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	4b66      	ldr	r3, [pc, #408]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a65      	ldr	r2, [pc, #404]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80012f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d013      	beq.n	800132c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001304:	f7ff fc30 	bl	8000b68 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800130c:	f7ff fc2c 	bl	8000b68 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b64      	cmp	r3, #100	@ 0x64
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e207      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131e:	4b5b      	ldr	r3, [pc, #364]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0f0      	beq.n	800130c <HAL_RCC_OscConfig+0xc0>
 800132a:	e014      	b.n	8001356 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132c:	f7ff fc1c 	bl	8000b68 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001334:	f7ff fc18 	bl	8000b68 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b64      	cmp	r3, #100	@ 0x64
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e1f3      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001346:	4b51      	ldr	r3, [pc, #324]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f0      	bne.n	8001334 <HAL_RCC_OscConfig+0xe8>
 8001352:	e000      	b.n	8001356 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d063      	beq.n	800142a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001362:	4b4a      	ldr	r3, [pc, #296]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 030c 	and.w	r3, r3, #12
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00b      	beq.n	8001386 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800136e:	4b47      	ldr	r3, [pc, #284]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001376:	2b08      	cmp	r3, #8
 8001378:	d11c      	bne.n	80013b4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800137a:	4b44      	ldr	r3, [pc, #272]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d116      	bne.n	80013b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001386:	4b41      	ldr	r3, [pc, #260]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d005      	beq.n	800139e <HAL_RCC_OscConfig+0x152>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d001      	beq.n	800139e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e1c7      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139e:	4b3b      	ldr	r3, [pc, #236]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	4937      	ldr	r1, [pc, #220]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b2:	e03a      	b.n	800142a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d020      	beq.n	80013fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013bc:	4b34      	ldr	r3, [pc, #208]	@ (8001490 <HAL_RCC_OscConfig+0x244>)
 80013be:	2201      	movs	r2, #1
 80013c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c2:	f7ff fbd1 	bl	8000b68 <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ca:	f7ff fbcd 	bl	8000b68 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e1a8      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013dc:	4b2b      	ldr	r3, [pc, #172]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d0f0      	beq.n	80013ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e8:	4b28      	ldr	r3, [pc, #160]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	691b      	ldr	r3, [r3, #16]
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	4925      	ldr	r1, [pc, #148]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	600b      	str	r3, [r1, #0]
 80013fc:	e015      	b.n	800142a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013fe:	4b24      	ldr	r3, [pc, #144]	@ (8001490 <HAL_RCC_OscConfig+0x244>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001404:	f7ff fbb0 	bl	8000b68 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800140c:	f7ff fbac 	bl	8000b68 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e187      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141e:	4b1b      	ldr	r3, [pc, #108]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1f0      	bne.n	800140c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	2b00      	cmp	r3, #0
 8001434:	d036      	beq.n	80014a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d016      	beq.n	800146c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800143e:	4b15      	ldr	r3, [pc, #84]	@ (8001494 <HAL_RCC_OscConfig+0x248>)
 8001440:	2201      	movs	r2, #1
 8001442:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001444:	f7ff fb90 	bl	8000b68 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800144c:	f7ff fb8c 	bl	8000b68 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e167      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145e:	4b0b      	ldr	r3, [pc, #44]	@ (800148c <HAL_RCC_OscConfig+0x240>)
 8001460:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f0      	beq.n	800144c <HAL_RCC_OscConfig+0x200>
 800146a:	e01b      	b.n	80014a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800146c:	4b09      	ldr	r3, [pc, #36]	@ (8001494 <HAL_RCC_OscConfig+0x248>)
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001472:	f7ff fb79 	bl	8000b68 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001478:	e00e      	b.n	8001498 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800147a:	f7ff fb75 	bl	8000b68 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d907      	bls.n	8001498 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e150      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
 800148c:	40023800 	.word	0x40023800
 8001490:	42470000 	.word	0x42470000
 8001494:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001498:	4b88      	ldr	r3, [pc, #544]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 800149a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1ea      	bne.n	800147a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f000 8097 	beq.w	80015e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014b2:	2300      	movs	r3, #0
 80014b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014b6:	4b81      	ldr	r3, [pc, #516]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d10f      	bne.n	80014e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	4b7d      	ldr	r3, [pc, #500]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ca:	4a7c      	ldr	r2, [pc, #496]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 80014cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014d2:	4b7a      	ldr	r3, [pc, #488]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014de:	2301      	movs	r3, #1
 80014e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e2:	4b77      	ldr	r3, [pc, #476]	@ (80016c0 <HAL_RCC_OscConfig+0x474>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d118      	bne.n	8001520 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ee:	4b74      	ldr	r3, [pc, #464]	@ (80016c0 <HAL_RCC_OscConfig+0x474>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a73      	ldr	r2, [pc, #460]	@ (80016c0 <HAL_RCC_OscConfig+0x474>)
 80014f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014fa:	f7ff fb35 	bl	8000b68 <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001502:	f7ff fb31 	bl	8000b68 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e10c      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001514:	4b6a      	ldr	r3, [pc, #424]	@ (80016c0 <HAL_RCC_OscConfig+0x474>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0f0      	beq.n	8001502 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d106      	bne.n	8001536 <HAL_RCC_OscConfig+0x2ea>
 8001528:	4b64      	ldr	r3, [pc, #400]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 800152a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800152c:	4a63      	ldr	r2, [pc, #396]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6713      	str	r3, [r2, #112]	@ 0x70
 8001534:	e01c      	b.n	8001570 <HAL_RCC_OscConfig+0x324>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2b05      	cmp	r3, #5
 800153c:	d10c      	bne.n	8001558 <HAL_RCC_OscConfig+0x30c>
 800153e:	4b5f      	ldr	r3, [pc, #380]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 8001540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001542:	4a5e      	ldr	r2, [pc, #376]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 8001544:	f043 0304 	orr.w	r3, r3, #4
 8001548:	6713      	str	r3, [r2, #112]	@ 0x70
 800154a:	4b5c      	ldr	r3, [pc, #368]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 800154c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800154e:	4a5b      	ldr	r2, [pc, #364]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6713      	str	r3, [r2, #112]	@ 0x70
 8001556:	e00b      	b.n	8001570 <HAL_RCC_OscConfig+0x324>
 8001558:	4b58      	ldr	r3, [pc, #352]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 800155a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800155c:	4a57      	ldr	r2, [pc, #348]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 800155e:	f023 0301 	bic.w	r3, r3, #1
 8001562:	6713      	str	r3, [r2, #112]	@ 0x70
 8001564:	4b55      	ldr	r3, [pc, #340]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 8001566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001568:	4a54      	ldr	r2, [pc, #336]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 800156a:	f023 0304 	bic.w	r3, r3, #4
 800156e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d015      	beq.n	80015a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001578:	f7ff faf6 	bl	8000b68 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157e:	e00a      	b.n	8001596 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001580:	f7ff faf2 	bl	8000b68 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800158e:	4293      	cmp	r3, r2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e0cb      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001596:	4b49      	ldr	r3, [pc, #292]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 8001598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0ee      	beq.n	8001580 <HAL_RCC_OscConfig+0x334>
 80015a2:	e014      	b.n	80015ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a4:	f7ff fae0 	bl	8000b68 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015aa:	e00a      	b.n	80015c2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ac:	f7ff fadc 	bl	8000b68 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e0b5      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c2:	4b3e      	ldr	r3, [pc, #248]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 80015c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1ee      	bne.n	80015ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015ce:	7dfb      	ldrb	r3, [r7, #23]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d105      	bne.n	80015e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d4:	4b39      	ldr	r3, [pc, #228]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d8:	4a38      	ldr	r2, [pc, #224]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 80015da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f000 80a1 	beq.w	800172c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015ea:	4b34      	ldr	r3, [pc, #208]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 030c 	and.w	r3, r3, #12
 80015f2:	2b08      	cmp	r3, #8
 80015f4:	d05c      	beq.n	80016b0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d141      	bne.n	8001682 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015fe:	4b31      	ldr	r3, [pc, #196]	@ (80016c4 <HAL_RCC_OscConfig+0x478>)
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001604:	f7ff fab0 	bl	8000b68 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800160c:	f7ff faac 	bl	8000b68 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e087      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161e:	4b27      	ldr	r3, [pc, #156]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f0      	bne.n	800160c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69da      	ldr	r2, [r3, #28]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001638:	019b      	lsls	r3, r3, #6
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001640:	085b      	lsrs	r3, r3, #1
 8001642:	3b01      	subs	r3, #1
 8001644:	041b      	lsls	r3, r3, #16
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800164c:	061b      	lsls	r3, r3, #24
 800164e:	491b      	ldr	r1, [pc, #108]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 8001650:	4313      	orrs	r3, r2
 8001652:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001654:	4b1b      	ldr	r3, [pc, #108]	@ (80016c4 <HAL_RCC_OscConfig+0x478>)
 8001656:	2201      	movs	r2, #1
 8001658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165a:	f7ff fa85 	bl	8000b68 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001662:	f7ff fa81 	bl	8000b68 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e05c      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001674:	4b11      	ldr	r3, [pc, #68]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0f0      	beq.n	8001662 <HAL_RCC_OscConfig+0x416>
 8001680:	e054      	b.n	800172c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001682:	4b10      	ldr	r3, [pc, #64]	@ (80016c4 <HAL_RCC_OscConfig+0x478>)
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff fa6e 	bl	8000b68 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001690:	f7ff fa6a 	bl	8000b68 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e045      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a2:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <HAL_RCC_OscConfig+0x470>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x444>
 80016ae:	e03d      	b.n	800172c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d107      	bne.n	80016c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e038      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40007000 	.word	0x40007000
 80016c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001738 <HAL_RCC_OscConfig+0x4ec>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d028      	beq.n	8001728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d121      	bne.n	8001728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d11a      	bne.n	8001728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80016f8:	4013      	ands	r3, r2
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001700:	4293      	cmp	r3, r2
 8001702:	d111      	bne.n	8001728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800170e:	085b      	lsrs	r3, r3, #1
 8001710:	3b01      	subs	r3, #1
 8001712:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001714:	429a      	cmp	r2, r3
 8001716:	d107      	bne.n	8001728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001722:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001724:	429a      	cmp	r2, r3
 8001726:	d001      	beq.n	800172c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e000      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800

0800173c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d101      	bne.n	8001750 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e0cc      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001750:	4b68      	ldr	r3, [pc, #416]	@ (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d90c      	bls.n	8001778 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175e:	4b65      	ldr	r3, [pc, #404]	@ (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001766:	4b63      	ldr	r3, [pc, #396]	@ (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	429a      	cmp	r2, r3
 8001772:	d001      	beq.n	8001778 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e0b8      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d020      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001790:	4b59      	ldr	r3, [pc, #356]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	4a58      	ldr	r2, [pc, #352]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800179a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0308 	and.w	r3, r3, #8
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d005      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017a8:	4b53      	ldr	r3, [pc, #332]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	4a52      	ldr	r2, [pc, #328]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b4:	4b50      	ldr	r3, [pc, #320]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	494d      	ldr	r1, [pc, #308]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d044      	beq.n	800185c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d107      	bne.n	80017ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017da:	4b47      	ldr	r3, [pc, #284]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d119      	bne.n	800181a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e07f      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d003      	beq.n	80017fa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d107      	bne.n	800180a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017fa:	4b3f      	ldr	r3, [pc, #252]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d109      	bne.n	800181a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e06f      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180a:	4b3b      	ldr	r3, [pc, #236]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e067      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800181a:	4b37      	ldr	r3, [pc, #220]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f023 0203 	bic.w	r2, r3, #3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	4934      	ldr	r1, [pc, #208]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001828:	4313      	orrs	r3, r2
 800182a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800182c:	f7ff f99c 	bl	8000b68 <HAL_GetTick>
 8001830:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001832:	e00a      	b.n	800184a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001834:	f7ff f998 	bl	8000b68 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001842:	4293      	cmp	r3, r2
 8001844:	d901      	bls.n	800184a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e04f      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184a:	4b2b      	ldr	r3, [pc, #172]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 020c 	and.w	r2, r3, #12
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	429a      	cmp	r2, r3
 800185a:	d1eb      	bne.n	8001834 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800185c:	4b25      	ldr	r3, [pc, #148]	@ (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	d20c      	bcs.n	8001884 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186a:	4b22      	ldr	r3, [pc, #136]	@ (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001872:	4b20      	ldr	r3, [pc, #128]	@ (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	429a      	cmp	r2, r3
 800187e:	d001      	beq.n	8001884 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e032      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	d008      	beq.n	80018a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001890:	4b19      	ldr	r3, [pc, #100]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	4916      	ldr	r1, [pc, #88]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d009      	beq.n	80018c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ae:	4b12      	ldr	r3, [pc, #72]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	490e      	ldr	r1, [pc, #56]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018c2:	f000 f821 	bl	8001908 <HAL_RCC_GetSysClockFreq>
 80018c6:	4602      	mov	r2, r0
 80018c8:	4b0b      	ldr	r3, [pc, #44]	@ (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	091b      	lsrs	r3, r3, #4
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	490a      	ldr	r1, [pc, #40]	@ (80018fc <HAL_RCC_ClockConfig+0x1c0>)
 80018d4:	5ccb      	ldrb	r3, [r1, r3]
 80018d6:	fa22 f303 	lsr.w	r3, r2, r3
 80018da:	4a09      	ldr	r2, [pc, #36]	@ (8001900 <HAL_RCC_ClockConfig+0x1c4>)
 80018dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80018de:	4b09      	ldr	r3, [pc, #36]	@ (8001904 <HAL_RCC_ClockConfig+0x1c8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff f8fc 	bl	8000ae0 <HAL_InitTick>

  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40023c00 	.word	0x40023c00
 80018f8:	40023800 	.word	0x40023800
 80018fc:	08002a54 	.word	0x08002a54
 8001900:	20000004 	.word	0x20000004
 8001904:	20000008 	.word	0x20000008

08001908 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800190c:	b090      	sub	sp, #64	@ 0x40
 800190e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001918:	2300      	movs	r3, #0
 800191a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800191c:	2300      	movs	r3, #0
 800191e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001920:	4b59      	ldr	r3, [pc, #356]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x180>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 030c 	and.w	r3, r3, #12
 8001928:	2b08      	cmp	r3, #8
 800192a:	d00d      	beq.n	8001948 <HAL_RCC_GetSysClockFreq+0x40>
 800192c:	2b08      	cmp	r3, #8
 800192e:	f200 80a1 	bhi.w	8001a74 <HAL_RCC_GetSysClockFreq+0x16c>
 8001932:	2b00      	cmp	r3, #0
 8001934:	d002      	beq.n	800193c <HAL_RCC_GetSysClockFreq+0x34>
 8001936:	2b04      	cmp	r3, #4
 8001938:	d003      	beq.n	8001942 <HAL_RCC_GetSysClockFreq+0x3a>
 800193a:	e09b      	b.n	8001a74 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800193c:	4b53      	ldr	r3, [pc, #332]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x184>)
 800193e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001940:	e09b      	b.n	8001a7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001942:	4b53      	ldr	r3, [pc, #332]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0x188>)
 8001944:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001946:	e098      	b.n	8001a7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001948:	4b4f      	ldr	r3, [pc, #316]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x180>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001950:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001952:	4b4d      	ldr	r3, [pc, #308]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x180>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d028      	beq.n	80019b0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800195e:	4b4a      	ldr	r3, [pc, #296]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x180>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	099b      	lsrs	r3, r3, #6
 8001964:	2200      	movs	r2, #0
 8001966:	623b      	str	r3, [r7, #32]
 8001968:	627a      	str	r2, [r7, #36]	@ 0x24
 800196a:	6a3b      	ldr	r3, [r7, #32]
 800196c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001970:	2100      	movs	r1, #0
 8001972:	4b47      	ldr	r3, [pc, #284]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0x188>)
 8001974:	fb03 f201 	mul.w	r2, r3, r1
 8001978:	2300      	movs	r3, #0
 800197a:	fb00 f303 	mul.w	r3, r0, r3
 800197e:	4413      	add	r3, r2
 8001980:	4a43      	ldr	r2, [pc, #268]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0x188>)
 8001982:	fba0 1202 	umull	r1, r2, r0, r2
 8001986:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001988:	460a      	mov	r2, r1
 800198a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800198c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800198e:	4413      	add	r3, r2
 8001990:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001994:	2200      	movs	r2, #0
 8001996:	61bb      	str	r3, [r7, #24]
 8001998:	61fa      	str	r2, [r7, #28]
 800199a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800199e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80019a2:	f7fe fc19 	bl	80001d8 <__aeabi_uldivmod>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	4613      	mov	r3, r2
 80019ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019ae:	e053      	b.n	8001a58 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019b0:	4b35      	ldr	r3, [pc, #212]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x180>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	099b      	lsrs	r3, r3, #6
 80019b6:	2200      	movs	r2, #0
 80019b8:	613b      	str	r3, [r7, #16]
 80019ba:	617a      	str	r2, [r7, #20]
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80019c2:	f04f 0b00 	mov.w	fp, #0
 80019c6:	4652      	mov	r2, sl
 80019c8:	465b      	mov	r3, fp
 80019ca:	f04f 0000 	mov.w	r0, #0
 80019ce:	f04f 0100 	mov.w	r1, #0
 80019d2:	0159      	lsls	r1, r3, #5
 80019d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019d8:	0150      	lsls	r0, r2, #5
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	ebb2 080a 	subs.w	r8, r2, sl
 80019e2:	eb63 090b 	sbc.w	r9, r3, fp
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	f04f 0300 	mov.w	r3, #0
 80019ee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80019f2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80019f6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80019fa:	ebb2 0408 	subs.w	r4, r2, r8
 80019fe:	eb63 0509 	sbc.w	r5, r3, r9
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	00eb      	lsls	r3, r5, #3
 8001a0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a10:	00e2      	lsls	r2, r4, #3
 8001a12:	4614      	mov	r4, r2
 8001a14:	461d      	mov	r5, r3
 8001a16:	eb14 030a 	adds.w	r3, r4, sl
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	eb45 030b 	adc.w	r3, r5, fp
 8001a20:	607b      	str	r3, [r7, #4]
 8001a22:	f04f 0200 	mov.w	r2, #0
 8001a26:	f04f 0300 	mov.w	r3, #0
 8001a2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a2e:	4629      	mov	r1, r5
 8001a30:	028b      	lsls	r3, r1, #10
 8001a32:	4621      	mov	r1, r4
 8001a34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a38:	4621      	mov	r1, r4
 8001a3a:	028a      	lsls	r2, r1, #10
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a42:	2200      	movs	r2, #0
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	60fa      	str	r2, [r7, #12]
 8001a48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a4c:	f7fe fbc4 	bl	80001d8 <__aeabi_uldivmod>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4613      	mov	r3, r2
 8001a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001a58:	4b0b      	ldr	r3, [pc, #44]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	0c1b      	lsrs	r3, r3, #16
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	3301      	adds	r3, #1
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001a68:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a70:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a72:	e002      	b.n	8001a7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a74:	4b05      	ldr	r3, [pc, #20]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x184>)
 8001a76:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3740      	adds	r7, #64	@ 0x40
 8001a80:	46bd      	mov	sp, r7
 8001a82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a86:	bf00      	nop
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	00f42400 	.word	0x00f42400
 8001a90:	017d7840 	.word	0x017d7840

08001a94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a98:	4b03      	ldr	r3, [pc, #12]	@ (8001aa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	20000004 	.word	0x20000004

08001aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ab0:	f7ff fff0 	bl	8001a94 <HAL_RCC_GetHCLKFreq>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	4b05      	ldr	r3, [pc, #20]	@ (8001acc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	0a9b      	lsrs	r3, r3, #10
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	4903      	ldr	r1, [pc, #12]	@ (8001ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ac2:	5ccb      	ldrb	r3, [r1, r3]
 8001ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	08002a64 	.word	0x08002a64

08001ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ad8:	f7ff ffdc 	bl	8001a94 <HAL_RCC_GetHCLKFreq>
 8001adc:	4602      	mov	r2, r0
 8001ade:	4b05      	ldr	r3, [pc, #20]	@ (8001af4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	0b5b      	lsrs	r3, r3, #13
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	4903      	ldr	r1, [pc, #12]	@ (8001af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aea:	5ccb      	ldrb	r3, [r1, r3]
 8001aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40023800 	.word	0x40023800
 8001af8:	08002a64 	.word	0x08002a64

08001afc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e042      	b.n	8001b94 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d106      	bne.n	8001b28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7fe fe7e 	bl	8000824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2224      	movs	r2, #36	@ 0x24
 8001b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68da      	ldr	r2, [r3, #12]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001b3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 fcdb 	bl	80024fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	691a      	ldr	r2, [r3, #16]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001b54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	695a      	ldr	r2, [r3, #20]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001b64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68da      	ldr	r2, [r3, #12]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001b74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2220      	movs	r2, #32
 8001b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2220      	movs	r2, #32
 8001b88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b20      	cmp	r3, #32
 8001bb4:	d112      	bne.n	8001bdc <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d002      	beq.n	8001bc2 <HAL_UART_Receive_IT+0x26>
 8001bbc:	88fb      	ldrh	r3, [r7, #6]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e00b      	b.n	8001bde <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001bcc:	88fb      	ldrh	r3, [r7, #6]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68b9      	ldr	r1, [r7, #8]
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f000 faba 	bl	800214c <UART_Start_Receive_IT>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	e000      	b.n	8001bde <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001bdc:	2302      	movs	r3, #2
  }
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b0ba      	sub	sp, #232	@ 0xe8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001c26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d10f      	bne.n	8001c4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c32:	f003 0320 	and.w	r3, r3, #32
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d009      	beq.n	8001c4e <HAL_UART_IRQHandler+0x66>
 8001c3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001c3e:	f003 0320 	and.w	r3, r3, #32
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 fb99 	bl	800237e <UART_Receive_IT>
      return;
 8001c4c:	e25b      	b.n	8002106 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001c4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 80de 	beq.w	8001e14 <HAL_UART_IRQHandler+0x22c>
 8001c58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d106      	bne.n	8001c72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001c68:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 80d1 	beq.w	8001e14 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00b      	beq.n	8001c96 <HAL_UART_IRQHandler+0xae>
 8001c7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d005      	beq.n	8001c96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8e:	f043 0201 	orr.w	r2, r3, #1
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00b      	beq.n	8001cba <HAL_UART_IRQHandler+0xd2>
 8001ca2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d005      	beq.n	8001cba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb2:	f043 0202 	orr.w	r2, r3, #2
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00b      	beq.n	8001cde <HAL_UART_IRQHandler+0xf6>
 8001cc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d005      	beq.n	8001cde <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd6:	f043 0204 	orr.w	r2, r3, #4
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d011      	beq.n	8001d0e <HAL_UART_IRQHandler+0x126>
 8001cea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001cee:	f003 0320 	and.w	r3, r3, #32
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d105      	bne.n	8001d02 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001cf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d005      	beq.n	8001d0e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d06:	f043 0208 	orr.w	r2, r3, #8
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 81f2 	beq.w	80020fc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d1c:	f003 0320 	and.w	r3, r3, #32
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d008      	beq.n	8001d36 <HAL_UART_IRQHandler+0x14e>
 8001d24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d28:	f003 0320 	and.w	r3, r3, #32
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d002      	beq.n	8001d36 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 fb24 	bl	800237e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d40:	2b40      	cmp	r3, #64	@ 0x40
 8001d42:	bf0c      	ite	eq
 8001d44:	2301      	moveq	r3, #1
 8001d46:	2300      	movne	r3, #0
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d103      	bne.n	8001d62 <HAL_UART_IRQHandler+0x17a>
 8001d5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d04f      	beq.n	8001e02 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 fa2c 	bl	80021c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d72:	2b40      	cmp	r3, #64	@ 0x40
 8001d74:	d141      	bne.n	8001dfa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	3314      	adds	r3, #20
 8001d7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d84:	e853 3f00 	ldrex	r3, [r3]
 8001d88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001d8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001d94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	3314      	adds	r3, #20
 8001d9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001da2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001da6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001daa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001dae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001db2:	e841 2300 	strex	r3, r2, [r1]
 8001db6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001dba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1d9      	bne.n	8001d76 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d013      	beq.n	8001df2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dce:	4a7e      	ldr	r2, [pc, #504]	@ (8001fc8 <HAL_UART_IRQHandler+0x3e0>)
 8001dd0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff f877 	bl	8000eca <HAL_DMA_Abort_IT>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d016      	beq.n	8001e10 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001de6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001dec:	4610      	mov	r0, r2
 8001dee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001df0:	e00e      	b.n	8001e10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f994 	bl	8002120 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001df8:	e00a      	b.n	8001e10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f990 	bl	8002120 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e00:	e006      	b.n	8001e10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f98c 	bl	8002120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8001e0e:	e175      	b.n	80020fc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e10:	bf00      	nop
    return;
 8001e12:	e173      	b.n	80020fc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	f040 814f 	bne.w	80020bc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e22:	f003 0310 	and.w	r3, r3, #16
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 8148 	beq.w	80020bc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e30:	f003 0310 	and.w	r3, r3, #16
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 8141 	beq.w	80020bc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e5a:	2b40      	cmp	r3, #64	@ 0x40
 8001e5c:	f040 80b6 	bne.w	8001fcc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001e6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 8145 	beq.w	8002100 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001e7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	f080 813e 	bcs.w	8002100 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001e8a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e96:	f000 8088 	beq.w	8001faa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	330c      	adds	r3, #12
 8001ea0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ea4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ea8:	e853 3f00 	ldrex	r3, [r3]
 8001eac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8001eb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001eb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001eb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	330c      	adds	r3, #12
 8001ec2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001ec6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001eca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ece:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001ed2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001ed6:	e841 2300 	strex	r3, r2, [r1]
 8001eda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8001ede:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1d9      	bne.n	8001e9a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	3314      	adds	r3, #20
 8001eec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001eee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ef0:	e853 3f00 	ldrex	r3, [r3]
 8001ef4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8001ef6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ef8:	f023 0301 	bic.w	r3, r3, #1
 8001efc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	3314      	adds	r3, #20
 8001f06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001f0a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8001f0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f10:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001f12:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001f16:	e841 2300 	strex	r3, r2, [r1]
 8001f1a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8001f1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1e1      	bne.n	8001ee6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	3314      	adds	r3, #20
 8001f28:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f2c:	e853 3f00 	ldrex	r3, [r3]
 8001f30:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8001f32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001f38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	3314      	adds	r3, #20
 8001f42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001f46:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001f48:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f4a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001f4c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001f4e:	e841 2300 	strex	r3, r2, [r1]
 8001f52:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8001f54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1e3      	bne.n	8001f22 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2220      	movs	r2, #32
 8001f5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	330c      	adds	r3, #12
 8001f6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f72:	e853 3f00 	ldrex	r3, [r3]
 8001f76:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8001f78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f7a:	f023 0310 	bic.w	r3, r3, #16
 8001f7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	330c      	adds	r3, #12
 8001f88:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001f8c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001f8e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f90:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001f92:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001f94:	e841 2300 	strex	r3, r2, [r1]
 8001f98:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8001f9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1e3      	bne.n	8001f68 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7fe ff20 	bl	8000dea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2202      	movs	r2, #2
 8001fae:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f8b7 	bl	8002134 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001fc6:	e09b      	b.n	8002100 <HAL_UART_IRQHandler+0x518>
 8001fc8:	08002287 	.word	0x08002287
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 808e 	beq.w	8002104 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8001fe8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 8089 	beq.w	8002104 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	330c      	adds	r3, #12
 8001ff8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ffc:	e853 3f00 	ldrex	r3, [r3]
 8002000:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002004:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002008:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	330c      	adds	r3, #12
 8002012:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002016:	647a      	str	r2, [r7, #68]	@ 0x44
 8002018:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800201a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800201c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800201e:	e841 2300 	strex	r3, r2, [r1]
 8002022:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002024:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1e3      	bne.n	8001ff2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	3314      	adds	r3, #20
 8002030:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002034:	e853 3f00 	ldrex	r3, [r3]
 8002038:	623b      	str	r3, [r7, #32]
   return(result);
 800203a:	6a3b      	ldr	r3, [r7, #32]
 800203c:	f023 0301 	bic.w	r3, r3, #1
 8002040:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	3314      	adds	r3, #20
 800204a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800204e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002050:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002052:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002054:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002056:	e841 2300 	strex	r3, r2, [r1]
 800205a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800205c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1e3      	bne.n	800202a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2220      	movs	r2, #32
 8002066:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	330c      	adds	r3, #12
 8002076:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	e853 3f00 	ldrex	r3, [r3]
 800207e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f023 0310 	bic.w	r3, r3, #16
 8002086:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	330c      	adds	r3, #12
 8002090:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002094:	61fa      	str	r2, [r7, #28]
 8002096:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002098:	69b9      	ldr	r1, [r7, #24]
 800209a:	69fa      	ldr	r2, [r7, #28]
 800209c:	e841 2300 	strex	r3, r2, [r1]
 80020a0:	617b      	str	r3, [r7, #20]
   return(result);
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1e3      	bne.n	8002070 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2202      	movs	r2, #2
 80020ac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80020ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80020b2:	4619      	mov	r1, r3
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f83d 	bl	8002134 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80020ba:	e023      	b.n	8002104 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80020bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d009      	beq.n	80020dc <HAL_UART_IRQHandler+0x4f4>
 80020c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f8ea 	bl	80022ae <UART_Transmit_IT>
    return;
 80020da:	e014      	b.n	8002106 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80020dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d00e      	beq.n	8002106 <HAL_UART_IRQHandler+0x51e>
 80020e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d008      	beq.n	8002106 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 f92a 	bl	800234e <UART_EndTransmit_IT>
    return;
 80020fa:	e004      	b.n	8002106 <HAL_UART_IRQHandler+0x51e>
    return;
 80020fc:	bf00      	nop
 80020fe:	e002      	b.n	8002106 <HAL_UART_IRQHandler+0x51e>
      return;
 8002100:	bf00      	nop
 8002102:	e000      	b.n	8002106 <HAL_UART_IRQHandler+0x51e>
      return;
 8002104:	bf00      	nop
  }
}
 8002106:	37e8      	adds	r7, #232	@ 0xe8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	460b      	mov	r3, r1
 800213e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	4613      	mov	r3, r2
 8002158:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	88fa      	ldrh	r2, [r7, #6]
 8002164:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	88fa      	ldrh	r2, [r7, #6]
 800216a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2222      	movs	r2, #34	@ 0x22
 8002176:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d007      	beq.n	8002192 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68da      	ldr	r2, [r3, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002190:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	695a      	ldr	r2, [r3, #20]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f042 0201 	orr.w	r2, r2, #1
 80021a0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68da      	ldr	r2, [r3, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f042 0220 	orr.w	r2, r2, #32
 80021b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b095      	sub	sp, #84	@ 0x54
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	330c      	adds	r3, #12
 80021ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021d2:	e853 3f00 	ldrex	r3, [r3]
 80021d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80021d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80021de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	330c      	adds	r3, #12
 80021e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80021e8:	643a      	str	r2, [r7, #64]	@ 0x40
 80021ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80021ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80021f0:	e841 2300 	strex	r3, r2, [r1]
 80021f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80021f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1e5      	bne.n	80021c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	3314      	adds	r3, #20
 8002202:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002204:	6a3b      	ldr	r3, [r7, #32]
 8002206:	e853 3f00 	ldrex	r3, [r3]
 800220a:	61fb      	str	r3, [r7, #28]
   return(result);
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	f023 0301 	bic.w	r3, r3, #1
 8002212:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	3314      	adds	r3, #20
 800221a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800221c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800221e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002220:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002222:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002224:	e841 2300 	strex	r3, r2, [r1]
 8002228:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800222a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1e5      	bne.n	80021fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002234:	2b01      	cmp	r3, #1
 8002236:	d119      	bne.n	800226c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	330c      	adds	r3, #12
 800223e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	e853 3f00 	ldrex	r3, [r3]
 8002246:	60bb      	str	r3, [r7, #8]
   return(result);
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	f023 0310 	bic.w	r3, r3, #16
 800224e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	330c      	adds	r3, #12
 8002256:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002258:	61ba      	str	r2, [r7, #24]
 800225a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800225c:	6979      	ldr	r1, [r7, #20]
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	e841 2300 	strex	r3, r2, [r1]
 8002264:	613b      	str	r3, [r7, #16]
   return(result);
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1e5      	bne.n	8002238 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2220      	movs	r2, #32
 8002270:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800227a:	bf00      	nop
 800227c:	3754      	adds	r7, #84	@ 0x54
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b084      	sub	sp, #16
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002292:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f7ff ff3d 	bl	8002120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80022a6:	bf00      	nop
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b085      	sub	sp, #20
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b21      	cmp	r3, #33	@ 0x21
 80022c0:	d13e      	bne.n	8002340 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022ca:	d114      	bne.n	80022f6 <UART_Transmit_IT+0x48>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d110      	bne.n	80022f6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	881b      	ldrh	r3, [r3, #0]
 80022de:	461a      	mov	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	1c9a      	adds	r2, r3, #2
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	621a      	str	r2, [r3, #32]
 80022f4:	e008      	b.n	8002308 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	1c59      	adds	r1, r3, #1
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6211      	str	r1, [r2, #32]
 8002300:	781a      	ldrb	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800230c:	b29b      	uxth	r3, r3
 800230e:	3b01      	subs	r3, #1
 8002310:	b29b      	uxth	r3, r3
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	4619      	mov	r1, r3
 8002316:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10f      	bne.n	800233c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800232a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68da      	ldr	r2, [r3, #12]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800233a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800233c:	2300      	movs	r3, #0
 800233e:	e000      	b.n	8002342 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002340:	2302      	movs	r3, #2
  }
}
 8002342:	4618      	mov	r0, r3
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68da      	ldr	r2, [r3, #12]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002364:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2220      	movs	r2, #32
 800236a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff fecc 	bl	800210c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b08c      	sub	sp, #48	@ 0x30
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b22      	cmp	r3, #34	@ 0x22
 8002390:	f040 80ae 	bne.w	80024f0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800239c:	d117      	bne.n	80023ce <UART_Receive_IT+0x50>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d113      	bne.n	80023ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023bc:	b29a      	uxth	r2, r3
 80023be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c6:	1c9a      	adds	r2, r3, #2
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80023cc:	e026      	b.n	800241c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023e0:	d007      	beq.n	80023f2 <UART_Receive_IT+0x74>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10a      	bne.n	8002400 <UART_Receive_IT+0x82>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d106      	bne.n	8002400 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023fc:	701a      	strb	r2, [r3, #0]
 80023fe:	e008      	b.n	8002412 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	b2db      	uxtb	r3, r3
 8002408:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800240c:	b2da      	uxtb	r2, r3
 800240e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002410:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002420:	b29b      	uxth	r3, r3
 8002422:	3b01      	subs	r3, #1
 8002424:	b29b      	uxth	r3, r3
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	4619      	mov	r1, r3
 800242a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800242c:	2b00      	cmp	r3, #0
 800242e:	d15d      	bne.n	80024ec <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68da      	ldr	r2, [r3, #12]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0220 	bic.w	r2, r2, #32
 800243e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68da      	ldr	r2, [r3, #12]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800244e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	695a      	ldr	r2, [r3, #20]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 0201 	bic.w	r2, r2, #1
 800245e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2220      	movs	r2, #32
 8002464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002472:	2b01      	cmp	r3, #1
 8002474:	d135      	bne.n	80024e2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	330c      	adds	r3, #12
 8002482:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	e853 3f00 	ldrex	r3, [r3]
 800248a:	613b      	str	r3, [r7, #16]
   return(result);
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	f023 0310 	bic.w	r3, r3, #16
 8002492:	627b      	str	r3, [r7, #36]	@ 0x24
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	330c      	adds	r3, #12
 800249a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800249c:	623a      	str	r2, [r7, #32]
 800249e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024a0:	69f9      	ldr	r1, [r7, #28]
 80024a2:	6a3a      	ldr	r2, [r7, #32]
 80024a4:	e841 2300 	strex	r3, r2, [r1]
 80024a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1e5      	bne.n	800247c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0310 	and.w	r3, r3, #16
 80024ba:	2b10      	cmp	r3, #16
 80024bc:	d10a      	bne.n	80024d4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80024be:	2300      	movs	r3, #0
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80024d8:	4619      	mov	r1, r3
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff fe2a 	bl	8002134 <HAL_UARTEx_RxEventCallback>
 80024e0:	e002      	b.n	80024e8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7fe fa3a 	bl	800095c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	e002      	b.n	80024f2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80024ec:	2300      	movs	r3, #0
 80024ee:	e000      	b.n	80024f2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80024f0:	2302      	movs	r3, #2
  }
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3730      	adds	r7, #48	@ 0x30
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
	...

080024fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002500:	b0c0      	sub	sp, #256	@ 0x100
 8002502:	af00      	add	r7, sp, #0
 8002504:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002518:	68d9      	ldr	r1, [r3, #12]
 800251a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	ea40 0301 	orr.w	r3, r0, r1
 8002524:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	431a      	orrs	r2, r3
 8002534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	431a      	orrs	r2, r3
 800253c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	4313      	orrs	r3, r2
 8002544:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002554:	f021 010c 	bic.w	r1, r1, #12
 8002558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002562:	430b      	orrs	r3, r1
 8002564:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002576:	6999      	ldr	r1, [r3, #24]
 8002578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	ea40 0301 	orr.w	r3, r0, r1
 8002582:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	4b8f      	ldr	r3, [pc, #572]	@ (80027c8 <UART_SetConfig+0x2cc>)
 800258c:	429a      	cmp	r2, r3
 800258e:	d005      	beq.n	800259c <UART_SetConfig+0xa0>
 8002590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	4b8d      	ldr	r3, [pc, #564]	@ (80027cc <UART_SetConfig+0x2d0>)
 8002598:	429a      	cmp	r2, r3
 800259a:	d104      	bne.n	80025a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800259c:	f7ff fa9a 	bl	8001ad4 <HAL_RCC_GetPCLK2Freq>
 80025a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80025a4:	e003      	b.n	80025ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025a6:	f7ff fa81 	bl	8001aac <HAL_RCC_GetPCLK1Freq>
 80025aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025b8:	f040 810c 	bne.w	80027d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80025bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025c0:	2200      	movs	r2, #0
 80025c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80025c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80025ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80025ce:	4622      	mov	r2, r4
 80025d0:	462b      	mov	r3, r5
 80025d2:	1891      	adds	r1, r2, r2
 80025d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80025d6:	415b      	adcs	r3, r3
 80025d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80025da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80025de:	4621      	mov	r1, r4
 80025e0:	eb12 0801 	adds.w	r8, r2, r1
 80025e4:	4629      	mov	r1, r5
 80025e6:	eb43 0901 	adc.w	r9, r3, r1
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	f04f 0300 	mov.w	r3, #0
 80025f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025fe:	4690      	mov	r8, r2
 8002600:	4699      	mov	r9, r3
 8002602:	4623      	mov	r3, r4
 8002604:	eb18 0303 	adds.w	r3, r8, r3
 8002608:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800260c:	462b      	mov	r3, r5
 800260e:	eb49 0303 	adc.w	r3, r9, r3
 8002612:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002622:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002626:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800262a:	460b      	mov	r3, r1
 800262c:	18db      	adds	r3, r3, r3
 800262e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002630:	4613      	mov	r3, r2
 8002632:	eb42 0303 	adc.w	r3, r2, r3
 8002636:	657b      	str	r3, [r7, #84]	@ 0x54
 8002638:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800263c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002640:	f7fd fdca 	bl	80001d8 <__aeabi_uldivmod>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	4b61      	ldr	r3, [pc, #388]	@ (80027d0 <UART_SetConfig+0x2d4>)
 800264a:	fba3 2302 	umull	r2, r3, r3, r2
 800264e:	095b      	lsrs	r3, r3, #5
 8002650:	011c      	lsls	r4, r3, #4
 8002652:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002656:	2200      	movs	r2, #0
 8002658:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800265c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002660:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002664:	4642      	mov	r2, r8
 8002666:	464b      	mov	r3, r9
 8002668:	1891      	adds	r1, r2, r2
 800266a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800266c:	415b      	adcs	r3, r3
 800266e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002670:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002674:	4641      	mov	r1, r8
 8002676:	eb12 0a01 	adds.w	sl, r2, r1
 800267a:	4649      	mov	r1, r9
 800267c:	eb43 0b01 	adc.w	fp, r3, r1
 8002680:	f04f 0200 	mov.w	r2, #0
 8002684:	f04f 0300 	mov.w	r3, #0
 8002688:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800268c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002690:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002694:	4692      	mov	sl, r2
 8002696:	469b      	mov	fp, r3
 8002698:	4643      	mov	r3, r8
 800269a:	eb1a 0303 	adds.w	r3, sl, r3
 800269e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80026a2:	464b      	mov	r3, r9
 80026a4:	eb4b 0303 	adc.w	r3, fp, r3
 80026a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80026ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80026b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80026bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80026c0:	460b      	mov	r3, r1
 80026c2:	18db      	adds	r3, r3, r3
 80026c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80026c6:	4613      	mov	r3, r2
 80026c8:	eb42 0303 	adc.w	r3, r2, r3
 80026cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80026ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80026d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80026d6:	f7fd fd7f 	bl	80001d8 <__aeabi_uldivmod>
 80026da:	4602      	mov	r2, r0
 80026dc:	460b      	mov	r3, r1
 80026de:	4611      	mov	r1, r2
 80026e0:	4b3b      	ldr	r3, [pc, #236]	@ (80027d0 <UART_SetConfig+0x2d4>)
 80026e2:	fba3 2301 	umull	r2, r3, r3, r1
 80026e6:	095b      	lsrs	r3, r3, #5
 80026e8:	2264      	movs	r2, #100	@ 0x64
 80026ea:	fb02 f303 	mul.w	r3, r2, r3
 80026ee:	1acb      	subs	r3, r1, r3
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80026f6:	4b36      	ldr	r3, [pc, #216]	@ (80027d0 <UART_SetConfig+0x2d4>)
 80026f8:	fba3 2302 	umull	r2, r3, r3, r2
 80026fc:	095b      	lsrs	r3, r3, #5
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002704:	441c      	add	r4, r3
 8002706:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800270a:	2200      	movs	r2, #0
 800270c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002710:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002714:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002718:	4642      	mov	r2, r8
 800271a:	464b      	mov	r3, r9
 800271c:	1891      	adds	r1, r2, r2
 800271e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002720:	415b      	adcs	r3, r3
 8002722:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002724:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002728:	4641      	mov	r1, r8
 800272a:	1851      	adds	r1, r2, r1
 800272c:	6339      	str	r1, [r7, #48]	@ 0x30
 800272e:	4649      	mov	r1, r9
 8002730:	414b      	adcs	r3, r1
 8002732:	637b      	str	r3, [r7, #52]	@ 0x34
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	f04f 0300 	mov.w	r3, #0
 800273c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002740:	4659      	mov	r1, fp
 8002742:	00cb      	lsls	r3, r1, #3
 8002744:	4651      	mov	r1, sl
 8002746:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800274a:	4651      	mov	r1, sl
 800274c:	00ca      	lsls	r2, r1, #3
 800274e:	4610      	mov	r0, r2
 8002750:	4619      	mov	r1, r3
 8002752:	4603      	mov	r3, r0
 8002754:	4642      	mov	r2, r8
 8002756:	189b      	adds	r3, r3, r2
 8002758:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800275c:	464b      	mov	r3, r9
 800275e:	460a      	mov	r2, r1
 8002760:	eb42 0303 	adc.w	r3, r2, r3
 8002764:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002774:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002778:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800277c:	460b      	mov	r3, r1
 800277e:	18db      	adds	r3, r3, r3
 8002780:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002782:	4613      	mov	r3, r2
 8002784:	eb42 0303 	adc.w	r3, r2, r3
 8002788:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800278a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800278e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002792:	f7fd fd21 	bl	80001d8 <__aeabi_uldivmod>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	4b0d      	ldr	r3, [pc, #52]	@ (80027d0 <UART_SetConfig+0x2d4>)
 800279c:	fba3 1302 	umull	r1, r3, r3, r2
 80027a0:	095b      	lsrs	r3, r3, #5
 80027a2:	2164      	movs	r1, #100	@ 0x64
 80027a4:	fb01 f303 	mul.w	r3, r1, r3
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	3332      	adds	r3, #50	@ 0x32
 80027ae:	4a08      	ldr	r2, [pc, #32]	@ (80027d0 <UART_SetConfig+0x2d4>)
 80027b0:	fba2 2303 	umull	r2, r3, r2, r3
 80027b4:	095b      	lsrs	r3, r3, #5
 80027b6:	f003 0207 	and.w	r2, r3, #7
 80027ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4422      	add	r2, r4
 80027c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80027c4:	e106      	b.n	80029d4 <UART_SetConfig+0x4d8>
 80027c6:	bf00      	nop
 80027c8:	40011000 	.word	0x40011000
 80027cc:	40011400 	.word	0x40011400
 80027d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027d8:	2200      	movs	r2, #0
 80027da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80027de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80027e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80027e6:	4642      	mov	r2, r8
 80027e8:	464b      	mov	r3, r9
 80027ea:	1891      	adds	r1, r2, r2
 80027ec:	6239      	str	r1, [r7, #32]
 80027ee:	415b      	adcs	r3, r3
 80027f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80027f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027f6:	4641      	mov	r1, r8
 80027f8:	1854      	adds	r4, r2, r1
 80027fa:	4649      	mov	r1, r9
 80027fc:	eb43 0501 	adc.w	r5, r3, r1
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	f04f 0300 	mov.w	r3, #0
 8002808:	00eb      	lsls	r3, r5, #3
 800280a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800280e:	00e2      	lsls	r2, r4, #3
 8002810:	4614      	mov	r4, r2
 8002812:	461d      	mov	r5, r3
 8002814:	4643      	mov	r3, r8
 8002816:	18e3      	adds	r3, r4, r3
 8002818:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800281c:	464b      	mov	r3, r9
 800281e:	eb45 0303 	adc.w	r3, r5, r3
 8002822:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002832:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002836:	f04f 0200 	mov.w	r2, #0
 800283a:	f04f 0300 	mov.w	r3, #0
 800283e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002842:	4629      	mov	r1, r5
 8002844:	008b      	lsls	r3, r1, #2
 8002846:	4621      	mov	r1, r4
 8002848:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800284c:	4621      	mov	r1, r4
 800284e:	008a      	lsls	r2, r1, #2
 8002850:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002854:	f7fd fcc0 	bl	80001d8 <__aeabi_uldivmod>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4b60      	ldr	r3, [pc, #384]	@ (80029e0 <UART_SetConfig+0x4e4>)
 800285e:	fba3 2302 	umull	r2, r3, r3, r2
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	011c      	lsls	r4, r3, #4
 8002866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800286a:	2200      	movs	r2, #0
 800286c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002870:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002874:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002878:	4642      	mov	r2, r8
 800287a:	464b      	mov	r3, r9
 800287c:	1891      	adds	r1, r2, r2
 800287e:	61b9      	str	r1, [r7, #24]
 8002880:	415b      	adcs	r3, r3
 8002882:	61fb      	str	r3, [r7, #28]
 8002884:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002888:	4641      	mov	r1, r8
 800288a:	1851      	adds	r1, r2, r1
 800288c:	6139      	str	r1, [r7, #16]
 800288e:	4649      	mov	r1, r9
 8002890:	414b      	adcs	r3, r1
 8002892:	617b      	str	r3, [r7, #20]
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	f04f 0300 	mov.w	r3, #0
 800289c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028a0:	4659      	mov	r1, fp
 80028a2:	00cb      	lsls	r3, r1, #3
 80028a4:	4651      	mov	r1, sl
 80028a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028aa:	4651      	mov	r1, sl
 80028ac:	00ca      	lsls	r2, r1, #3
 80028ae:	4610      	mov	r0, r2
 80028b0:	4619      	mov	r1, r3
 80028b2:	4603      	mov	r3, r0
 80028b4:	4642      	mov	r2, r8
 80028b6:	189b      	adds	r3, r3, r2
 80028b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80028bc:	464b      	mov	r3, r9
 80028be:	460a      	mov	r2, r1
 80028c0:	eb42 0303 	adc.w	r3, r2, r3
 80028c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80028c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80028d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80028d4:	f04f 0200 	mov.w	r2, #0
 80028d8:	f04f 0300 	mov.w	r3, #0
 80028dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80028e0:	4649      	mov	r1, r9
 80028e2:	008b      	lsls	r3, r1, #2
 80028e4:	4641      	mov	r1, r8
 80028e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028ea:	4641      	mov	r1, r8
 80028ec:	008a      	lsls	r2, r1, #2
 80028ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80028f2:	f7fd fc71 	bl	80001d8 <__aeabi_uldivmod>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	4611      	mov	r1, r2
 80028fc:	4b38      	ldr	r3, [pc, #224]	@ (80029e0 <UART_SetConfig+0x4e4>)
 80028fe:	fba3 2301 	umull	r2, r3, r3, r1
 8002902:	095b      	lsrs	r3, r3, #5
 8002904:	2264      	movs	r2, #100	@ 0x64
 8002906:	fb02 f303 	mul.w	r3, r2, r3
 800290a:	1acb      	subs	r3, r1, r3
 800290c:	011b      	lsls	r3, r3, #4
 800290e:	3332      	adds	r3, #50	@ 0x32
 8002910:	4a33      	ldr	r2, [pc, #204]	@ (80029e0 <UART_SetConfig+0x4e4>)
 8002912:	fba2 2303 	umull	r2, r3, r2, r3
 8002916:	095b      	lsrs	r3, r3, #5
 8002918:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800291c:	441c      	add	r4, r3
 800291e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002922:	2200      	movs	r2, #0
 8002924:	673b      	str	r3, [r7, #112]	@ 0x70
 8002926:	677a      	str	r2, [r7, #116]	@ 0x74
 8002928:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800292c:	4642      	mov	r2, r8
 800292e:	464b      	mov	r3, r9
 8002930:	1891      	adds	r1, r2, r2
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	415b      	adcs	r3, r3
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800293c:	4641      	mov	r1, r8
 800293e:	1851      	adds	r1, r2, r1
 8002940:	6039      	str	r1, [r7, #0]
 8002942:	4649      	mov	r1, r9
 8002944:	414b      	adcs	r3, r1
 8002946:	607b      	str	r3, [r7, #4]
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	f04f 0300 	mov.w	r3, #0
 8002950:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002954:	4659      	mov	r1, fp
 8002956:	00cb      	lsls	r3, r1, #3
 8002958:	4651      	mov	r1, sl
 800295a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800295e:	4651      	mov	r1, sl
 8002960:	00ca      	lsls	r2, r1, #3
 8002962:	4610      	mov	r0, r2
 8002964:	4619      	mov	r1, r3
 8002966:	4603      	mov	r3, r0
 8002968:	4642      	mov	r2, r8
 800296a:	189b      	adds	r3, r3, r2
 800296c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800296e:	464b      	mov	r3, r9
 8002970:	460a      	mov	r2, r1
 8002972:	eb42 0303 	adc.w	r3, r2, r3
 8002976:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	663b      	str	r3, [r7, #96]	@ 0x60
 8002982:	667a      	str	r2, [r7, #100]	@ 0x64
 8002984:	f04f 0200 	mov.w	r2, #0
 8002988:	f04f 0300 	mov.w	r3, #0
 800298c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002990:	4649      	mov	r1, r9
 8002992:	008b      	lsls	r3, r1, #2
 8002994:	4641      	mov	r1, r8
 8002996:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800299a:	4641      	mov	r1, r8
 800299c:	008a      	lsls	r2, r1, #2
 800299e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80029a2:	f7fd fc19 	bl	80001d8 <__aeabi_uldivmod>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4b0d      	ldr	r3, [pc, #52]	@ (80029e0 <UART_SetConfig+0x4e4>)
 80029ac:	fba3 1302 	umull	r1, r3, r3, r2
 80029b0:	095b      	lsrs	r3, r3, #5
 80029b2:	2164      	movs	r1, #100	@ 0x64
 80029b4:	fb01 f303 	mul.w	r3, r1, r3
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	3332      	adds	r3, #50	@ 0x32
 80029be:	4a08      	ldr	r2, [pc, #32]	@ (80029e0 <UART_SetConfig+0x4e4>)
 80029c0:	fba2 2303 	umull	r2, r3, r2, r3
 80029c4:	095b      	lsrs	r3, r3, #5
 80029c6:	f003 020f 	and.w	r2, r3, #15
 80029ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4422      	add	r2, r4
 80029d2:	609a      	str	r2, [r3, #8]
}
 80029d4:	bf00      	nop
 80029d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80029da:	46bd      	mov	sp, r7
 80029dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029e0:	51eb851f 	.word	0x51eb851f

080029e4 <memset>:
 80029e4:	4402      	add	r2, r0
 80029e6:	4603      	mov	r3, r0
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d100      	bne.n	80029ee <memset+0xa>
 80029ec:	4770      	bx	lr
 80029ee:	f803 1b01 	strb.w	r1, [r3], #1
 80029f2:	e7f9      	b.n	80029e8 <memset+0x4>

080029f4 <__libc_init_array>:
 80029f4:	b570      	push	{r4, r5, r6, lr}
 80029f6:	4d0d      	ldr	r5, [pc, #52]	@ (8002a2c <__libc_init_array+0x38>)
 80029f8:	4c0d      	ldr	r4, [pc, #52]	@ (8002a30 <__libc_init_array+0x3c>)
 80029fa:	1b64      	subs	r4, r4, r5
 80029fc:	10a4      	asrs	r4, r4, #2
 80029fe:	2600      	movs	r6, #0
 8002a00:	42a6      	cmp	r6, r4
 8002a02:	d109      	bne.n	8002a18 <__libc_init_array+0x24>
 8002a04:	4d0b      	ldr	r5, [pc, #44]	@ (8002a34 <__libc_init_array+0x40>)
 8002a06:	4c0c      	ldr	r4, [pc, #48]	@ (8002a38 <__libc_init_array+0x44>)
 8002a08:	f000 f818 	bl	8002a3c <_init>
 8002a0c:	1b64      	subs	r4, r4, r5
 8002a0e:	10a4      	asrs	r4, r4, #2
 8002a10:	2600      	movs	r6, #0
 8002a12:	42a6      	cmp	r6, r4
 8002a14:	d105      	bne.n	8002a22 <__libc_init_array+0x2e>
 8002a16:	bd70      	pop	{r4, r5, r6, pc}
 8002a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a1c:	4798      	blx	r3
 8002a1e:	3601      	adds	r6, #1
 8002a20:	e7ee      	b.n	8002a00 <__libc_init_array+0xc>
 8002a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a26:	4798      	blx	r3
 8002a28:	3601      	adds	r6, #1
 8002a2a:	e7f2      	b.n	8002a12 <__libc_init_array+0x1e>
 8002a2c:	08002a74 	.word	0x08002a74
 8002a30:	08002a74 	.word	0x08002a74
 8002a34:	08002a74 	.word	0x08002a74
 8002a38:	08002a78 	.word	0x08002a78

08002a3c <_init>:
 8002a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a3e:	bf00      	nop
 8002a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a42:	bc08      	pop	{r3}
 8002a44:	469e      	mov	lr, r3
 8002a46:	4770      	bx	lr

08002a48 <_fini>:
 8002a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a4a:	bf00      	nop
 8002a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a4e:	bc08      	pop	{r3}
 8002a50:	469e      	mov	lr, r3
 8002a52:	4770      	bx	lr
