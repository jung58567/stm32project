
uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005560  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08005700  08005700  00006700  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005930  08005930  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  08005930  08005930  00006930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005938  08005938  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005938  08005938  00006938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800593c  0800593c  0000693c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005940  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  2000006c  080059ac  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  080059ac  0000729c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000098c0  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ccc  00000000  00000000  0001095c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f0  00000000  00000000  00012628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005fa  00000000  00000000  00012e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016eae  00000000  00000000  00013412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000acc4  00000000  00000000  0002a2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000881b1  00000000  00000000  00034f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd135  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a08  00000000  00000000  000bd178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000bfb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080056e8 	.word	0x080056e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	080056e8 	.word	0x080056e8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b96a 	b.w	8000e68 <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9d08      	ldr	r5, [sp, #32]
 8000bb2:	460c      	mov	r4, r1
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d14e      	bne.n	8000c56 <__udivmoddi4+0xaa>
 8000bb8:	4694      	mov	ip, r2
 8000bba:	458c      	cmp	ip, r1
 8000bbc:	4686      	mov	lr, r0
 8000bbe:	fab2 f282 	clz	r2, r2
 8000bc2:	d962      	bls.n	8000c8a <__udivmoddi4+0xde>
 8000bc4:	b14a      	cbz	r2, 8000bda <__udivmoddi4+0x2e>
 8000bc6:	f1c2 0320 	rsb	r3, r2, #32
 8000bca:	4091      	lsls	r1, r2
 8000bcc:	fa20 f303 	lsr.w	r3, r0, r3
 8000bd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd4:	4319      	orrs	r1, r3
 8000bd6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bde:	fa1f f68c 	uxth.w	r6, ip
 8000be2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000be6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bea:	fb07 1114 	mls	r1, r7, r4, r1
 8000bee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf2:	fb04 f106 	mul.w	r1, r4, r6
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x64>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c02:	f080 8112 	bcs.w	8000e2a <__udivmoddi4+0x27e>
 8000c06:	4299      	cmp	r1, r3
 8000c08:	f240 810f 	bls.w	8000e2a <__udivmoddi4+0x27e>
 8000c0c:	3c02      	subs	r4, #2
 8000c0e:	4463      	add	r3, ip
 8000c10:	1a59      	subs	r1, r3, r1
 8000c12:	fa1f f38e 	uxth.w	r3, lr
 8000c16:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c1a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c22:	fb00 f606 	mul.w	r6, r0, r6
 8000c26:	429e      	cmp	r6, r3
 8000c28:	d90a      	bls.n	8000c40 <__udivmoddi4+0x94>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c32:	f080 80fc 	bcs.w	8000e2e <__udivmoddi4+0x282>
 8000c36:	429e      	cmp	r6, r3
 8000c38:	f240 80f9 	bls.w	8000e2e <__udivmoddi4+0x282>
 8000c3c:	4463      	add	r3, ip
 8000c3e:	3802      	subs	r0, #2
 8000c40:	1b9b      	subs	r3, r3, r6
 8000c42:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c46:	2100      	movs	r1, #0
 8000c48:	b11d      	cbz	r5, 8000c52 <__udivmoddi4+0xa6>
 8000c4a:	40d3      	lsrs	r3, r2
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d905      	bls.n	8000c66 <__udivmoddi4+0xba>
 8000c5a:	b10d      	cbz	r5, 8000c60 <__udivmoddi4+0xb4>
 8000c5c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c60:	2100      	movs	r1, #0
 8000c62:	4608      	mov	r0, r1
 8000c64:	e7f5      	b.n	8000c52 <__udivmoddi4+0xa6>
 8000c66:	fab3 f183 	clz	r1, r3
 8000c6a:	2900      	cmp	r1, #0
 8000c6c:	d146      	bne.n	8000cfc <__udivmoddi4+0x150>
 8000c6e:	42a3      	cmp	r3, r4
 8000c70:	d302      	bcc.n	8000c78 <__udivmoddi4+0xcc>
 8000c72:	4290      	cmp	r0, r2
 8000c74:	f0c0 80f0 	bcc.w	8000e58 <__udivmoddi4+0x2ac>
 8000c78:	1a86      	subs	r6, r0, r2
 8000c7a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c7e:	2001      	movs	r0, #1
 8000c80:	2d00      	cmp	r5, #0
 8000c82:	d0e6      	beq.n	8000c52 <__udivmoddi4+0xa6>
 8000c84:	e9c5 6300 	strd	r6, r3, [r5]
 8000c88:	e7e3      	b.n	8000c52 <__udivmoddi4+0xa6>
 8000c8a:	2a00      	cmp	r2, #0
 8000c8c:	f040 8090 	bne.w	8000db0 <__udivmoddi4+0x204>
 8000c90:	eba1 040c 	sub.w	r4, r1, ip
 8000c94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c98:	fa1f f78c 	uxth.w	r7, ip
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ca2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ca6:	fb08 4416 	mls	r4, r8, r6, r4
 8000caa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cae:	fb07 f006 	mul.w	r0, r7, r6
 8000cb2:	4298      	cmp	r0, r3
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0x11c>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x11a>
 8000cc0:	4298      	cmp	r0, r3
 8000cc2:	f200 80cd 	bhi.w	8000e60 <__udivmoddi4+0x2b4>
 8000cc6:	4626      	mov	r6, r4
 8000cc8:	1a1c      	subs	r4, r3, r0
 8000cca:	fa1f f38e 	uxth.w	r3, lr
 8000cce:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cd2:	fb08 4410 	mls	r4, r8, r0, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb00 f707 	mul.w	r7, r0, r7
 8000cde:	429f      	cmp	r7, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x148>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x146>
 8000cec:	429f      	cmp	r7, r3
 8000cee:	f200 80b0 	bhi.w	8000e52 <__udivmoddi4+0x2a6>
 8000cf2:	4620      	mov	r0, r4
 8000cf4:	1bdb      	subs	r3, r3, r7
 8000cf6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cfa:	e7a5      	b.n	8000c48 <__udivmoddi4+0x9c>
 8000cfc:	f1c1 0620 	rsb	r6, r1, #32
 8000d00:	408b      	lsls	r3, r1
 8000d02:	fa22 f706 	lsr.w	r7, r2, r6
 8000d06:	431f      	orrs	r7, r3
 8000d08:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d0c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d10:	ea43 030c 	orr.w	r3, r3, ip
 8000d14:	40f4      	lsrs	r4, r6
 8000d16:	fa00 f801 	lsl.w	r8, r0, r1
 8000d1a:	0c38      	lsrs	r0, r7, #16
 8000d1c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d20:	fbb4 fef0 	udiv	lr, r4, r0
 8000d24:	fa1f fc87 	uxth.w	ip, r7
 8000d28:	fb00 441e 	mls	r4, r0, lr, r4
 8000d2c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d30:	fb0e f90c 	mul.w	r9, lr, ip
 8000d34:	45a1      	cmp	r9, r4
 8000d36:	fa02 f201 	lsl.w	r2, r2, r1
 8000d3a:	d90a      	bls.n	8000d52 <__udivmoddi4+0x1a6>
 8000d3c:	193c      	adds	r4, r7, r4
 8000d3e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d42:	f080 8084 	bcs.w	8000e4e <__udivmoddi4+0x2a2>
 8000d46:	45a1      	cmp	r9, r4
 8000d48:	f240 8081 	bls.w	8000e4e <__udivmoddi4+0x2a2>
 8000d4c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d50:	443c      	add	r4, r7
 8000d52:	eba4 0409 	sub.w	r4, r4, r9
 8000d56:	fa1f f983 	uxth.w	r9, r3
 8000d5a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d5e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d62:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d66:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	d907      	bls.n	8000d7e <__udivmoddi4+0x1d2>
 8000d6e:	193c      	adds	r4, r7, r4
 8000d70:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d74:	d267      	bcs.n	8000e46 <__udivmoddi4+0x29a>
 8000d76:	45a4      	cmp	ip, r4
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0x29a>
 8000d7a:	3b02      	subs	r3, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d82:	fba0 9302 	umull	r9, r3, r0, r2
 8000d86:	eba4 040c 	sub.w	r4, r4, ip
 8000d8a:	429c      	cmp	r4, r3
 8000d8c:	46ce      	mov	lr, r9
 8000d8e:	469c      	mov	ip, r3
 8000d90:	d351      	bcc.n	8000e36 <__udivmoddi4+0x28a>
 8000d92:	d04e      	beq.n	8000e32 <__udivmoddi4+0x286>
 8000d94:	b155      	cbz	r5, 8000dac <__udivmoddi4+0x200>
 8000d96:	ebb8 030e 	subs.w	r3, r8, lr
 8000d9a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d9e:	fa04 f606 	lsl.w	r6, r4, r6
 8000da2:	40cb      	lsrs	r3, r1
 8000da4:	431e      	orrs	r6, r3
 8000da6:	40cc      	lsrs	r4, r1
 8000da8:	e9c5 6400 	strd	r6, r4, [r5]
 8000dac:	2100      	movs	r1, #0
 8000dae:	e750      	b.n	8000c52 <__udivmoddi4+0xa6>
 8000db0:	f1c2 0320 	rsb	r3, r2, #32
 8000db4:	fa20 f103 	lsr.w	r1, r0, r3
 8000db8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbc:	fa24 f303 	lsr.w	r3, r4, r3
 8000dc0:	4094      	lsls	r4, r2
 8000dc2:	430c      	orrs	r4, r1
 8000dc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dcc:	fa1f f78c 	uxth.w	r7, ip
 8000dd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd4:	fb08 3110 	mls	r1, r8, r0, r3
 8000dd8:	0c23      	lsrs	r3, r4, #16
 8000dda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dde:	fb00 f107 	mul.w	r1, r0, r7
 8000de2:	4299      	cmp	r1, r3
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x24c>
 8000de6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dea:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dee:	d22c      	bcs.n	8000e4a <__udivmoddi4+0x29e>
 8000df0:	4299      	cmp	r1, r3
 8000df2:	d92a      	bls.n	8000e4a <__udivmoddi4+0x29e>
 8000df4:	3802      	subs	r0, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a5b      	subs	r3, r3, r1
 8000dfa:	b2a4      	uxth	r4, r4
 8000dfc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e00:	fb08 3311 	mls	r3, r8, r1, r3
 8000e04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e08:	fb01 f307 	mul.w	r3, r1, r7
 8000e0c:	42a3      	cmp	r3, r4
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x276>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e18:	d213      	bcs.n	8000e42 <__udivmoddi4+0x296>
 8000e1a:	42a3      	cmp	r3, r4
 8000e1c:	d911      	bls.n	8000e42 <__udivmoddi4+0x296>
 8000e1e:	3902      	subs	r1, #2
 8000e20:	4464      	add	r4, ip
 8000e22:	1ae4      	subs	r4, r4, r3
 8000e24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e28:	e739      	b.n	8000c9e <__udivmoddi4+0xf2>
 8000e2a:	4604      	mov	r4, r0
 8000e2c:	e6f0      	b.n	8000c10 <__udivmoddi4+0x64>
 8000e2e:	4608      	mov	r0, r1
 8000e30:	e706      	b.n	8000c40 <__udivmoddi4+0x94>
 8000e32:	45c8      	cmp	r8, r9
 8000e34:	d2ae      	bcs.n	8000d94 <__udivmoddi4+0x1e8>
 8000e36:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e3a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e3e:	3801      	subs	r0, #1
 8000e40:	e7a8      	b.n	8000d94 <__udivmoddi4+0x1e8>
 8000e42:	4631      	mov	r1, r6
 8000e44:	e7ed      	b.n	8000e22 <__udivmoddi4+0x276>
 8000e46:	4603      	mov	r3, r0
 8000e48:	e799      	b.n	8000d7e <__udivmoddi4+0x1d2>
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	e7d4      	b.n	8000df8 <__udivmoddi4+0x24c>
 8000e4e:	46d6      	mov	lr, sl
 8000e50:	e77f      	b.n	8000d52 <__udivmoddi4+0x1a6>
 8000e52:	4463      	add	r3, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	e74d      	b.n	8000cf4 <__udivmoddi4+0x148>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	4623      	mov	r3, r4
 8000e5c:	4608      	mov	r0, r1
 8000e5e:	e70f      	b.n	8000c80 <__udivmoddi4+0xd4>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	e730      	b.n	8000cc8 <__udivmoddi4+0x11c>
 8000e66:	bf00      	nop

08000e68 <__aeabi_idiv0>:
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <HAL_GPIO_EXTI_Callback>:
#include <math.h>
#include <stdbool.h>
extern UART_HandleTypeDef huart2;

// interrupt callback for blue switch
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == SW_Pin){
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e7c:	d103      	bne.n	8000e86 <HAL_GPIO_EXTI_Callback+0x1a>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000e7e:	2120      	movs	r1, #32
 8000e80:	4803      	ldr	r0, [pc, #12]	@ (8000e90 <HAL_GPIO_EXTI_Callback+0x24>)
 8000e82:	f000 ff9c 	bl	8001dbe <HAL_GPIO_TogglePin>
	}
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40020000 	.word	0x40020000
 8000e94:	00000000 	.word	0x00000000

08000e98 <app>:
//int _write(int file, char *p, int len){
//	HAL_UART_Transmit(&huart2, (uint8_t *)p, len, 10);
//	return len;
//}
void app(){
 8000e98:	b590      	push	{r4, r7, lr}
 8000e9a:	b087      	sub	sp, #28
 8000e9c:	af00      	add	r7, sp, #0
	//uart 장치 초기화
	initUart(&huart2);
 8000e9e:	4866      	ldr	r0, [pc, #408]	@ (8001038 <app+0x1a0>)
 8000ea0:	f000 fb6a 	bl	8001578 <initUart>
	int time = HAL_GetTick();
 8000ea4:	f000 fc3e 	bl	8001724 <HAL_GetTick>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	617b      	str	r3, [r7, #20]
	int time2 = HAL_GetTick();
 8000eac:	f000 fc3a 	bl	8001724 <HAL_GetTick>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	613b      	str	r3, [r7, #16]
	while(1){
		if((time + 50) < HAL_GetTick()){//100이 delay time처럼 작용
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	3332      	adds	r3, #50	@ 0x32
 8000eb8:	461c      	mov	r4, r3
 8000eba:	f000 fc33 	bl	8001724 <HAL_GetTick>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	429c      	cmp	r4, r3
 8000ec2:	f080 809f 	bcs.w	8001004 <app+0x16c>
			time = HAL_GetTick();
 8000ec6:	f000 fc2d 	bl	8001724 <HAL_GetTick>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	617b      	str	r3, [r7, #20]
			static bool isRun = true;
			static int angle =0;
			if(isRun) angle++;
 8000ece:	4b5b      	ldr	r3, [pc, #364]	@ (800103c <app+0x1a4>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d004      	beq.n	8000ee0 <app+0x48>
 8000ed6:	4b5a      	ldr	r3, [pc, #360]	@ (8001040 <app+0x1a8>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	3301      	adds	r3, #1
 8000edc:	4a58      	ldr	r2, [pc, #352]	@ (8001040 <app+0x1a8>)
 8000ede:	6013      	str	r3, [r2, #0]
			angle%=360;
 8000ee0:	4b57      	ldr	r3, [pc, #348]	@ (8001040 <app+0x1a8>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a57      	ldr	r2, [pc, #348]	@ (8001044 <app+0x1ac>)
 8000ee6:	fb82 1203 	smull	r1, r2, r2, r3
 8000eea:	441a      	add	r2, r3
 8000eec:	1211      	asrs	r1, r2, #8
 8000eee:	17da      	asrs	r2, r3, #31
 8000ef0:	1a8a      	subs	r2, r1, r2
 8000ef2:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8000ef6:	fb01 f202 	mul.w	r2, r1, r2
 8000efa:	1a9a      	subs	r2, r3, r2
 8000efc:	4b50      	ldr	r3, [pc, #320]	@ (8001040 <app+0x1a8>)
 8000efe:	601a      	str	r2, [r3, #0]
			int sinv = sin(angle*M_PI/180)*100+100;
 8000f00:	4b4f      	ldr	r3, [pc, #316]	@ (8001040 <app+0x1a8>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fb0d 	bl	8000524 <__aeabi_i2d>
 8000f0a:	a349      	add	r3, pc, #292	@ (adr r3, 8001030 <app+0x198>)
 8000f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f10:	f7ff fb72 	bl	80005f8 <__aeabi_dmul>
 8000f14:	4602      	mov	r2, r0
 8000f16:	460b      	mov	r3, r1
 8000f18:	4610      	mov	r0, r2
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	f04f 0200 	mov.w	r2, #0
 8000f20:	4b49      	ldr	r3, [pc, #292]	@ (8001048 <app+0x1b0>)
 8000f22:	f7ff fc93 	bl	800084c <__aeabi_ddiv>
 8000f26:	4602      	mov	r2, r0
 8000f28:	460b      	mov	r3, r1
 8000f2a:	ec43 2b17 	vmov	d7, r2, r3
 8000f2e:	eeb0 0a47 	vmov.f32	s0, s14
 8000f32:	eef0 0a67 	vmov.f32	s1, s15
 8000f36:	f003 fba7 	bl	8004688 <sin>
 8000f3a:	ec51 0b10 	vmov	r0, r1, d0
 8000f3e:	f04f 0200 	mov.w	r2, #0
 8000f42:	4b42      	ldr	r3, [pc, #264]	@ (800104c <app+0x1b4>)
 8000f44:	f7ff fb58 	bl	80005f8 <__aeabi_dmul>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f04f 0200 	mov.w	r2, #0
 8000f54:	4b3d      	ldr	r3, [pc, #244]	@ (800104c <app+0x1b4>)
 8000f56:	f7ff f999 	bl	800028c <__adddf3>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	4610      	mov	r0, r2
 8000f60:	4619      	mov	r1, r3
 8000f62:	f7ff fde3 	bl	8000b2c <__aeabi_d2iz>
 8000f66:	4603      	mov	r3, r0
 8000f68:	60fb      	str	r3, [r7, #12]
			int cosv = cos(angle*M_PI/180)*100+100;
 8000f6a:	4b35      	ldr	r3, [pc, #212]	@ (8001040 <app+0x1a8>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff fad8 	bl	8000524 <__aeabi_i2d>
 8000f74:	a32e      	add	r3, pc, #184	@ (adr r3, 8001030 <app+0x198>)
 8000f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7a:	f7ff fb3d 	bl	80005f8 <__aeabi_dmul>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	4610      	mov	r0, r2
 8000f84:	4619      	mov	r1, r3
 8000f86:	f04f 0200 	mov.w	r2, #0
 8000f8a:	4b2f      	ldr	r3, [pc, #188]	@ (8001048 <app+0x1b0>)
 8000f8c:	f7ff fc5e 	bl	800084c <__aeabi_ddiv>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	ec43 2b17 	vmov	d7, r2, r3
 8000f98:	eeb0 0a47 	vmov.f32	s0, s14
 8000f9c:	eef0 0a67 	vmov.f32	s1, s15
 8000fa0:	f003 fb1e 	bl	80045e0 <cos>
 8000fa4:	ec51 0b10 	vmov	r0, r1, d0
 8000fa8:	f04f 0200 	mov.w	r2, #0
 8000fac:	4b27      	ldr	r3, [pc, #156]	@ (800104c <app+0x1b4>)
 8000fae:	f7ff fb23 	bl	80005f8 <__aeabi_dmul>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	4610      	mov	r0, r2
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	4b23      	ldr	r3, [pc, #140]	@ (800104c <app+0x1b4>)
 8000fc0:	f7ff f964 	bl	800028c <__adddf3>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4610      	mov	r0, r2
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f7ff fdae 	bl	8000b2c <__aeabi_d2iz>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	60bb      	str	r3, [r7, #8]
			printf("%d,%d\n",sinv,cosv);
 8000fd4:	68ba      	ldr	r2, [r7, #8]
 8000fd6:	68f9      	ldr	r1, [r7, #12]
 8000fd8:	481d      	ldr	r0, [pc, #116]	@ (8001050 <app+0x1b8>)
 8000fda:	f002 fc93 	bl	8003904 <iprintf>
			//uart에서 키 입력
			char ch = getUart();
 8000fde:	f000 fae1 	bl	80015a4 <getUart>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
			if(ch!=0){
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d00b      	beq.n	8001004 <app+0x16c>
				if(ch=='g') isRun =true;
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	2b67      	cmp	r3, #103	@ 0x67
 8000ff0:	d102      	bne.n	8000ff8 <app+0x160>
 8000ff2:	4b12      	ldr	r3, [pc, #72]	@ (800103c <app+0x1a4>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	701a      	strb	r2, [r3, #0]
				if(ch=='s') isRun =false;
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	2b73      	cmp	r3, #115	@ 0x73
 8000ffc:	d102      	bne.n	8001004 <app+0x16c>
 8000ffe:	4b0f      	ldr	r3, [pc, #60]	@ (800103c <app+0x1a4>)
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
			}
		}
		if((time2 + 365) < HAL_GetTick()){
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	f203 136d 	addw	r3, r3, #365	@ 0x16d
 800100a:	461c      	mov	r4, r3
 800100c:	f000 fb8a 	bl	8001724 <HAL_GetTick>
 8001010:	4603      	mov	r3, r0
 8001012:	429c      	cmp	r4, r3
 8001014:	f4bf af4e 	bcs.w	8000eb4 <app+0x1c>
			time2 = HAL_GetTick();
 8001018:	f000 fb84 	bl	8001724 <HAL_GetTick>
 800101c:	4603      	mov	r3, r0
 800101e:	613b      	str	r3, [r7, #16]
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001020:	2120      	movs	r1, #32
 8001022:	480c      	ldr	r0, [pc, #48]	@ (8001054 <app+0x1bc>)
 8001024:	f000 fecb 	bl	8001dbe <HAL_GPIO_TogglePin>
		if((time + 50) < HAL_GetTick()){//100이 delay time처럼 작용
 8001028:	e744      	b.n	8000eb4 <app+0x1c>
 800102a:	bf00      	nop
 800102c:	f3af 8000 	nop.w
 8001030:	54442d18 	.word	0x54442d18
 8001034:	400921fb 	.word	0x400921fb
 8001038:	2000008c 	.word	0x2000008c
 800103c:	20000000 	.word	0x20000000
 8001040:	20000088 	.word	0x20000088
 8001044:	b60b60b7 	.word	0xb60b60b7
 8001048:	40668000 	.word	0x40668000
 800104c:	40590000 	.word	0x40590000
 8001050:	08005700 	.word	0x08005700
 8001054:	40020000 	.word	0x40020000

08001058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800105c:	f000 fafc 	bl	8001658 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001060:	f000 f808 	bl	8001074 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001064:	f000 f88e 	bl	8001184 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001068:	f000 f862 	bl	8001130 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  app();
 800106c:	f7ff ff14 	bl	8000e98 <app>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <main+0x18>

08001074 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b094      	sub	sp, #80	@ 0x50
 8001078:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107a:	f107 0320 	add.w	r3, r7, #32
 800107e:	2230      	movs	r2, #48	@ 0x30
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f002 fc93 	bl	80039ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001098:	2300      	movs	r3, #0
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	4b22      	ldr	r3, [pc, #136]	@ (8001128 <SystemClock_Config+0xb4>)
 800109e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a0:	4a21      	ldr	r2, [pc, #132]	@ (8001128 <SystemClock_Config+0xb4>)
 80010a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80010a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001128 <SystemClock_Config+0xb4>)
 80010aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b4:	2300      	movs	r3, #0
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	4b1c      	ldr	r3, [pc, #112]	@ (800112c <SystemClock_Config+0xb8>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a1b      	ldr	r2, [pc, #108]	@ (800112c <SystemClock_Config+0xb8>)
 80010be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	4b19      	ldr	r3, [pc, #100]	@ (800112c <SystemClock_Config+0xb8>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010d0:	2302      	movs	r3, #2
 80010d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d4:	2301      	movs	r3, #1
 80010d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010d8:	2310      	movs	r3, #16
 80010da:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010dc:	2300      	movs	r3, #0
 80010de:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e0:	f107 0320 	add.w	r3, r7, #32
 80010e4:	4618      	mov	r0, r3
 80010e6:	f000 fe9d 	bl	8001e24 <HAL_RCC_OscConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80010f0:	f000 f8a2 	bl	8001238 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f4:	230f      	movs	r3, #15
 80010f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010f8:	2300      	movs	r3, #0
 80010fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f001 f900 	bl	8002314 <HAL_RCC_ClockConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800111a:	f000 f88d 	bl	8001238 <Error_Handler>
  }
}
 800111e:	bf00      	nop
 8001120:	3750      	adds	r7, #80	@ 0x50
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40023800 	.word	0x40023800
 800112c:	40007000 	.word	0x40007000

08001130 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001134:	4b11      	ldr	r3, [pc, #68]	@ (800117c <MX_USART2_UART_Init+0x4c>)
 8001136:	4a12      	ldr	r2, [pc, #72]	@ (8001180 <MX_USART2_UART_Init+0x50>)
 8001138:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800113a:	4b10      	ldr	r3, [pc, #64]	@ (800117c <MX_USART2_UART_Init+0x4c>)
 800113c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001140:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001142:	4b0e      	ldr	r3, [pc, #56]	@ (800117c <MX_USART2_UART_Init+0x4c>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001148:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <MX_USART2_UART_Init+0x4c>)
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800114e:	4b0b      	ldr	r3, [pc, #44]	@ (800117c <MX_USART2_UART_Init+0x4c>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001154:	4b09      	ldr	r3, [pc, #36]	@ (800117c <MX_USART2_UART_Init+0x4c>)
 8001156:	220c      	movs	r2, #12
 8001158:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800115a:	4b08      	ldr	r3, [pc, #32]	@ (800117c <MX_USART2_UART_Init+0x4c>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001160:	4b06      	ldr	r3, [pc, #24]	@ (800117c <MX_USART2_UART_Init+0x4c>)
 8001162:	2200      	movs	r2, #0
 8001164:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001166:	4805      	ldr	r0, [pc, #20]	@ (800117c <MX_USART2_UART_Init+0x4c>)
 8001168:	f001 fab4 	bl	80026d4 <HAL_UART_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001172:	f000 f861 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	2000008c 	.word	0x2000008c
 8001180:	40004400 	.word	0x40004400

08001184 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b088      	sub	sp, #32
 8001188:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118a:	f107 030c 	add.w	r3, r7, #12
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
 8001198:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	4b23      	ldr	r3, [pc, #140]	@ (800122c <MX_GPIO_Init+0xa8>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	4a22      	ldr	r2, [pc, #136]	@ (800122c <MX_GPIO_Init+0xa8>)
 80011a4:	f043 0304 	orr.w	r3, r3, #4
 80011a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011aa:	4b20      	ldr	r3, [pc, #128]	@ (800122c <MX_GPIO_Init+0xa8>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ae:	f003 0304 	and.w	r3, r3, #4
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	4b1c      	ldr	r3, [pc, #112]	@ (800122c <MX_GPIO_Init+0xa8>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	4a1b      	ldr	r2, [pc, #108]	@ (800122c <MX_GPIO_Init+0xa8>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c6:	4b19      	ldr	r3, [pc, #100]	@ (800122c <MX_GPIO_Init+0xa8>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2120      	movs	r1, #32
 80011d6:	4816      	ldr	r0, [pc, #88]	@ (8001230 <MX_GPIO_Init+0xac>)
 80011d8:	f000 fdd8 	bl	8001d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
 80011dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011e2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 80011ec:	f107 030c 	add.w	r3, r7, #12
 80011f0:	4619      	mov	r1, r3
 80011f2:	4810      	ldr	r0, [pc, #64]	@ (8001234 <MX_GPIO_Init+0xb0>)
 80011f4:	f000 fc46 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80011f8:	2320      	movs	r3, #32
 80011fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fc:	2301      	movs	r3, #1
 80011fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001204:	2300      	movs	r3, #0
 8001206:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	4619      	mov	r1, r3
 800120e:	4808      	ldr	r0, [pc, #32]	@ (8001230 <MX_GPIO_Init+0xac>)
 8001210:	f000 fc38 	bl	8001a84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001214:	2200      	movs	r2, #0
 8001216:	2100      	movs	r1, #0
 8001218:	2028      	movs	r0, #40	@ 0x28
 800121a:	f000 fb6a 	bl	80018f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800121e:	2028      	movs	r0, #40	@ 0x28
 8001220:	f000 fb83 	bl	800192a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001224:	bf00      	nop
 8001226:	3720      	adds	r7, #32
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40023800 	.word	0x40023800
 8001230:	40020000 	.word	0x40020000
 8001234:	40020800 	.word	0x40020800

08001238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800123c:	b672      	cpsid	i
}
 800123e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <Error_Handler+0x8>

08001244 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	4b10      	ldr	r3, [pc, #64]	@ (8001290 <HAL_MspInit+0x4c>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001252:	4a0f      	ldr	r2, [pc, #60]	@ (8001290 <HAL_MspInit+0x4c>)
 8001254:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001258:	6453      	str	r3, [r2, #68]	@ 0x44
 800125a:	4b0d      	ldr	r3, [pc, #52]	@ (8001290 <HAL_MspInit+0x4c>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	603b      	str	r3, [r7, #0]
 800126a:	4b09      	ldr	r3, [pc, #36]	@ (8001290 <HAL_MspInit+0x4c>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126e:	4a08      	ldr	r2, [pc, #32]	@ (8001290 <HAL_MspInit+0x4c>)
 8001270:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001274:	6413      	str	r3, [r2, #64]	@ 0x40
 8001276:	4b06      	ldr	r3, [pc, #24]	@ (8001290 <HAL_MspInit+0x4c>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800127e:	603b      	str	r3, [r7, #0]
 8001280:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	40023800 	.word	0x40023800

08001294 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08a      	sub	sp, #40	@ 0x28
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001328 <HAL_UART_MspInit+0x94>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d133      	bne.n	800131e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	4b1c      	ldr	r3, [pc, #112]	@ (800132c <HAL_UART_MspInit+0x98>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012be:	4a1b      	ldr	r2, [pc, #108]	@ (800132c <HAL_UART_MspInit+0x98>)
 80012c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012c6:	4b19      	ldr	r3, [pc, #100]	@ (800132c <HAL_UART_MspInit+0x98>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	4b15      	ldr	r3, [pc, #84]	@ (800132c <HAL_UART_MspInit+0x98>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012da:	4a14      	ldr	r2, [pc, #80]	@ (800132c <HAL_UART_MspInit+0x98>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e2:	4b12      	ldr	r3, [pc, #72]	@ (800132c <HAL_UART_MspInit+0x98>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012ee:	230c      	movs	r3, #12
 80012f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fa:	2303      	movs	r3, #3
 80012fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012fe:	2307      	movs	r3, #7
 8001300:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	4619      	mov	r1, r3
 8001308:	4809      	ldr	r0, [pc, #36]	@ (8001330 <HAL_UART_MspInit+0x9c>)
 800130a:	f000 fbbb 	bl	8001a84 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	2100      	movs	r1, #0
 8001312:	2026      	movs	r0, #38	@ 0x26
 8001314:	f000 faed 	bl	80018f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001318:	2026      	movs	r0, #38	@ 0x26
 800131a:	f000 fb06 	bl	800192a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800131e:	bf00      	nop
 8001320:	3728      	adds	r7, #40	@ 0x28
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40004400 	.word	0x40004400
 800132c:	40023800 	.word	0x40023800
 8001330:	40020000 	.word	0x40020000

08001334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <NMI_Handler+0x4>

0800133c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <HardFault_Handler+0x4>

08001344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <MemManage_Handler+0x4>

0800134c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001350:	bf00      	nop
 8001352:	e7fd      	b.n	8001350 <BusFault_Handler+0x4>

08001354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001358:	bf00      	nop
 800135a:	e7fd      	b.n	8001358 <UsageFault_Handler+0x4>

0800135c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800138a:	f000 f9b7 	bl	80016fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001398:	4802      	ldr	r0, [pc, #8]	@ (80013a4 <USART2_IRQHandler+0x10>)
 800139a:	f001 fa9b 	bl	80028d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2000008c 	.word	0x2000008c

080013a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_Pin);
 80013ac:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80013b0:	f000 fd20 	bl	8001df4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	e00a      	b.n	80013e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013ca:	f3af 8000 	nop.w
 80013ce:	4601      	mov	r1, r0
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	1c5a      	adds	r2, r3, #1
 80013d4:	60ba      	str	r2, [r7, #8]
 80013d6:	b2ca      	uxtb	r2, r1
 80013d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	3301      	adds	r3, #1
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	697a      	ldr	r2, [r7, #20]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	dbf0      	blt.n	80013ca <_read+0x12>
  }

  return len;
 80013e8:	687b      	ldr	r3, [r7, #4]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013fe:	4618      	mov	r0, r3
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
 8001412:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800141a:	605a      	str	r2, [r3, #4]
  return 0;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <_isatty>:

int _isatty(int file)
{
 800142a:	b480      	push	{r7}
 800142c:	b083      	sub	sp, #12
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001432:	2301      	movs	r3, #1
}
 8001434:	4618      	mov	r0, r3
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
	...

0800145c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001464:	4a14      	ldr	r2, [pc, #80]	@ (80014b8 <_sbrk+0x5c>)
 8001466:	4b15      	ldr	r3, [pc, #84]	@ (80014bc <_sbrk+0x60>)
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001470:	4b13      	ldr	r3, [pc, #76]	@ (80014c0 <_sbrk+0x64>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d102      	bne.n	800147e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001478:	4b11      	ldr	r3, [pc, #68]	@ (80014c0 <_sbrk+0x64>)
 800147a:	4a12      	ldr	r2, [pc, #72]	@ (80014c4 <_sbrk+0x68>)
 800147c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800147e:	4b10      	ldr	r3, [pc, #64]	@ (80014c0 <_sbrk+0x64>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	429a      	cmp	r2, r3
 800148a:	d207      	bcs.n	800149c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800148c:	f002 fade 	bl	8003a4c <__errno>
 8001490:	4603      	mov	r3, r0
 8001492:	220c      	movs	r2, #12
 8001494:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001496:	f04f 33ff 	mov.w	r3, #4294967295
 800149a:	e009      	b.n	80014b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800149c:	4b08      	ldr	r3, [pc, #32]	@ (80014c0 <_sbrk+0x64>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014a2:	4b07      	ldr	r3, [pc, #28]	@ (80014c0 <_sbrk+0x64>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	4a05      	ldr	r2, [pc, #20]	@ (80014c0 <_sbrk+0x64>)
 80014ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ae:	68fb      	ldr	r3, [r7, #12]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3718      	adds	r7, #24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20020000 	.word	0x20020000
 80014bc:	00000400 	.word	0x00000400
 80014c0:	200000d4 	.word	0x200000d4
 80014c4:	200002a0 	.word	0x200002a0

080014c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014cc:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <SystemInit+0x20>)
 80014ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014d2:	4a05      	ldr	r2, [pc, #20]	@ (80014e8 <SystemInit+0x20>)
 80014d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <_write>:
uint8_t rxBuffer[rxBufferMax];  //circle buffer = ring buffer
int rxBufferReadIndex; //읽기 위치
int rxBufferWriteIndex;


int _write(int file, char *p, int len){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(myHuart, (uint8_t *)p, len, 10);
 80014f8:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <_write+0x28>)
 80014fa:	6818      	ldr	r0, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	b29a      	uxth	r2, r3
 8001500:	230a      	movs	r3, #10
 8001502:	68b9      	ldr	r1, [r7, #8]
 8001504:	f001 f936 	bl	8002774 <HAL_UART_Transmit>
	return len;
 8001508:	687b      	ldr	r3, [r7, #4]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200000d8 	.word	0x200000d8

08001518 <HAL_UART_RxCpltCallback>:

// 수신 인터럽트(interrupt = event) 콜백(listner, isr)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	//수신된 문자 저장
	rxBuffer[rxBufferWriteIndex++] = rxCharacter;
 8001520:	4b10      	ldr	r3, [pc, #64]	@ (8001564 <HAL_UART_RxCpltCallback+0x4c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	490f      	ldr	r1, [pc, #60]	@ (8001564 <HAL_UART_RxCpltCallback+0x4c>)
 8001528:	600a      	str	r2, [r1, #0]
 800152a:	4a0f      	ldr	r2, [pc, #60]	@ (8001568 <HAL_UART_RxCpltCallback+0x50>)
 800152c:	7811      	ldrb	r1, [r2, #0]
 800152e:	4a0f      	ldr	r2, [pc, #60]	@ (800156c <HAL_UART_RxCpltCallback+0x54>)
 8001530:	54d1      	strb	r1, [r2, r3]
	//최대값 도달시 처음으로
	rxBufferWriteIndex %=rxBufferMax;
 8001532:	4b0c      	ldr	r3, [pc, #48]	@ (8001564 <HAL_UART_RxCpltCallback+0x4c>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	4b0e      	ldr	r3, [pc, #56]	@ (8001570 <HAL_UART_RxCpltCallback+0x58>)
 8001538:	fb83 1302 	smull	r1, r3, r3, r2
 800153c:	1159      	asrs	r1, r3, #5
 800153e:	17d3      	asrs	r3, r2, #31
 8001540:	1acb      	subs	r3, r1, r3
 8001542:	2164      	movs	r1, #100	@ 0x64
 8001544:	fb01 f303 	mul.w	r3, r1, r3
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	4a06      	ldr	r2, [pc, #24]	@ (8001564 <HAL_UART_RxCpltCallback+0x4c>)
 800154c:	6013      	str	r3, [r2, #0]
	//인터럽트 재 장전
	HAL_UART_Receive_IT(myHuart, &rxCharacter, 1);
 800154e:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <HAL_UART_RxCpltCallback+0x5c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2201      	movs	r2, #1
 8001554:	4904      	ldr	r1, [pc, #16]	@ (8001568 <HAL_UART_RxCpltCallback+0x50>)
 8001556:	4618      	mov	r0, r3
 8001558:	f001 f997 	bl	800288a <HAL_UART_Receive_IT>
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000148 	.word	0x20000148
 8001568:	200000dc 	.word	0x200000dc
 800156c:	200000e0 	.word	0x200000e0
 8001570:	51eb851f 	.word	0x51eb851f
 8001574:	200000d8 	.word	0x200000d8

08001578 <initUart>:

//uart 장치 초기화
void initUart(UART_HandleTypeDef *inHuart){
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	//uart 장치 주소 백업
	myHuart = inHuart;
 8001580:	4a06      	ldr	r2, [pc, #24]	@ (800159c <initUart+0x24>)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6013      	str	r3, [r2, #0]
	//인터럽트 장전
	HAL_UART_Receive_IT(myHuart, &rxCharacter, 1);
 8001586:	4b05      	ldr	r3, [pc, #20]	@ (800159c <initUart+0x24>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2201      	movs	r2, #1
 800158c:	4904      	ldr	r1, [pc, #16]	@ (80015a0 <initUart+0x28>)
 800158e:	4618      	mov	r0, r3
 8001590:	f001 f97b 	bl	800288a <HAL_UART_Receive_IT>
}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	200000d8 	.word	0x200000d8
 80015a0:	200000dc 	.word	0x200000dc

080015a4 <getUart>:

char getUart(){
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
	char result;
	if(rxBufferReadIndex == rxBufferWriteIndex) return 0;
 80015aa:	4b12      	ldr	r3, [pc, #72]	@ (80015f4 <getUart+0x50>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	4b12      	ldr	r3, [pc, #72]	@ (80015f8 <getUart+0x54>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d101      	bne.n	80015ba <getUart+0x16>
 80015b6:	2300      	movs	r3, #0
 80015b8:	e016      	b.n	80015e8 <getUart+0x44>
	result = rxBuffer[rxBufferReadIndex++];
 80015ba:	4b0e      	ldr	r3, [pc, #56]	@ (80015f4 <getUart+0x50>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	1c5a      	adds	r2, r3, #1
 80015c0:	490c      	ldr	r1, [pc, #48]	@ (80015f4 <getUart+0x50>)
 80015c2:	600a      	str	r2, [r1, #0]
 80015c4:	4a0d      	ldr	r2, [pc, #52]	@ (80015fc <getUart+0x58>)
 80015c6:	5cd3      	ldrb	r3, [r2, r3]
 80015c8:	71fb      	strb	r3, [r7, #7]
	rxBufferReadIndex %= rxBufferMax;
 80015ca:	4b0a      	ldr	r3, [pc, #40]	@ (80015f4 <getUart+0x50>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001600 <getUart+0x5c>)
 80015d0:	fb83 1302 	smull	r1, r3, r3, r2
 80015d4:	1159      	asrs	r1, r3, #5
 80015d6:	17d3      	asrs	r3, r2, #31
 80015d8:	1acb      	subs	r3, r1, r3
 80015da:	2164      	movs	r1, #100	@ 0x64
 80015dc:	fb01 f303 	mul.w	r3, r1, r3
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	4a04      	ldr	r2, [pc, #16]	@ (80015f4 <getUart+0x50>)
 80015e4:	6013      	str	r3, [r2, #0]
	return result;
 80015e6:	79fb      	ldrb	r3, [r7, #7]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	20000144 	.word	0x20000144
 80015f8:	20000148 	.word	0x20000148
 80015fc:	200000e0 	.word	0x200000e0
 8001600:	51eb851f 	.word	0x51eb851f

08001604 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001604:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800163c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001608:	f7ff ff5e 	bl	80014c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800160c:	480c      	ldr	r0, [pc, #48]	@ (8001640 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800160e:	490d      	ldr	r1, [pc, #52]	@ (8001644 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001610:	4a0d      	ldr	r2, [pc, #52]	@ (8001648 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001614:	e002      	b.n	800161c <LoopCopyDataInit>

08001616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161a:	3304      	adds	r3, #4

0800161c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800161c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001620:	d3f9      	bcc.n	8001616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001622:	4a0a      	ldr	r2, [pc, #40]	@ (800164c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001624:	4c0a      	ldr	r4, [pc, #40]	@ (8001650 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001628:	e001      	b.n	800162e <LoopFillZerobss>

0800162a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800162c:	3204      	adds	r2, #4

0800162e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001630:	d3fb      	bcc.n	800162a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001632:	f002 fa11 	bl	8003a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001636:	f7ff fd0f 	bl	8001058 <main>
  bx  lr    
 800163a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800163c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001644:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001648:	08005940 	.word	0x08005940
  ldr r2, =_sbss
 800164c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001650:	2000029c 	.word	0x2000029c

08001654 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001654:	e7fe      	b.n	8001654 <ADC_IRQHandler>
	...

08001658 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800165c:	4b0e      	ldr	r3, [pc, #56]	@ (8001698 <HAL_Init+0x40>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a0d      	ldr	r2, [pc, #52]	@ (8001698 <HAL_Init+0x40>)
 8001662:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001666:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001668:	4b0b      	ldr	r3, [pc, #44]	@ (8001698 <HAL_Init+0x40>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a0a      	ldr	r2, [pc, #40]	@ (8001698 <HAL_Init+0x40>)
 800166e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001672:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001674:	4b08      	ldr	r3, [pc, #32]	@ (8001698 <HAL_Init+0x40>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a07      	ldr	r2, [pc, #28]	@ (8001698 <HAL_Init+0x40>)
 800167a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800167e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001680:	2003      	movs	r0, #3
 8001682:	f000 f92b 	bl	80018dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001686:	200f      	movs	r0, #15
 8001688:	f000 f808 	bl	800169c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800168c:	f7ff fdda 	bl	8001244 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40023c00 	.word	0x40023c00

0800169c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016a4:	4b12      	ldr	r3, [pc, #72]	@ (80016f0 <HAL_InitTick+0x54>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4b12      	ldr	r3, [pc, #72]	@ (80016f4 <HAL_InitTick+0x58>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	4619      	mov	r1, r3
 80016ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 f943 	bl	8001946 <HAL_SYSTICK_Config>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e00e      	b.n	80016e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b0f      	cmp	r3, #15
 80016ce:	d80a      	bhi.n	80016e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d0:	2200      	movs	r2, #0
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295
 80016d8:	f000 f90b 	bl	80018f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016dc:	4a06      	ldr	r2, [pc, #24]	@ (80016f8 <HAL_InitTick+0x5c>)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
 80016e4:	e000      	b.n	80016e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000004 	.word	0x20000004
 80016f4:	2000000c 	.word	0x2000000c
 80016f8:	20000008 	.word	0x20000008

080016fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001700:	4b06      	ldr	r3, [pc, #24]	@ (800171c <HAL_IncTick+0x20>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	461a      	mov	r2, r3
 8001706:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <HAL_IncTick+0x24>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4413      	add	r3, r2
 800170c:	4a04      	ldr	r2, [pc, #16]	@ (8001720 <HAL_IncTick+0x24>)
 800170e:	6013      	str	r3, [r2, #0]
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	2000000c 	.word	0x2000000c
 8001720:	2000014c 	.word	0x2000014c

08001724 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return uwTick;
 8001728:	4b03      	ldr	r3, [pc, #12]	@ (8001738 <HAL_GetTick+0x14>)
 800172a:	681b      	ldr	r3, [r3, #0]
}
 800172c:	4618      	mov	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	2000014c 	.word	0x2000014c

0800173c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800174c:	4b0c      	ldr	r3, [pc, #48]	@ (8001780 <__NVIC_SetPriorityGrouping+0x44>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001758:	4013      	ands	r3, r2
 800175a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001764:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001768:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800176c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800176e:	4a04      	ldr	r2, [pc, #16]	@ (8001780 <__NVIC_SetPriorityGrouping+0x44>)
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	60d3      	str	r3, [r2, #12]
}
 8001774:	bf00      	nop
 8001776:	3714      	adds	r7, #20
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001788:	4b04      	ldr	r3, [pc, #16]	@ (800179c <__NVIC_GetPriorityGrouping+0x18>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	0a1b      	lsrs	r3, r3, #8
 800178e:	f003 0307 	and.w	r3, r3, #7
}
 8001792:	4618      	mov	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	db0b      	blt.n	80017ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	f003 021f 	and.w	r2, r3, #31
 80017b8:	4907      	ldr	r1, [pc, #28]	@ (80017d8 <__NVIC_EnableIRQ+0x38>)
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	095b      	lsrs	r3, r3, #5
 80017c0:	2001      	movs	r0, #1
 80017c2:	fa00 f202 	lsl.w	r2, r0, r2
 80017c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e000e100 	.word	0xe000e100

080017dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	6039      	str	r1, [r7, #0]
 80017e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	db0a      	blt.n	8001806 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	490c      	ldr	r1, [pc, #48]	@ (8001828 <__NVIC_SetPriority+0x4c>)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	0112      	lsls	r2, r2, #4
 80017fc:	b2d2      	uxtb	r2, r2
 80017fe:	440b      	add	r3, r1
 8001800:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001804:	e00a      	b.n	800181c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4908      	ldr	r1, [pc, #32]	@ (800182c <__NVIC_SetPriority+0x50>)
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	3b04      	subs	r3, #4
 8001814:	0112      	lsls	r2, r2, #4
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	440b      	add	r3, r1
 800181a:	761a      	strb	r2, [r3, #24]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000e100 	.word	0xe000e100
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001830:	b480      	push	{r7}
 8001832:	b089      	sub	sp, #36	@ 0x24
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f1c3 0307 	rsb	r3, r3, #7
 800184a:	2b04      	cmp	r3, #4
 800184c:	bf28      	it	cs
 800184e:	2304      	movcs	r3, #4
 8001850:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	3304      	adds	r3, #4
 8001856:	2b06      	cmp	r3, #6
 8001858:	d902      	bls.n	8001860 <NVIC_EncodePriority+0x30>
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3b03      	subs	r3, #3
 800185e:	e000      	b.n	8001862 <NVIC_EncodePriority+0x32>
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001864:	f04f 32ff 	mov.w	r2, #4294967295
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43da      	mvns	r2, r3
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	401a      	ands	r2, r3
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001878:	f04f 31ff 	mov.w	r1, #4294967295
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	fa01 f303 	lsl.w	r3, r1, r3
 8001882:	43d9      	mvns	r1, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001888:	4313      	orrs	r3, r2
         );
}
 800188a:	4618      	mov	r0, r3
 800188c:	3724      	adds	r7, #36	@ 0x24
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018a8:	d301      	bcc.n	80018ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018aa:	2301      	movs	r3, #1
 80018ac:	e00f      	b.n	80018ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ae:	4a0a      	ldr	r2, [pc, #40]	@ (80018d8 <SysTick_Config+0x40>)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018b6:	210f      	movs	r1, #15
 80018b8:	f04f 30ff 	mov.w	r0, #4294967295
 80018bc:	f7ff ff8e 	bl	80017dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c0:	4b05      	ldr	r3, [pc, #20]	@ (80018d8 <SysTick_Config+0x40>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018c6:	4b04      	ldr	r3, [pc, #16]	@ (80018d8 <SysTick_Config+0x40>)
 80018c8:	2207      	movs	r2, #7
 80018ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	e000e010 	.word	0xe000e010

080018dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7ff ff29 	bl	800173c <__NVIC_SetPriorityGrouping>
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b086      	sub	sp, #24
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	4603      	mov	r3, r0
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
 80018fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001904:	f7ff ff3e 	bl	8001784 <__NVIC_GetPriorityGrouping>
 8001908:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	68b9      	ldr	r1, [r7, #8]
 800190e:	6978      	ldr	r0, [r7, #20]
 8001910:	f7ff ff8e 	bl	8001830 <NVIC_EncodePriority>
 8001914:	4602      	mov	r2, r0
 8001916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800191a:	4611      	mov	r1, r2
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff ff5d 	bl	80017dc <__NVIC_SetPriority>
}
 8001922:	bf00      	nop
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b082      	sub	sp, #8
 800192e:	af00      	add	r7, sp, #0
 8001930:	4603      	mov	r3, r0
 8001932:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff31 	bl	80017a0 <__NVIC_EnableIRQ>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff ffa2 	bl	8001898 <SysTick_Config>
 8001954:	4603      	mov	r3, r0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b084      	sub	sp, #16
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800196a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800196c:	f7ff feda 	bl	8001724 <HAL_GetTick>
 8001970:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d008      	beq.n	8001990 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2280      	movs	r2, #128	@ 0x80
 8001982:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e052      	b.n	8001a36 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 0216 	bic.w	r2, r2, #22
 800199e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	695a      	ldr	r2, [r3, #20]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019ae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d103      	bne.n	80019c0 <HAL_DMA_Abort+0x62>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d007      	beq.n	80019d0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f022 0208 	bic.w	r2, r2, #8
 80019ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 0201 	bic.w	r2, r2, #1
 80019de:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019e0:	e013      	b.n	8001a0a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019e2:	f7ff fe9f 	bl	8001724 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b05      	cmp	r3, #5
 80019ee:	d90c      	bls.n	8001a0a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2220      	movs	r2, #32
 80019f4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2203      	movs	r2, #3
 80019fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e015      	b.n	8001a36 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1e4      	bne.n	80019e2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a1c:	223f      	movs	r2, #63	@ 0x3f
 8001a1e:	409a      	lsls	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d004      	beq.n	8001a5c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2280      	movs	r2, #128	@ 0x80
 8001a56:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e00c      	b.n	8001a76 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2205      	movs	r2, #5
 8001a60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 0201 	bic.w	r2, r2, #1
 8001a72:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b089      	sub	sp, #36	@ 0x24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a92:	2300      	movs	r3, #0
 8001a94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
 8001a9e:	e159      	b.n	8001d54 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	f040 8148 	bne.w	8001d4e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d005      	beq.n	8001ad6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d130      	bne.n	8001b38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4013      	ands	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	68da      	ldr	r2, [r3, #12]
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	091b      	lsrs	r3, r3, #4
 8001b22:	f003 0201 	and.w	r2, r3, #1
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	2b03      	cmp	r3, #3
 8001b42:	d017      	beq.n	8001b74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	2203      	movs	r2, #3
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d123      	bne.n	8001bc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	08da      	lsrs	r2, r3, #3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3208      	adds	r2, #8
 8001b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	220f      	movs	r2, #15
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	691a      	ldr	r2, [r3, #16]
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	08da      	lsrs	r2, r3, #3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	3208      	adds	r2, #8
 8001bc2:	69b9      	ldr	r1, [r7, #24]
 8001bc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	2203      	movs	r2, #3
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0203 	and.w	r2, r3, #3
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f000 80a2 	beq.w	8001d4e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	4b57      	ldr	r3, [pc, #348]	@ (8001d6c <HAL_GPIO_Init+0x2e8>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c12:	4a56      	ldr	r2, [pc, #344]	@ (8001d6c <HAL_GPIO_Init+0x2e8>)
 8001c14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c1a:	4b54      	ldr	r3, [pc, #336]	@ (8001d6c <HAL_GPIO_Init+0x2e8>)
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c26:	4a52      	ldr	r2, [pc, #328]	@ (8001d70 <HAL_GPIO_Init+0x2ec>)
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	089b      	lsrs	r3, r3, #2
 8001c2c:	3302      	adds	r3, #2
 8001c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	220f      	movs	r2, #15
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43db      	mvns	r3, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4013      	ands	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a49      	ldr	r2, [pc, #292]	@ (8001d74 <HAL_GPIO_Init+0x2f0>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d019      	beq.n	8001c86 <HAL_GPIO_Init+0x202>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a48      	ldr	r2, [pc, #288]	@ (8001d78 <HAL_GPIO_Init+0x2f4>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d013      	beq.n	8001c82 <HAL_GPIO_Init+0x1fe>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a47      	ldr	r2, [pc, #284]	@ (8001d7c <HAL_GPIO_Init+0x2f8>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d00d      	beq.n	8001c7e <HAL_GPIO_Init+0x1fa>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a46      	ldr	r2, [pc, #280]	@ (8001d80 <HAL_GPIO_Init+0x2fc>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d007      	beq.n	8001c7a <HAL_GPIO_Init+0x1f6>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a45      	ldr	r2, [pc, #276]	@ (8001d84 <HAL_GPIO_Init+0x300>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d101      	bne.n	8001c76 <HAL_GPIO_Init+0x1f2>
 8001c72:	2304      	movs	r3, #4
 8001c74:	e008      	b.n	8001c88 <HAL_GPIO_Init+0x204>
 8001c76:	2307      	movs	r3, #7
 8001c78:	e006      	b.n	8001c88 <HAL_GPIO_Init+0x204>
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e004      	b.n	8001c88 <HAL_GPIO_Init+0x204>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	e002      	b.n	8001c88 <HAL_GPIO_Init+0x204>
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <HAL_GPIO_Init+0x204>
 8001c86:	2300      	movs	r3, #0
 8001c88:	69fa      	ldr	r2, [r7, #28]
 8001c8a:	f002 0203 	and.w	r2, r2, #3
 8001c8e:	0092      	lsls	r2, r2, #2
 8001c90:	4093      	lsls	r3, r2
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c98:	4935      	ldr	r1, [pc, #212]	@ (8001d70 <HAL_GPIO_Init+0x2ec>)
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	089b      	lsrs	r3, r3, #2
 8001c9e:	3302      	adds	r3, #2
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ca6:	4b38      	ldr	r3, [pc, #224]	@ (8001d88 <HAL_GPIO_Init+0x304>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cca:	4a2f      	ldr	r2, [pc, #188]	@ (8001d88 <HAL_GPIO_Init+0x304>)
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cd0:	4b2d      	ldr	r3, [pc, #180]	@ (8001d88 <HAL_GPIO_Init+0x304>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cf4:	4a24      	ldr	r2, [pc, #144]	@ (8001d88 <HAL_GPIO_Init+0x304>)
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cfa:	4b23      	ldr	r3, [pc, #140]	@ (8001d88 <HAL_GPIO_Init+0x304>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	43db      	mvns	r3, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4013      	ands	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d1e:	4a1a      	ldr	r2, [pc, #104]	@ (8001d88 <HAL_GPIO_Init+0x304>)
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d24:	4b18      	ldr	r3, [pc, #96]	@ (8001d88 <HAL_GPIO_Init+0x304>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d48:	4a0f      	ldr	r2, [pc, #60]	@ (8001d88 <HAL_GPIO_Init+0x304>)
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	3301      	adds	r3, #1
 8001d52:	61fb      	str	r3, [r7, #28]
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	2b0f      	cmp	r3, #15
 8001d58:	f67f aea2 	bls.w	8001aa0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d5c:	bf00      	nop
 8001d5e:	bf00      	nop
 8001d60:	3724      	adds	r7, #36	@ 0x24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40013800 	.word	0x40013800
 8001d74:	40020000 	.word	0x40020000
 8001d78:	40020400 	.word	0x40020400
 8001d7c:	40020800 	.word	0x40020800
 8001d80:	40020c00 	.word	0x40020c00
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40013c00 	.word	0x40013c00

08001d8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	807b      	strh	r3, [r7, #2]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d9c:	787b      	ldrb	r3, [r7, #1]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001da2:	887a      	ldrh	r2, [r7, #2]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001da8:	e003      	b.n	8001db2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001daa:	887b      	ldrh	r3, [r7, #2]
 8001dac:	041a      	lsls	r2, r3, #16
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	619a      	str	r2, [r3, #24]
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b085      	sub	sp, #20
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dd0:	887a      	ldrh	r2, [r7, #2]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	041a      	lsls	r2, r3, #16
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	43d9      	mvns	r1, r3
 8001ddc:	887b      	ldrh	r3, [r7, #2]
 8001dde:	400b      	ands	r3, r1
 8001de0:	431a      	orrs	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	619a      	str	r2, [r3, #24]
}
 8001de6:	bf00      	nop
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
	...

08001df4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001dfe:	4b08      	ldr	r3, [pc, #32]	@ (8001e20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e00:	695a      	ldr	r2, [r3, #20]
 8001e02:	88fb      	ldrh	r3, [r7, #6]
 8001e04:	4013      	ands	r3, r2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d006      	beq.n	8001e18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e0a:	4a05      	ldr	r2, [pc, #20]	@ (8001e20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e0c:	88fb      	ldrh	r3, [r7, #6]
 8001e0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e10:	88fb      	ldrh	r3, [r7, #6]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff f82a 	bl	8000e6c <HAL_GPIO_EXTI_Callback>
  }
}
 8001e18:	bf00      	nop
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40013c00 	.word	0x40013c00

08001e24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e267      	b.n	8002306 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d075      	beq.n	8001f2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e42:	4b88      	ldr	r3, [pc, #544]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 030c 	and.w	r3, r3, #12
 8001e4a:	2b04      	cmp	r3, #4
 8001e4c:	d00c      	beq.n	8001e68 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e4e:	4b85      	ldr	r3, [pc, #532]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e56:	2b08      	cmp	r3, #8
 8001e58:	d112      	bne.n	8001e80 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e5a:	4b82      	ldr	r3, [pc, #520]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e66:	d10b      	bne.n	8001e80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e68:	4b7e      	ldr	r3, [pc, #504]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d05b      	beq.n	8001f2c <HAL_RCC_OscConfig+0x108>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d157      	bne.n	8001f2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e242      	b.n	8002306 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e88:	d106      	bne.n	8001e98 <HAL_RCC_OscConfig+0x74>
 8001e8a:	4b76      	ldr	r3, [pc, #472]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a75      	ldr	r2, [pc, #468]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001e90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	e01d      	b.n	8001ed4 <HAL_RCC_OscConfig+0xb0>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ea0:	d10c      	bne.n	8001ebc <HAL_RCC_OscConfig+0x98>
 8001ea2:	4b70      	ldr	r3, [pc, #448]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a6f      	ldr	r2, [pc, #444]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001ea8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	4b6d      	ldr	r3, [pc, #436]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a6c      	ldr	r2, [pc, #432]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001eb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	e00b      	b.n	8001ed4 <HAL_RCC_OscConfig+0xb0>
 8001ebc:	4b69      	ldr	r3, [pc, #420]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a68      	ldr	r2, [pc, #416]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001ec2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ec6:	6013      	str	r3, [r2, #0]
 8001ec8:	4b66      	ldr	r3, [pc, #408]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a65      	ldr	r2, [pc, #404]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001ece:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ed2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d013      	beq.n	8001f04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001edc:	f7ff fc22 	bl	8001724 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee4:	f7ff fc1e 	bl	8001724 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b64      	cmp	r3, #100	@ 0x64
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e207      	b.n	8002306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef6:	4b5b      	ldr	r3, [pc, #364]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0xc0>
 8001f02:	e014      	b.n	8001f2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f04:	f7ff fc0e 	bl	8001724 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f0c:	f7ff fc0a 	bl	8001724 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b64      	cmp	r3, #100	@ 0x64
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e1f3      	b.n	8002306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f1e:	4b51      	ldr	r3, [pc, #324]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCC_OscConfig+0xe8>
 8001f2a:	e000      	b.n	8001f2e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d063      	beq.n	8002002 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f3a:	4b4a      	ldr	r3, [pc, #296]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 030c 	and.w	r3, r3, #12
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00b      	beq.n	8001f5e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f46:	4b47      	ldr	r3, [pc, #284]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f4e:	2b08      	cmp	r3, #8
 8001f50:	d11c      	bne.n	8001f8c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f52:	4b44      	ldr	r3, [pc, #272]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d116      	bne.n	8001f8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5e:	4b41      	ldr	r3, [pc, #260]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d005      	beq.n	8001f76 <HAL_RCC_OscConfig+0x152>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d001      	beq.n	8001f76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e1c7      	b.n	8002306 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f76:	4b3b      	ldr	r3, [pc, #236]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4937      	ldr	r1, [pc, #220]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f8a:	e03a      	b.n	8002002 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d020      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f94:	4b34      	ldr	r3, [pc, #208]	@ (8002068 <HAL_RCC_OscConfig+0x244>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9a:	f7ff fbc3 	bl	8001724 <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fa2:	f7ff fbbf 	bl	8001724 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e1a8      	b.n	8002306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb4:	4b2b      	ldr	r3, [pc, #172]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0f0      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc0:	4b28      	ldr	r3, [pc, #160]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	4925      	ldr	r1, [pc, #148]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	600b      	str	r3, [r1, #0]
 8001fd4:	e015      	b.n	8002002 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fd6:	4b24      	ldr	r3, [pc, #144]	@ (8002068 <HAL_RCC_OscConfig+0x244>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fdc:	f7ff fba2 	bl	8001724 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe4:	f7ff fb9e 	bl	8001724 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e187      	b.n	8002306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff6:	4b1b      	ldr	r3, [pc, #108]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d036      	beq.n	800207c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d016      	beq.n	8002044 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002016:	4b15      	ldr	r3, [pc, #84]	@ (800206c <HAL_RCC_OscConfig+0x248>)
 8002018:	2201      	movs	r2, #1
 800201a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201c:	f7ff fb82 	bl	8001724 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002024:	f7ff fb7e 	bl	8001724 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e167      	b.n	8002306 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002036:	4b0b      	ldr	r3, [pc, #44]	@ (8002064 <HAL_RCC_OscConfig+0x240>)
 8002038:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0f0      	beq.n	8002024 <HAL_RCC_OscConfig+0x200>
 8002042:	e01b      	b.n	800207c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002044:	4b09      	ldr	r3, [pc, #36]	@ (800206c <HAL_RCC_OscConfig+0x248>)
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800204a:	f7ff fb6b 	bl	8001724 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002050:	e00e      	b.n	8002070 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002052:	f7ff fb67 	bl	8001724 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d907      	bls.n	8002070 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e150      	b.n	8002306 <HAL_RCC_OscConfig+0x4e2>
 8002064:	40023800 	.word	0x40023800
 8002068:	42470000 	.word	0x42470000
 800206c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002070:	4b88      	ldr	r3, [pc, #544]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 8002072:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1ea      	bne.n	8002052 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 8097 	beq.w	80021b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800208a:	2300      	movs	r3, #0
 800208c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800208e:	4b81      	ldr	r3, [pc, #516]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10f      	bne.n	80020ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	4b7d      	ldr	r3, [pc, #500]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a2:	4a7c      	ldr	r2, [pc, #496]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 80020a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020aa:	4b7a      	ldr	r3, [pc, #488]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b6:	2301      	movs	r3, #1
 80020b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ba:	4b77      	ldr	r3, [pc, #476]	@ (8002298 <HAL_RCC_OscConfig+0x474>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d118      	bne.n	80020f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020c6:	4b74      	ldr	r3, [pc, #464]	@ (8002298 <HAL_RCC_OscConfig+0x474>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a73      	ldr	r2, [pc, #460]	@ (8002298 <HAL_RCC_OscConfig+0x474>)
 80020cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020d2:	f7ff fb27 	bl	8001724 <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020da:	f7ff fb23 	bl	8001724 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e10c      	b.n	8002306 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ec:	4b6a      	ldr	r3, [pc, #424]	@ (8002298 <HAL_RCC_OscConfig+0x474>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0f0      	beq.n	80020da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d106      	bne.n	800210e <HAL_RCC_OscConfig+0x2ea>
 8002100:	4b64      	ldr	r3, [pc, #400]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 8002102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002104:	4a63      	ldr	r2, [pc, #396]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	6713      	str	r3, [r2, #112]	@ 0x70
 800210c:	e01c      	b.n	8002148 <HAL_RCC_OscConfig+0x324>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2b05      	cmp	r3, #5
 8002114:	d10c      	bne.n	8002130 <HAL_RCC_OscConfig+0x30c>
 8002116:	4b5f      	ldr	r3, [pc, #380]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 8002118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800211a:	4a5e      	ldr	r2, [pc, #376]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 800211c:	f043 0304 	orr.w	r3, r3, #4
 8002120:	6713      	str	r3, [r2, #112]	@ 0x70
 8002122:	4b5c      	ldr	r3, [pc, #368]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 8002124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002126:	4a5b      	ldr	r2, [pc, #364]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	6713      	str	r3, [r2, #112]	@ 0x70
 800212e:	e00b      	b.n	8002148 <HAL_RCC_OscConfig+0x324>
 8002130:	4b58      	ldr	r3, [pc, #352]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 8002132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002134:	4a57      	ldr	r2, [pc, #348]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 8002136:	f023 0301 	bic.w	r3, r3, #1
 800213a:	6713      	str	r3, [r2, #112]	@ 0x70
 800213c:	4b55      	ldr	r3, [pc, #340]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 800213e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002140:	4a54      	ldr	r2, [pc, #336]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 8002142:	f023 0304 	bic.w	r3, r3, #4
 8002146:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d015      	beq.n	800217c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002150:	f7ff fae8 	bl	8001724 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002156:	e00a      	b.n	800216e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002158:	f7ff fae4 	bl	8001724 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002166:	4293      	cmp	r3, r2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e0cb      	b.n	8002306 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800216e:	4b49      	ldr	r3, [pc, #292]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 8002170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0ee      	beq.n	8002158 <HAL_RCC_OscConfig+0x334>
 800217a:	e014      	b.n	80021a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217c:	f7ff fad2 	bl	8001724 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002182:	e00a      	b.n	800219a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002184:	f7ff face 	bl	8001724 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002192:	4293      	cmp	r3, r2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e0b5      	b.n	8002306 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800219a:	4b3e      	ldr	r3, [pc, #248]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 800219c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1ee      	bne.n	8002184 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021a6:	7dfb      	ldrb	r3, [r7, #23]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d105      	bne.n	80021b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ac:	4b39      	ldr	r3, [pc, #228]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 80021ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b0:	4a38      	ldr	r2, [pc, #224]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 80021b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 80a1 	beq.w	8002304 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021c2:	4b34      	ldr	r3, [pc, #208]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 030c 	and.w	r3, r3, #12
 80021ca:	2b08      	cmp	r3, #8
 80021cc:	d05c      	beq.n	8002288 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d141      	bne.n	800225a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d6:	4b31      	ldr	r3, [pc, #196]	@ (800229c <HAL_RCC_OscConfig+0x478>)
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021dc:	f7ff faa2 	bl	8001724 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e4:	f7ff fa9e 	bl	8001724 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e087      	b.n	8002306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021f6:	4b27      	ldr	r3, [pc, #156]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69da      	ldr	r2, [r3, #28]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002210:	019b      	lsls	r3, r3, #6
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002218:	085b      	lsrs	r3, r3, #1
 800221a:	3b01      	subs	r3, #1
 800221c:	041b      	lsls	r3, r3, #16
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002224:	061b      	lsls	r3, r3, #24
 8002226:	491b      	ldr	r1, [pc, #108]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 8002228:	4313      	orrs	r3, r2
 800222a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800222c:	4b1b      	ldr	r3, [pc, #108]	@ (800229c <HAL_RCC_OscConfig+0x478>)
 800222e:	2201      	movs	r2, #1
 8002230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002232:	f7ff fa77 	bl	8001724 <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223a:	f7ff fa73 	bl	8001724 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e05c      	b.n	8002306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800224c:	4b11      	ldr	r3, [pc, #68]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0f0      	beq.n	800223a <HAL_RCC_OscConfig+0x416>
 8002258:	e054      	b.n	8002304 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225a:	4b10      	ldr	r3, [pc, #64]	@ (800229c <HAL_RCC_OscConfig+0x478>)
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002260:	f7ff fa60 	bl	8001724 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002268:	f7ff fa5c 	bl	8001724 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e045      	b.n	8002306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800227a:	4b06      	ldr	r3, [pc, #24]	@ (8002294 <HAL_RCC_OscConfig+0x470>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1f0      	bne.n	8002268 <HAL_RCC_OscConfig+0x444>
 8002286:	e03d      	b.n	8002304 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d107      	bne.n	80022a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e038      	b.n	8002306 <HAL_RCC_OscConfig+0x4e2>
 8002294:	40023800 	.word	0x40023800
 8002298:	40007000 	.word	0x40007000
 800229c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002310 <HAL_RCC_OscConfig+0x4ec>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d028      	beq.n	8002300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d121      	bne.n	8002300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d11a      	bne.n	8002300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80022d0:	4013      	ands	r3, r2
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80022d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022d8:	4293      	cmp	r3, r2
 80022da:	d111      	bne.n	8002300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e6:	085b      	lsrs	r3, r3, #1
 80022e8:	3b01      	subs	r3, #1
 80022ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d107      	bne.n	8002300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d001      	beq.n	8002304 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e000      	b.n	8002306 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3718      	adds	r7, #24
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40023800 	.word	0x40023800

08002314 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e0cc      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002328:	4b68      	ldr	r3, [pc, #416]	@ (80024cc <HAL_RCC_ClockConfig+0x1b8>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	429a      	cmp	r2, r3
 8002334:	d90c      	bls.n	8002350 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002336:	4b65      	ldr	r3, [pc, #404]	@ (80024cc <HAL_RCC_ClockConfig+0x1b8>)
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800233e:	4b63      	ldr	r3, [pc, #396]	@ (80024cc <HAL_RCC_ClockConfig+0x1b8>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	429a      	cmp	r2, r3
 800234a:	d001      	beq.n	8002350 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e0b8      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d020      	beq.n	800239e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b00      	cmp	r3, #0
 8002366:	d005      	beq.n	8002374 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002368:	4b59      	ldr	r3, [pc, #356]	@ (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	4a58      	ldr	r2, [pc, #352]	@ (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002372:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0308 	and.w	r3, r3, #8
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002380:	4b53      	ldr	r3, [pc, #332]	@ (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	4a52      	ldr	r2, [pc, #328]	@ (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800238a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800238c:	4b50      	ldr	r3, [pc, #320]	@ (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	494d      	ldr	r1, [pc, #308]	@ (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 800239a:	4313      	orrs	r3, r2
 800239c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d044      	beq.n	8002434 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d107      	bne.n	80023c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b2:	4b47      	ldr	r3, [pc, #284]	@ (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d119      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e07f      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d003      	beq.n	80023d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ce:	2b03      	cmp	r3, #3
 80023d0:	d107      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d2:	4b3f      	ldr	r3, [pc, #252]	@ (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d109      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e06f      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e2:	4b3b      	ldr	r3, [pc, #236]	@ (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e067      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023f2:	4b37      	ldr	r3, [pc, #220]	@ (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f023 0203 	bic.w	r2, r3, #3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	4934      	ldr	r1, [pc, #208]	@ (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002400:	4313      	orrs	r3, r2
 8002402:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002404:	f7ff f98e 	bl	8001724 <HAL_GetTick>
 8002408:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240a:	e00a      	b.n	8002422 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800240c:	f7ff f98a 	bl	8001724 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800241a:	4293      	cmp	r3, r2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e04f      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002422:	4b2b      	ldr	r3, [pc, #172]	@ (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 020c 	and.w	r2, r3, #12
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	429a      	cmp	r2, r3
 8002432:	d1eb      	bne.n	800240c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002434:	4b25      	ldr	r3, [pc, #148]	@ (80024cc <HAL_RCC_ClockConfig+0x1b8>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	429a      	cmp	r2, r3
 8002440:	d20c      	bcs.n	800245c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002442:	4b22      	ldr	r3, [pc, #136]	@ (80024cc <HAL_RCC_ClockConfig+0x1b8>)
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800244a:	4b20      	ldr	r3, [pc, #128]	@ (80024cc <HAL_RCC_ClockConfig+0x1b8>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	429a      	cmp	r2, r3
 8002456:	d001      	beq.n	800245c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e032      	b.n	80024c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	d008      	beq.n	800247a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002468:	4b19      	ldr	r3, [pc, #100]	@ (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	4916      	ldr	r1, [pc, #88]	@ (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	4313      	orrs	r3, r2
 8002478:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b00      	cmp	r3, #0
 8002484:	d009      	beq.n	800249a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002486:	4b12      	ldr	r3, [pc, #72]	@ (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	490e      	ldr	r1, [pc, #56]	@ (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002496:	4313      	orrs	r3, r2
 8002498:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800249a:	f000 f821 	bl	80024e0 <HAL_RCC_GetSysClockFreq>
 800249e:	4602      	mov	r2, r0
 80024a0:	4b0b      	ldr	r3, [pc, #44]	@ (80024d0 <HAL_RCC_ClockConfig+0x1bc>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	091b      	lsrs	r3, r3, #4
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	490a      	ldr	r1, [pc, #40]	@ (80024d4 <HAL_RCC_ClockConfig+0x1c0>)
 80024ac:	5ccb      	ldrb	r3, [r1, r3]
 80024ae:	fa22 f303 	lsr.w	r3, r2, r3
 80024b2:	4a09      	ldr	r2, [pc, #36]	@ (80024d8 <HAL_RCC_ClockConfig+0x1c4>)
 80024b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80024b6:	4b09      	ldr	r3, [pc, #36]	@ (80024dc <HAL_RCC_ClockConfig+0x1c8>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff f8ee 	bl	800169c <HAL_InitTick>

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40023c00 	.word	0x40023c00
 80024d0:	40023800 	.word	0x40023800
 80024d4:	08005708 	.word	0x08005708
 80024d8:	20000004 	.word	0x20000004
 80024dc:	20000008 	.word	0x20000008

080024e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024e4:	b090      	sub	sp, #64	@ 0x40
 80024e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024f8:	4b59      	ldr	r3, [pc, #356]	@ (8002660 <HAL_RCC_GetSysClockFreq+0x180>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 030c 	and.w	r3, r3, #12
 8002500:	2b08      	cmp	r3, #8
 8002502:	d00d      	beq.n	8002520 <HAL_RCC_GetSysClockFreq+0x40>
 8002504:	2b08      	cmp	r3, #8
 8002506:	f200 80a1 	bhi.w	800264c <HAL_RCC_GetSysClockFreq+0x16c>
 800250a:	2b00      	cmp	r3, #0
 800250c:	d002      	beq.n	8002514 <HAL_RCC_GetSysClockFreq+0x34>
 800250e:	2b04      	cmp	r3, #4
 8002510:	d003      	beq.n	800251a <HAL_RCC_GetSysClockFreq+0x3a>
 8002512:	e09b      	b.n	800264c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002514:	4b53      	ldr	r3, [pc, #332]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x184>)
 8002516:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002518:	e09b      	b.n	8002652 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800251a:	4b53      	ldr	r3, [pc, #332]	@ (8002668 <HAL_RCC_GetSysClockFreq+0x188>)
 800251c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800251e:	e098      	b.n	8002652 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002520:	4b4f      	ldr	r3, [pc, #316]	@ (8002660 <HAL_RCC_GetSysClockFreq+0x180>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002528:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800252a:	4b4d      	ldr	r3, [pc, #308]	@ (8002660 <HAL_RCC_GetSysClockFreq+0x180>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d028      	beq.n	8002588 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002536:	4b4a      	ldr	r3, [pc, #296]	@ (8002660 <HAL_RCC_GetSysClockFreq+0x180>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	099b      	lsrs	r3, r3, #6
 800253c:	2200      	movs	r2, #0
 800253e:	623b      	str	r3, [r7, #32]
 8002540:	627a      	str	r2, [r7, #36]	@ 0x24
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002548:	2100      	movs	r1, #0
 800254a:	4b47      	ldr	r3, [pc, #284]	@ (8002668 <HAL_RCC_GetSysClockFreq+0x188>)
 800254c:	fb03 f201 	mul.w	r2, r3, r1
 8002550:	2300      	movs	r3, #0
 8002552:	fb00 f303 	mul.w	r3, r0, r3
 8002556:	4413      	add	r3, r2
 8002558:	4a43      	ldr	r2, [pc, #268]	@ (8002668 <HAL_RCC_GetSysClockFreq+0x188>)
 800255a:	fba0 1202 	umull	r1, r2, r0, r2
 800255e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002560:	460a      	mov	r2, r1
 8002562:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002564:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002566:	4413      	add	r3, r2
 8002568:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800256a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800256c:	2200      	movs	r2, #0
 800256e:	61bb      	str	r3, [r7, #24]
 8002570:	61fa      	str	r2, [r7, #28]
 8002572:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002576:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800257a:	f7fe faff 	bl	8000b7c <__aeabi_uldivmod>
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	4613      	mov	r3, r2
 8002584:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002586:	e053      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002588:	4b35      	ldr	r3, [pc, #212]	@ (8002660 <HAL_RCC_GetSysClockFreq+0x180>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	099b      	lsrs	r3, r3, #6
 800258e:	2200      	movs	r2, #0
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	617a      	str	r2, [r7, #20]
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800259a:	f04f 0b00 	mov.w	fp, #0
 800259e:	4652      	mov	r2, sl
 80025a0:	465b      	mov	r3, fp
 80025a2:	f04f 0000 	mov.w	r0, #0
 80025a6:	f04f 0100 	mov.w	r1, #0
 80025aa:	0159      	lsls	r1, r3, #5
 80025ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025b0:	0150      	lsls	r0, r2, #5
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	ebb2 080a 	subs.w	r8, r2, sl
 80025ba:	eb63 090b 	sbc.w	r9, r3, fp
 80025be:	f04f 0200 	mov.w	r2, #0
 80025c2:	f04f 0300 	mov.w	r3, #0
 80025c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80025ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80025ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80025d2:	ebb2 0408 	subs.w	r4, r2, r8
 80025d6:	eb63 0509 	sbc.w	r5, r3, r9
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	f04f 0300 	mov.w	r3, #0
 80025e2:	00eb      	lsls	r3, r5, #3
 80025e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025e8:	00e2      	lsls	r2, r4, #3
 80025ea:	4614      	mov	r4, r2
 80025ec:	461d      	mov	r5, r3
 80025ee:	eb14 030a 	adds.w	r3, r4, sl
 80025f2:	603b      	str	r3, [r7, #0]
 80025f4:	eb45 030b 	adc.w	r3, r5, fp
 80025f8:	607b      	str	r3, [r7, #4]
 80025fa:	f04f 0200 	mov.w	r2, #0
 80025fe:	f04f 0300 	mov.w	r3, #0
 8002602:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002606:	4629      	mov	r1, r5
 8002608:	028b      	lsls	r3, r1, #10
 800260a:	4621      	mov	r1, r4
 800260c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002610:	4621      	mov	r1, r4
 8002612:	028a      	lsls	r2, r1, #10
 8002614:	4610      	mov	r0, r2
 8002616:	4619      	mov	r1, r3
 8002618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800261a:	2200      	movs	r2, #0
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	60fa      	str	r2, [r7, #12]
 8002620:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002624:	f7fe faaa 	bl	8000b7c <__aeabi_uldivmod>
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	4613      	mov	r3, r2
 800262e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002630:	4b0b      	ldr	r3, [pc, #44]	@ (8002660 <HAL_RCC_GetSysClockFreq+0x180>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	0c1b      	lsrs	r3, r3, #16
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	3301      	adds	r3, #1
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002640:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002644:	fbb2 f3f3 	udiv	r3, r2, r3
 8002648:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800264a:	e002      	b.n	8002652 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800264c:	4b05      	ldr	r3, [pc, #20]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x184>)
 800264e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002650:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002654:	4618      	mov	r0, r3
 8002656:	3740      	adds	r7, #64	@ 0x40
 8002658:	46bd      	mov	sp, r7
 800265a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800265e:	bf00      	nop
 8002660:	40023800 	.word	0x40023800
 8002664:	00f42400 	.word	0x00f42400
 8002668:	017d7840 	.word	0x017d7840

0800266c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002670:	4b03      	ldr	r3, [pc, #12]	@ (8002680 <HAL_RCC_GetHCLKFreq+0x14>)
 8002672:	681b      	ldr	r3, [r3, #0]
}
 8002674:	4618      	mov	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	20000004 	.word	0x20000004

08002684 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002688:	f7ff fff0 	bl	800266c <HAL_RCC_GetHCLKFreq>
 800268c:	4602      	mov	r2, r0
 800268e:	4b05      	ldr	r3, [pc, #20]	@ (80026a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	0a9b      	lsrs	r3, r3, #10
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	4903      	ldr	r1, [pc, #12]	@ (80026a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800269a:	5ccb      	ldrb	r3, [r1, r3]
 800269c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40023800 	.word	0x40023800
 80026a8:	08005718 	.word	0x08005718

080026ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026b0:	f7ff ffdc 	bl	800266c <HAL_RCC_GetHCLKFreq>
 80026b4:	4602      	mov	r2, r0
 80026b6:	4b05      	ldr	r3, [pc, #20]	@ (80026cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	0b5b      	lsrs	r3, r3, #13
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	4903      	ldr	r1, [pc, #12]	@ (80026d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026c2:	5ccb      	ldrb	r3, [r1, r3]
 80026c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40023800 	.word	0x40023800
 80026d0:	08005718 	.word	0x08005718

080026d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e042      	b.n	800276c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d106      	bne.n	8002700 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7fe fdca 	bl	8001294 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2224      	movs	r2, #36	@ 0x24
 8002704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68da      	ldr	r2, [r3, #12]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002716:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 fdbd 	bl	8003298 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	691a      	ldr	r2, [r3, #16]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800272c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695a      	ldr	r2, [r3, #20]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800273c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68da      	ldr	r2, [r3, #12]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800274c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2220      	movs	r2, #32
 8002758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2220      	movs	r2, #32
 8002760:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08a      	sub	sp, #40	@ 0x28
 8002778:	af02      	add	r7, sp, #8
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	603b      	str	r3, [r7, #0]
 8002780:	4613      	mov	r3, r2
 8002782:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b20      	cmp	r3, #32
 8002792:	d175      	bne.n	8002880 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d002      	beq.n	80027a0 <HAL_UART_Transmit+0x2c>
 800279a:	88fb      	ldrh	r3, [r7, #6]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e06e      	b.n	8002882 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2221      	movs	r2, #33	@ 0x21
 80027ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027b2:	f7fe ffb7 	bl	8001724 <HAL_GetTick>
 80027b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	88fa      	ldrh	r2, [r7, #6]
 80027bc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	88fa      	ldrh	r2, [r7, #6]
 80027c2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027cc:	d108      	bne.n	80027e0 <HAL_UART_Transmit+0x6c>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d104      	bne.n	80027e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	61bb      	str	r3, [r7, #24]
 80027de:	e003      	b.n	80027e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027e8:	e02e      	b.n	8002848 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	2200      	movs	r2, #0
 80027f2:	2180      	movs	r1, #128	@ 0x80
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 fb1f 	bl	8002e38 <UART_WaitOnFlagUntilTimeout>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d005      	beq.n	800280c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2220      	movs	r2, #32
 8002804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e03a      	b.n	8002882 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10b      	bne.n	800282a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	461a      	mov	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002820:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	3302      	adds	r3, #2
 8002826:	61bb      	str	r3, [r7, #24]
 8002828:	e007      	b.n	800283a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	781a      	ldrb	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	3301      	adds	r3, #1
 8002838:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800283e:	b29b      	uxth	r3, r3
 8002840:	3b01      	subs	r3, #1
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800284c:	b29b      	uxth	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1cb      	bne.n	80027ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2200      	movs	r2, #0
 800285a:	2140      	movs	r1, #64	@ 0x40
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 faeb 	bl	8002e38 <UART_WaitOnFlagUntilTimeout>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2220      	movs	r2, #32
 800286c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e006      	b.n	8002882 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2220      	movs	r2, #32
 8002878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800287c:	2300      	movs	r3, #0
 800287e:	e000      	b.n	8002882 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002880:	2302      	movs	r3, #2
  }
}
 8002882:	4618      	mov	r0, r3
 8002884:	3720      	adds	r7, #32
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b084      	sub	sp, #16
 800288e:	af00      	add	r7, sp, #0
 8002890:	60f8      	str	r0, [r7, #12]
 8002892:	60b9      	str	r1, [r7, #8]
 8002894:	4613      	mov	r3, r2
 8002896:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b20      	cmp	r3, #32
 80028a2:	d112      	bne.n	80028ca <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d002      	beq.n	80028b0 <HAL_UART_Receive_IT+0x26>
 80028aa:	88fb      	ldrh	r3, [r7, #6]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e00b      	b.n	80028cc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80028ba:	88fb      	ldrh	r3, [r7, #6]
 80028bc:	461a      	mov	r2, r3
 80028be:	68b9      	ldr	r1, [r7, #8]
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f000 fb12 	bl	8002eea <UART_Start_Receive_IT>
 80028c6:	4603      	mov	r3, r0
 80028c8:	e000      	b.n	80028cc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80028ca:	2302      	movs	r3, #2
  }
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b0ba      	sub	sp, #232	@ 0xe8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002900:	2300      	movs	r3, #0
 8002902:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002912:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10f      	bne.n	800293a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800291a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d009      	beq.n	800293a <HAL_UART_IRQHandler+0x66>
 8002926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800292a:	f003 0320 	and.w	r3, r3, #32
 800292e:	2b00      	cmp	r3, #0
 8002930:	d003      	beq.n	800293a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 fbf2 	bl	800311c <UART_Receive_IT>
      return;
 8002938:	e25b      	b.n	8002df2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800293a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 80de 	beq.w	8002b00 <HAL_UART_IRQHandler+0x22c>
 8002944:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b00      	cmp	r3, #0
 800294e:	d106      	bne.n	800295e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002954:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 80d1 	beq.w	8002b00 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800295e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00b      	beq.n	8002982 <HAL_UART_IRQHandler+0xae>
 800296a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800296e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002972:	2b00      	cmp	r3, #0
 8002974:	d005      	beq.n	8002982 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800297a:	f043 0201 	orr.w	r2, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002986:	f003 0304 	and.w	r3, r3, #4
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00b      	beq.n	80029a6 <HAL_UART_IRQHandler+0xd2>
 800298e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d005      	beq.n	80029a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299e:	f043 0202 	orr.w	r2, r3, #2
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00b      	beq.n	80029ca <HAL_UART_IRQHandler+0xf6>
 80029b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d005      	beq.n	80029ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c2:	f043 0204 	orr.w	r2, r3, #4
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80029ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d011      	beq.n	80029fa <HAL_UART_IRQHandler+0x126>
 80029d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029da:	f003 0320 	and.w	r3, r3, #32
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d105      	bne.n	80029ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80029e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d005      	beq.n	80029fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f2:	f043 0208 	orr.w	r2, r3, #8
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 81f2 	beq.w	8002de8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a08:	f003 0320 	and.w	r3, r3, #32
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d008      	beq.n	8002a22 <HAL_UART_IRQHandler+0x14e>
 8002a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a14:	f003 0320 	and.w	r3, r3, #32
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d002      	beq.n	8002a22 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 fb7d 	bl	800311c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a2c:	2b40      	cmp	r3, #64	@ 0x40
 8002a2e:	bf0c      	ite	eq
 8002a30:	2301      	moveq	r3, #1
 8002a32:	2300      	movne	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d103      	bne.n	8002a4e <HAL_UART_IRQHandler+0x17a>
 8002a46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d04f      	beq.n	8002aee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 fa85 	bl	8002f5e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a5e:	2b40      	cmp	r3, #64	@ 0x40
 8002a60:	d141      	bne.n	8002ae6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	3314      	adds	r3, #20
 8002a68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a70:	e853 3f00 	ldrex	r3, [r3]
 8002a74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002a78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	3314      	adds	r3, #20
 8002a8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002a8e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002a92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002a9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002a9e:	e841 2300 	strex	r3, r2, [r1]
 8002aa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002aa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1d9      	bne.n	8002a62 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d013      	beq.n	8002ade <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aba:	4a7e      	ldr	r2, [pc, #504]	@ (8002cb4 <HAL_UART_IRQHandler+0x3e0>)
 8002abc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fe ffbb 	bl	8001a3e <HAL_DMA_Abort_IT>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d016      	beq.n	8002afc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002ad8:	4610      	mov	r0, r2
 8002ada:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002adc:	e00e      	b.n	8002afc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f994 	bl	8002e0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ae4:	e00a      	b.n	8002afc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f990 	bl	8002e0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aec:	e006      	b.n	8002afc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f98c 	bl	8002e0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002afa:	e175      	b.n	8002de8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002afc:	bf00      	nop
    return;
 8002afe:	e173      	b.n	8002de8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	f040 814f 	bne.w	8002da8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b0e:	f003 0310 	and.w	r3, r3, #16
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f000 8148 	beq.w	8002da8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b1c:	f003 0310 	and.w	r3, r3, #16
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 8141 	beq.w	8002da8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b26:	2300      	movs	r3, #0
 8002b28:	60bb      	str	r3, [r7, #8]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	60bb      	str	r3, [r7, #8]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	60bb      	str	r3, [r7, #8]
 8002b3a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b46:	2b40      	cmp	r3, #64	@ 0x40
 8002b48:	f040 80b6 	bne.w	8002cb8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b58:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 8145 	beq.w	8002dec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002b66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	f080 813e 	bcs.w	8002dec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002b76:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b82:	f000 8088 	beq.w	8002c96 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	330c      	adds	r3, #12
 8002b8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b90:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b94:	e853 3f00 	ldrex	r3, [r3]
 8002b98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002b9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ba0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ba4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	330c      	adds	r3, #12
 8002bae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002bb2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002bb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002bbe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002bc2:	e841 2300 	strex	r3, r2, [r1]
 8002bc6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002bca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1d9      	bne.n	8002b86 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	3314      	adds	r3, #20
 8002bd8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bdc:	e853 3f00 	ldrex	r3, [r3]
 8002be0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002be2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002be4:	f023 0301 	bic.w	r3, r3, #1
 8002be8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	3314      	adds	r3, #20
 8002bf2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002bf6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002bfa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bfc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002bfe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002c02:	e841 2300 	strex	r3, r2, [r1]
 8002c06:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002c08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1e1      	bne.n	8002bd2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	3314      	adds	r3, #20
 8002c14:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c18:	e853 3f00 	ldrex	r3, [r3]
 8002c1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002c1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	3314      	adds	r3, #20
 8002c2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002c32:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002c34:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c36:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002c38:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002c3a:	e841 2300 	strex	r3, r2, [r1]
 8002c3e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002c40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1e3      	bne.n	8002c0e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2220      	movs	r2, #32
 8002c4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	330c      	adds	r3, #12
 8002c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c5e:	e853 3f00 	ldrex	r3, [r3]
 8002c62:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002c64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c66:	f023 0310 	bic.w	r3, r3, #16
 8002c6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	330c      	adds	r3, #12
 8002c74:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002c78:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002c7a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c7c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c7e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c80:	e841 2300 	strex	r3, r2, [r1]
 8002c84:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002c86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1e3      	bne.n	8002c54 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7fe fe64 	bl	800195e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2202      	movs	r2, #2
 8002c9a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	4619      	mov	r1, r3
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f8b7 	bl	8002e20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002cb2:	e09b      	b.n	8002dec <HAL_UART_IRQHandler+0x518>
 8002cb4:	08003025 	.word	0x08003025
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f000 808e 	beq.w	8002df0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002cd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 8089 	beq.w	8002df0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	330c      	adds	r3, #12
 8002ce4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ce8:	e853 3f00 	ldrex	r3, [r3]
 8002cec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002cee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cf0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002cf4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	330c      	adds	r3, #12
 8002cfe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002d02:	647a      	str	r2, [r7, #68]	@ 0x44
 8002d04:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d06:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002d08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d0a:	e841 2300 	strex	r3, r2, [r1]
 8002d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002d10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1e3      	bne.n	8002cde <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	3314      	adds	r3, #20
 8002d1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d20:	e853 3f00 	ldrex	r3, [r3]
 8002d24:	623b      	str	r3, [r7, #32]
   return(result);
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	f023 0301 	bic.w	r3, r3, #1
 8002d2c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	3314      	adds	r3, #20
 8002d36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002d3a:	633a      	str	r2, [r7, #48]	@ 0x30
 8002d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d42:	e841 2300 	strex	r3, r2, [r1]
 8002d46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1e3      	bne.n	8002d16 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2220      	movs	r2, #32
 8002d52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	330c      	adds	r3, #12
 8002d62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	e853 3f00 	ldrex	r3, [r3]
 8002d6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f023 0310 	bic.w	r3, r3, #16
 8002d72:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	330c      	adds	r3, #12
 8002d7c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002d80:	61fa      	str	r2, [r7, #28]
 8002d82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d84:	69b9      	ldr	r1, [r7, #24]
 8002d86:	69fa      	ldr	r2, [r7, #28]
 8002d88:	e841 2300 	strex	r3, r2, [r1]
 8002d8c:	617b      	str	r3, [r7, #20]
   return(result);
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1e3      	bne.n	8002d5c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2202      	movs	r2, #2
 8002d98:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002d9e:	4619      	mov	r1, r3
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 f83d 	bl	8002e20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002da6:	e023      	b.n	8002df0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d009      	beq.n	8002dc8 <HAL_UART_IRQHandler+0x4f4>
 8002db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002db8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 f943 	bl	800304c <UART_Transmit_IT>
    return;
 8002dc6:	e014      	b.n	8002df2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00e      	beq.n	8002df2 <HAL_UART_IRQHandler+0x51e>
 8002dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d008      	beq.n	8002df2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 f983 	bl	80030ec <UART_EndTransmit_IT>
    return;
 8002de6:	e004      	b.n	8002df2 <HAL_UART_IRQHandler+0x51e>
    return;
 8002de8:	bf00      	nop
 8002dea:	e002      	b.n	8002df2 <HAL_UART_IRQHandler+0x51e>
      return;
 8002dec:	bf00      	nop
 8002dee:	e000      	b.n	8002df2 <HAL_UART_IRQHandler+0x51e>
      return;
 8002df0:	bf00      	nop
  }
}
 8002df2:	37e8      	adds	r7, #232	@ 0xe8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	603b      	str	r3, [r7, #0]
 8002e44:	4613      	mov	r3, r2
 8002e46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e48:	e03b      	b.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e4a:	6a3b      	ldr	r3, [r7, #32]
 8002e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e50:	d037      	beq.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e52:	f7fe fc67 	bl	8001724 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	6a3a      	ldr	r2, [r7, #32]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d302      	bcc.n	8002e68 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e03a      	b.n	8002ee2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	f003 0304 	and.w	r3, r3, #4
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d023      	beq.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2b80      	cmp	r3, #128	@ 0x80
 8002e7e:	d020      	beq.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	2b40      	cmp	r3, #64	@ 0x40
 8002e84:	d01d      	beq.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	2b08      	cmp	r3, #8
 8002e92:	d116      	bne.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002e94:	2300      	movs	r3, #0
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 f857 	bl	8002f5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2208      	movs	r2, #8
 8002eb4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e00f      	b.n	8002ee2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	bf0c      	ite	eq
 8002ed2:	2301      	moveq	r3, #1
 8002ed4:	2300      	movne	r3, #0
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	461a      	mov	r2, r3
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d0b4      	beq.n	8002e4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b085      	sub	sp, #20
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	60f8      	str	r0, [r7, #12]
 8002ef2:	60b9      	str	r1, [r7, #8]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	88fa      	ldrh	r2, [r7, #6]
 8002f02:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	88fa      	ldrh	r2, [r7, #6]
 8002f08:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2222      	movs	r2, #34	@ 0x22
 8002f14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d007      	beq.n	8002f30 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68da      	ldr	r2, [r3, #12]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f2e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	695a      	ldr	r2, [r3, #20]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0201 	orr.w	r2, r2, #1
 8002f3e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f042 0220 	orr.w	r2, r2, #32
 8002f4e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b095      	sub	sp, #84	@ 0x54
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	330c      	adds	r3, #12
 8002f6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f70:	e853 3f00 	ldrex	r3, [r3]
 8002f74:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	330c      	adds	r3, #12
 8002f84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f86:	643a      	str	r2, [r7, #64]	@ 0x40
 8002f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f8e:	e841 2300 	strex	r3, r2, [r1]
 8002f92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1e5      	bne.n	8002f66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	3314      	adds	r3, #20
 8002fa0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	e853 3f00 	ldrex	r3, [r3]
 8002fa8:	61fb      	str	r3, [r7, #28]
   return(result);
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	f023 0301 	bic.w	r3, r3, #1
 8002fb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	3314      	adds	r3, #20
 8002fb8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002fba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fbe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fc2:	e841 2300 	strex	r3, r2, [r1]
 8002fc6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1e5      	bne.n	8002f9a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d119      	bne.n	800300a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	330c      	adds	r3, #12
 8002fdc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	e853 3f00 	ldrex	r3, [r3]
 8002fe4:	60bb      	str	r3, [r7, #8]
   return(result);
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	f023 0310 	bic.w	r3, r3, #16
 8002fec:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	330c      	adds	r3, #12
 8002ff4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ff6:	61ba      	str	r2, [r7, #24]
 8002ff8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffa:	6979      	ldr	r1, [r7, #20]
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	e841 2300 	strex	r3, r2, [r1]
 8003002:	613b      	str	r3, [r7, #16]
   return(result);
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1e5      	bne.n	8002fd6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2220      	movs	r2, #32
 800300e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003018:	bf00      	nop
 800301a:	3754      	adds	r7, #84	@ 0x54
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003030:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f7ff fee4 	bl	8002e0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003044:	bf00      	nop
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b21      	cmp	r3, #33	@ 0x21
 800305e:	d13e      	bne.n	80030de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003068:	d114      	bne.n	8003094 <UART_Transmit_IT+0x48>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d110      	bne.n	8003094 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003086:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	1c9a      	adds	r2, r3, #2
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	621a      	str	r2, [r3, #32]
 8003092:	e008      	b.n	80030a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	1c59      	adds	r1, r3, #1
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6211      	str	r1, [r2, #32]
 800309e:	781a      	ldrb	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	3b01      	subs	r3, #1
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	4619      	mov	r1, r3
 80030b4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10f      	bne.n	80030da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	e000      	b.n	80030e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80030de:	2302      	movs	r3, #2
  }
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68da      	ldr	r2, [r3, #12]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003102:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2220      	movs	r2, #32
 8003108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7ff fe73 	bl	8002df8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b08c      	sub	sp, #48	@ 0x30
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b22      	cmp	r3, #34	@ 0x22
 800312e:	f040 80ae 	bne.w	800328e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800313a:	d117      	bne.n	800316c <UART_Receive_IT+0x50>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d113      	bne.n	800316c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003144:	2300      	movs	r3, #0
 8003146:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800314c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	b29b      	uxth	r3, r3
 8003156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800315a:	b29a      	uxth	r2, r3
 800315c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800315e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003164:	1c9a      	adds	r2, r3, #2
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	629a      	str	r2, [r3, #40]	@ 0x28
 800316a:	e026      	b.n	80031ba <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003170:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003172:	2300      	movs	r3, #0
 8003174:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800317e:	d007      	beq.n	8003190 <UART_Receive_IT+0x74>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10a      	bne.n	800319e <UART_Receive_IT+0x82>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d106      	bne.n	800319e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	b2da      	uxtb	r2, r3
 8003198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800319a:	701a      	strb	r2, [r3, #0]
 800319c:	e008      	b.n	80031b0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031be:	b29b      	uxth	r3, r3
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	4619      	mov	r1, r3
 80031c8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d15d      	bne.n	800328a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68da      	ldr	r2, [r3, #12]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 0220 	bic.w	r2, r2, #32
 80031dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	695a      	ldr	r2, [r3, #20]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 0201 	bic.w	r2, r2, #1
 80031fc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2220      	movs	r2, #32
 8003202:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003210:	2b01      	cmp	r3, #1
 8003212:	d135      	bne.n	8003280 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	330c      	adds	r3, #12
 8003220:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	e853 3f00 	ldrex	r3, [r3]
 8003228:	613b      	str	r3, [r7, #16]
   return(result);
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	f023 0310 	bic.w	r3, r3, #16
 8003230:	627b      	str	r3, [r7, #36]	@ 0x24
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	330c      	adds	r3, #12
 8003238:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800323a:	623a      	str	r2, [r7, #32]
 800323c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323e:	69f9      	ldr	r1, [r7, #28]
 8003240:	6a3a      	ldr	r2, [r7, #32]
 8003242:	e841 2300 	strex	r3, r2, [r1]
 8003246:	61bb      	str	r3, [r7, #24]
   return(result);
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1e5      	bne.n	800321a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0310 	and.w	r3, r3, #16
 8003258:	2b10      	cmp	r3, #16
 800325a:	d10a      	bne.n	8003272 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800325c:	2300      	movs	r3, #0
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003276:	4619      	mov	r1, r3
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7ff fdd1 	bl	8002e20 <HAL_UARTEx_RxEventCallback>
 800327e:	e002      	b.n	8003286 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7fe f949 	bl	8001518 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003286:	2300      	movs	r3, #0
 8003288:	e002      	b.n	8003290 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800328a:	2300      	movs	r3, #0
 800328c:	e000      	b.n	8003290 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800328e:	2302      	movs	r3, #2
  }
}
 8003290:	4618      	mov	r0, r3
 8003292:	3730      	adds	r7, #48	@ 0x30
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800329c:	b0c0      	sub	sp, #256	@ 0x100
 800329e:	af00      	add	r7, sp, #0
 80032a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80032b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032b4:	68d9      	ldr	r1, [r3, #12]
 80032b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	ea40 0301 	orr.w	r3, r0, r1
 80032c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	431a      	orrs	r2, r3
 80032d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	431a      	orrs	r2, r3
 80032d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	4313      	orrs	r3, r2
 80032e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80032e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80032f0:	f021 010c 	bic.w	r1, r1, #12
 80032f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80032fe:	430b      	orrs	r3, r1
 8003300:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800330e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003312:	6999      	ldr	r1, [r3, #24]
 8003314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	ea40 0301 	orr.w	r3, r0, r1
 800331e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	4b8f      	ldr	r3, [pc, #572]	@ (8003564 <UART_SetConfig+0x2cc>)
 8003328:	429a      	cmp	r2, r3
 800332a:	d005      	beq.n	8003338 <UART_SetConfig+0xa0>
 800332c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	4b8d      	ldr	r3, [pc, #564]	@ (8003568 <UART_SetConfig+0x2d0>)
 8003334:	429a      	cmp	r2, r3
 8003336:	d104      	bne.n	8003342 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003338:	f7ff f9b8 	bl	80026ac <HAL_RCC_GetPCLK2Freq>
 800333c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003340:	e003      	b.n	800334a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003342:	f7ff f99f 	bl	8002684 <HAL_RCC_GetPCLK1Freq>
 8003346:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800334a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800334e:	69db      	ldr	r3, [r3, #28]
 8003350:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003354:	f040 810c 	bne.w	8003570 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003358:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800335c:	2200      	movs	r2, #0
 800335e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003362:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003366:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800336a:	4622      	mov	r2, r4
 800336c:	462b      	mov	r3, r5
 800336e:	1891      	adds	r1, r2, r2
 8003370:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003372:	415b      	adcs	r3, r3
 8003374:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003376:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800337a:	4621      	mov	r1, r4
 800337c:	eb12 0801 	adds.w	r8, r2, r1
 8003380:	4629      	mov	r1, r5
 8003382:	eb43 0901 	adc.w	r9, r3, r1
 8003386:	f04f 0200 	mov.w	r2, #0
 800338a:	f04f 0300 	mov.w	r3, #0
 800338e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003392:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003396:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800339a:	4690      	mov	r8, r2
 800339c:	4699      	mov	r9, r3
 800339e:	4623      	mov	r3, r4
 80033a0:	eb18 0303 	adds.w	r3, r8, r3
 80033a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80033a8:	462b      	mov	r3, r5
 80033aa:	eb49 0303 	adc.w	r3, r9, r3
 80033ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80033b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80033be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80033c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80033c6:	460b      	mov	r3, r1
 80033c8:	18db      	adds	r3, r3, r3
 80033ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80033cc:	4613      	mov	r3, r2
 80033ce:	eb42 0303 	adc.w	r3, r2, r3
 80033d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80033d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80033d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80033dc:	f7fd fbce 	bl	8000b7c <__aeabi_uldivmod>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4b61      	ldr	r3, [pc, #388]	@ (800356c <UART_SetConfig+0x2d4>)
 80033e6:	fba3 2302 	umull	r2, r3, r3, r2
 80033ea:	095b      	lsrs	r3, r3, #5
 80033ec:	011c      	lsls	r4, r3, #4
 80033ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033f2:	2200      	movs	r2, #0
 80033f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80033f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80033fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003400:	4642      	mov	r2, r8
 8003402:	464b      	mov	r3, r9
 8003404:	1891      	adds	r1, r2, r2
 8003406:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003408:	415b      	adcs	r3, r3
 800340a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800340c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003410:	4641      	mov	r1, r8
 8003412:	eb12 0a01 	adds.w	sl, r2, r1
 8003416:	4649      	mov	r1, r9
 8003418:	eb43 0b01 	adc.w	fp, r3, r1
 800341c:	f04f 0200 	mov.w	r2, #0
 8003420:	f04f 0300 	mov.w	r3, #0
 8003424:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003428:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800342c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003430:	4692      	mov	sl, r2
 8003432:	469b      	mov	fp, r3
 8003434:	4643      	mov	r3, r8
 8003436:	eb1a 0303 	adds.w	r3, sl, r3
 800343a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800343e:	464b      	mov	r3, r9
 8003440:	eb4b 0303 	adc.w	r3, fp, r3
 8003444:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003454:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003458:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800345c:	460b      	mov	r3, r1
 800345e:	18db      	adds	r3, r3, r3
 8003460:	643b      	str	r3, [r7, #64]	@ 0x40
 8003462:	4613      	mov	r3, r2
 8003464:	eb42 0303 	adc.w	r3, r2, r3
 8003468:	647b      	str	r3, [r7, #68]	@ 0x44
 800346a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800346e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003472:	f7fd fb83 	bl	8000b7c <__aeabi_uldivmod>
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	4611      	mov	r1, r2
 800347c:	4b3b      	ldr	r3, [pc, #236]	@ (800356c <UART_SetConfig+0x2d4>)
 800347e:	fba3 2301 	umull	r2, r3, r3, r1
 8003482:	095b      	lsrs	r3, r3, #5
 8003484:	2264      	movs	r2, #100	@ 0x64
 8003486:	fb02 f303 	mul.w	r3, r2, r3
 800348a:	1acb      	subs	r3, r1, r3
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003492:	4b36      	ldr	r3, [pc, #216]	@ (800356c <UART_SetConfig+0x2d4>)
 8003494:	fba3 2302 	umull	r2, r3, r3, r2
 8003498:	095b      	lsrs	r3, r3, #5
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80034a0:	441c      	add	r4, r3
 80034a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034a6:	2200      	movs	r2, #0
 80034a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80034ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80034b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80034b4:	4642      	mov	r2, r8
 80034b6:	464b      	mov	r3, r9
 80034b8:	1891      	adds	r1, r2, r2
 80034ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80034bc:	415b      	adcs	r3, r3
 80034be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80034c4:	4641      	mov	r1, r8
 80034c6:	1851      	adds	r1, r2, r1
 80034c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80034ca:	4649      	mov	r1, r9
 80034cc:	414b      	adcs	r3, r1
 80034ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80034d0:	f04f 0200 	mov.w	r2, #0
 80034d4:	f04f 0300 	mov.w	r3, #0
 80034d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80034dc:	4659      	mov	r1, fp
 80034de:	00cb      	lsls	r3, r1, #3
 80034e0:	4651      	mov	r1, sl
 80034e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034e6:	4651      	mov	r1, sl
 80034e8:	00ca      	lsls	r2, r1, #3
 80034ea:	4610      	mov	r0, r2
 80034ec:	4619      	mov	r1, r3
 80034ee:	4603      	mov	r3, r0
 80034f0:	4642      	mov	r2, r8
 80034f2:	189b      	adds	r3, r3, r2
 80034f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80034f8:	464b      	mov	r3, r9
 80034fa:	460a      	mov	r2, r1
 80034fc:	eb42 0303 	adc.w	r3, r2, r3
 8003500:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003510:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003514:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003518:	460b      	mov	r3, r1
 800351a:	18db      	adds	r3, r3, r3
 800351c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800351e:	4613      	mov	r3, r2
 8003520:	eb42 0303 	adc.w	r3, r2, r3
 8003524:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003526:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800352a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800352e:	f7fd fb25 	bl	8000b7c <__aeabi_uldivmod>
 8003532:	4602      	mov	r2, r0
 8003534:	460b      	mov	r3, r1
 8003536:	4b0d      	ldr	r3, [pc, #52]	@ (800356c <UART_SetConfig+0x2d4>)
 8003538:	fba3 1302 	umull	r1, r3, r3, r2
 800353c:	095b      	lsrs	r3, r3, #5
 800353e:	2164      	movs	r1, #100	@ 0x64
 8003540:	fb01 f303 	mul.w	r3, r1, r3
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	3332      	adds	r3, #50	@ 0x32
 800354a:	4a08      	ldr	r2, [pc, #32]	@ (800356c <UART_SetConfig+0x2d4>)
 800354c:	fba2 2303 	umull	r2, r3, r2, r3
 8003550:	095b      	lsrs	r3, r3, #5
 8003552:	f003 0207 	and.w	r2, r3, #7
 8003556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4422      	add	r2, r4
 800355e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003560:	e106      	b.n	8003770 <UART_SetConfig+0x4d8>
 8003562:	bf00      	nop
 8003564:	40011000 	.word	0x40011000
 8003568:	40011400 	.word	0x40011400
 800356c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003570:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003574:	2200      	movs	r2, #0
 8003576:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800357a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800357e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003582:	4642      	mov	r2, r8
 8003584:	464b      	mov	r3, r9
 8003586:	1891      	adds	r1, r2, r2
 8003588:	6239      	str	r1, [r7, #32]
 800358a:	415b      	adcs	r3, r3
 800358c:	627b      	str	r3, [r7, #36]	@ 0x24
 800358e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003592:	4641      	mov	r1, r8
 8003594:	1854      	adds	r4, r2, r1
 8003596:	4649      	mov	r1, r9
 8003598:	eb43 0501 	adc.w	r5, r3, r1
 800359c:	f04f 0200 	mov.w	r2, #0
 80035a0:	f04f 0300 	mov.w	r3, #0
 80035a4:	00eb      	lsls	r3, r5, #3
 80035a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035aa:	00e2      	lsls	r2, r4, #3
 80035ac:	4614      	mov	r4, r2
 80035ae:	461d      	mov	r5, r3
 80035b0:	4643      	mov	r3, r8
 80035b2:	18e3      	adds	r3, r4, r3
 80035b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80035b8:	464b      	mov	r3, r9
 80035ba:	eb45 0303 	adc.w	r3, r5, r3
 80035be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80035c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80035ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80035d2:	f04f 0200 	mov.w	r2, #0
 80035d6:	f04f 0300 	mov.w	r3, #0
 80035da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80035de:	4629      	mov	r1, r5
 80035e0:	008b      	lsls	r3, r1, #2
 80035e2:	4621      	mov	r1, r4
 80035e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035e8:	4621      	mov	r1, r4
 80035ea:	008a      	lsls	r2, r1, #2
 80035ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80035f0:	f7fd fac4 	bl	8000b7c <__aeabi_uldivmod>
 80035f4:	4602      	mov	r2, r0
 80035f6:	460b      	mov	r3, r1
 80035f8:	4b60      	ldr	r3, [pc, #384]	@ (800377c <UART_SetConfig+0x4e4>)
 80035fa:	fba3 2302 	umull	r2, r3, r3, r2
 80035fe:	095b      	lsrs	r3, r3, #5
 8003600:	011c      	lsls	r4, r3, #4
 8003602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003606:	2200      	movs	r2, #0
 8003608:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800360c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003610:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003614:	4642      	mov	r2, r8
 8003616:	464b      	mov	r3, r9
 8003618:	1891      	adds	r1, r2, r2
 800361a:	61b9      	str	r1, [r7, #24]
 800361c:	415b      	adcs	r3, r3
 800361e:	61fb      	str	r3, [r7, #28]
 8003620:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003624:	4641      	mov	r1, r8
 8003626:	1851      	adds	r1, r2, r1
 8003628:	6139      	str	r1, [r7, #16]
 800362a:	4649      	mov	r1, r9
 800362c:	414b      	adcs	r3, r1
 800362e:	617b      	str	r3, [r7, #20]
 8003630:	f04f 0200 	mov.w	r2, #0
 8003634:	f04f 0300 	mov.w	r3, #0
 8003638:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800363c:	4659      	mov	r1, fp
 800363e:	00cb      	lsls	r3, r1, #3
 8003640:	4651      	mov	r1, sl
 8003642:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003646:	4651      	mov	r1, sl
 8003648:	00ca      	lsls	r2, r1, #3
 800364a:	4610      	mov	r0, r2
 800364c:	4619      	mov	r1, r3
 800364e:	4603      	mov	r3, r0
 8003650:	4642      	mov	r2, r8
 8003652:	189b      	adds	r3, r3, r2
 8003654:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003658:	464b      	mov	r3, r9
 800365a:	460a      	mov	r2, r1
 800365c:	eb42 0303 	adc.w	r3, r2, r3
 8003660:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800366e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003670:	f04f 0200 	mov.w	r2, #0
 8003674:	f04f 0300 	mov.w	r3, #0
 8003678:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800367c:	4649      	mov	r1, r9
 800367e:	008b      	lsls	r3, r1, #2
 8003680:	4641      	mov	r1, r8
 8003682:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003686:	4641      	mov	r1, r8
 8003688:	008a      	lsls	r2, r1, #2
 800368a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800368e:	f7fd fa75 	bl	8000b7c <__aeabi_uldivmod>
 8003692:	4602      	mov	r2, r0
 8003694:	460b      	mov	r3, r1
 8003696:	4611      	mov	r1, r2
 8003698:	4b38      	ldr	r3, [pc, #224]	@ (800377c <UART_SetConfig+0x4e4>)
 800369a:	fba3 2301 	umull	r2, r3, r3, r1
 800369e:	095b      	lsrs	r3, r3, #5
 80036a0:	2264      	movs	r2, #100	@ 0x64
 80036a2:	fb02 f303 	mul.w	r3, r2, r3
 80036a6:	1acb      	subs	r3, r1, r3
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	3332      	adds	r3, #50	@ 0x32
 80036ac:	4a33      	ldr	r2, [pc, #204]	@ (800377c <UART_SetConfig+0x4e4>)
 80036ae:	fba2 2303 	umull	r2, r3, r2, r3
 80036b2:	095b      	lsrs	r3, r3, #5
 80036b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036b8:	441c      	add	r4, r3
 80036ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036be:	2200      	movs	r2, #0
 80036c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80036c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80036c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80036c8:	4642      	mov	r2, r8
 80036ca:	464b      	mov	r3, r9
 80036cc:	1891      	adds	r1, r2, r2
 80036ce:	60b9      	str	r1, [r7, #8]
 80036d0:	415b      	adcs	r3, r3
 80036d2:	60fb      	str	r3, [r7, #12]
 80036d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036d8:	4641      	mov	r1, r8
 80036da:	1851      	adds	r1, r2, r1
 80036dc:	6039      	str	r1, [r7, #0]
 80036de:	4649      	mov	r1, r9
 80036e0:	414b      	adcs	r3, r1
 80036e2:	607b      	str	r3, [r7, #4]
 80036e4:	f04f 0200 	mov.w	r2, #0
 80036e8:	f04f 0300 	mov.w	r3, #0
 80036ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036f0:	4659      	mov	r1, fp
 80036f2:	00cb      	lsls	r3, r1, #3
 80036f4:	4651      	mov	r1, sl
 80036f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036fa:	4651      	mov	r1, sl
 80036fc:	00ca      	lsls	r2, r1, #3
 80036fe:	4610      	mov	r0, r2
 8003700:	4619      	mov	r1, r3
 8003702:	4603      	mov	r3, r0
 8003704:	4642      	mov	r2, r8
 8003706:	189b      	adds	r3, r3, r2
 8003708:	66bb      	str	r3, [r7, #104]	@ 0x68
 800370a:	464b      	mov	r3, r9
 800370c:	460a      	mov	r2, r1
 800370e:	eb42 0303 	adc.w	r3, r2, r3
 8003712:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	663b      	str	r3, [r7, #96]	@ 0x60
 800371e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003720:	f04f 0200 	mov.w	r2, #0
 8003724:	f04f 0300 	mov.w	r3, #0
 8003728:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800372c:	4649      	mov	r1, r9
 800372e:	008b      	lsls	r3, r1, #2
 8003730:	4641      	mov	r1, r8
 8003732:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003736:	4641      	mov	r1, r8
 8003738:	008a      	lsls	r2, r1, #2
 800373a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800373e:	f7fd fa1d 	bl	8000b7c <__aeabi_uldivmod>
 8003742:	4602      	mov	r2, r0
 8003744:	460b      	mov	r3, r1
 8003746:	4b0d      	ldr	r3, [pc, #52]	@ (800377c <UART_SetConfig+0x4e4>)
 8003748:	fba3 1302 	umull	r1, r3, r3, r2
 800374c:	095b      	lsrs	r3, r3, #5
 800374e:	2164      	movs	r1, #100	@ 0x64
 8003750:	fb01 f303 	mul.w	r3, r1, r3
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	3332      	adds	r3, #50	@ 0x32
 800375a:	4a08      	ldr	r2, [pc, #32]	@ (800377c <UART_SetConfig+0x4e4>)
 800375c:	fba2 2303 	umull	r2, r3, r2, r3
 8003760:	095b      	lsrs	r3, r3, #5
 8003762:	f003 020f 	and.w	r2, r3, #15
 8003766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4422      	add	r2, r4
 800376e:	609a      	str	r2, [r3, #8]
}
 8003770:	bf00      	nop
 8003772:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003776:	46bd      	mov	sp, r7
 8003778:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800377c:	51eb851f 	.word	0x51eb851f

08003780 <std>:
 8003780:	2300      	movs	r3, #0
 8003782:	b510      	push	{r4, lr}
 8003784:	4604      	mov	r4, r0
 8003786:	e9c0 3300 	strd	r3, r3, [r0]
 800378a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800378e:	6083      	str	r3, [r0, #8]
 8003790:	8181      	strh	r1, [r0, #12]
 8003792:	6643      	str	r3, [r0, #100]	@ 0x64
 8003794:	81c2      	strh	r2, [r0, #14]
 8003796:	6183      	str	r3, [r0, #24]
 8003798:	4619      	mov	r1, r3
 800379a:	2208      	movs	r2, #8
 800379c:	305c      	adds	r0, #92	@ 0x5c
 800379e:	f000 f906 	bl	80039ae <memset>
 80037a2:	4b0d      	ldr	r3, [pc, #52]	@ (80037d8 <std+0x58>)
 80037a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80037a6:	4b0d      	ldr	r3, [pc, #52]	@ (80037dc <std+0x5c>)
 80037a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80037aa:	4b0d      	ldr	r3, [pc, #52]	@ (80037e0 <std+0x60>)
 80037ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80037ae:	4b0d      	ldr	r3, [pc, #52]	@ (80037e4 <std+0x64>)
 80037b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80037b2:	4b0d      	ldr	r3, [pc, #52]	@ (80037e8 <std+0x68>)
 80037b4:	6224      	str	r4, [r4, #32]
 80037b6:	429c      	cmp	r4, r3
 80037b8:	d006      	beq.n	80037c8 <std+0x48>
 80037ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80037be:	4294      	cmp	r4, r2
 80037c0:	d002      	beq.n	80037c8 <std+0x48>
 80037c2:	33d0      	adds	r3, #208	@ 0xd0
 80037c4:	429c      	cmp	r4, r3
 80037c6:	d105      	bne.n	80037d4 <std+0x54>
 80037c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80037cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037d0:	f000 b966 	b.w	8003aa0 <__retarget_lock_init_recursive>
 80037d4:	bd10      	pop	{r4, pc}
 80037d6:	bf00      	nop
 80037d8:	08003929 	.word	0x08003929
 80037dc:	0800394b 	.word	0x0800394b
 80037e0:	08003983 	.word	0x08003983
 80037e4:	080039a7 	.word	0x080039a7
 80037e8:	20000150 	.word	0x20000150

080037ec <stdio_exit_handler>:
 80037ec:	4a02      	ldr	r2, [pc, #8]	@ (80037f8 <stdio_exit_handler+0xc>)
 80037ee:	4903      	ldr	r1, [pc, #12]	@ (80037fc <stdio_exit_handler+0x10>)
 80037f0:	4803      	ldr	r0, [pc, #12]	@ (8003800 <stdio_exit_handler+0x14>)
 80037f2:	f000 b869 	b.w	80038c8 <_fwalk_sglue>
 80037f6:	bf00      	nop
 80037f8:	20000010 	.word	0x20000010
 80037fc:	08004341 	.word	0x08004341
 8003800:	20000020 	.word	0x20000020

08003804 <cleanup_stdio>:
 8003804:	6841      	ldr	r1, [r0, #4]
 8003806:	4b0c      	ldr	r3, [pc, #48]	@ (8003838 <cleanup_stdio+0x34>)
 8003808:	4299      	cmp	r1, r3
 800380a:	b510      	push	{r4, lr}
 800380c:	4604      	mov	r4, r0
 800380e:	d001      	beq.n	8003814 <cleanup_stdio+0x10>
 8003810:	f000 fd96 	bl	8004340 <_fflush_r>
 8003814:	68a1      	ldr	r1, [r4, #8]
 8003816:	4b09      	ldr	r3, [pc, #36]	@ (800383c <cleanup_stdio+0x38>)
 8003818:	4299      	cmp	r1, r3
 800381a:	d002      	beq.n	8003822 <cleanup_stdio+0x1e>
 800381c:	4620      	mov	r0, r4
 800381e:	f000 fd8f 	bl	8004340 <_fflush_r>
 8003822:	68e1      	ldr	r1, [r4, #12]
 8003824:	4b06      	ldr	r3, [pc, #24]	@ (8003840 <cleanup_stdio+0x3c>)
 8003826:	4299      	cmp	r1, r3
 8003828:	d004      	beq.n	8003834 <cleanup_stdio+0x30>
 800382a:	4620      	mov	r0, r4
 800382c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003830:	f000 bd86 	b.w	8004340 <_fflush_r>
 8003834:	bd10      	pop	{r4, pc}
 8003836:	bf00      	nop
 8003838:	20000150 	.word	0x20000150
 800383c:	200001b8 	.word	0x200001b8
 8003840:	20000220 	.word	0x20000220

08003844 <global_stdio_init.part.0>:
 8003844:	b510      	push	{r4, lr}
 8003846:	4b0b      	ldr	r3, [pc, #44]	@ (8003874 <global_stdio_init.part.0+0x30>)
 8003848:	4c0b      	ldr	r4, [pc, #44]	@ (8003878 <global_stdio_init.part.0+0x34>)
 800384a:	4a0c      	ldr	r2, [pc, #48]	@ (800387c <global_stdio_init.part.0+0x38>)
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	4620      	mov	r0, r4
 8003850:	2200      	movs	r2, #0
 8003852:	2104      	movs	r1, #4
 8003854:	f7ff ff94 	bl	8003780 <std>
 8003858:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800385c:	2201      	movs	r2, #1
 800385e:	2109      	movs	r1, #9
 8003860:	f7ff ff8e 	bl	8003780 <std>
 8003864:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003868:	2202      	movs	r2, #2
 800386a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800386e:	2112      	movs	r1, #18
 8003870:	f7ff bf86 	b.w	8003780 <std>
 8003874:	20000288 	.word	0x20000288
 8003878:	20000150 	.word	0x20000150
 800387c:	080037ed 	.word	0x080037ed

08003880 <__sfp_lock_acquire>:
 8003880:	4801      	ldr	r0, [pc, #4]	@ (8003888 <__sfp_lock_acquire+0x8>)
 8003882:	f000 b90e 	b.w	8003aa2 <__retarget_lock_acquire_recursive>
 8003886:	bf00      	nop
 8003888:	20000291 	.word	0x20000291

0800388c <__sfp_lock_release>:
 800388c:	4801      	ldr	r0, [pc, #4]	@ (8003894 <__sfp_lock_release+0x8>)
 800388e:	f000 b909 	b.w	8003aa4 <__retarget_lock_release_recursive>
 8003892:	bf00      	nop
 8003894:	20000291 	.word	0x20000291

08003898 <__sinit>:
 8003898:	b510      	push	{r4, lr}
 800389a:	4604      	mov	r4, r0
 800389c:	f7ff fff0 	bl	8003880 <__sfp_lock_acquire>
 80038a0:	6a23      	ldr	r3, [r4, #32]
 80038a2:	b11b      	cbz	r3, 80038ac <__sinit+0x14>
 80038a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038a8:	f7ff bff0 	b.w	800388c <__sfp_lock_release>
 80038ac:	4b04      	ldr	r3, [pc, #16]	@ (80038c0 <__sinit+0x28>)
 80038ae:	6223      	str	r3, [r4, #32]
 80038b0:	4b04      	ldr	r3, [pc, #16]	@ (80038c4 <__sinit+0x2c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1f5      	bne.n	80038a4 <__sinit+0xc>
 80038b8:	f7ff ffc4 	bl	8003844 <global_stdio_init.part.0>
 80038bc:	e7f2      	b.n	80038a4 <__sinit+0xc>
 80038be:	bf00      	nop
 80038c0:	08003805 	.word	0x08003805
 80038c4:	20000288 	.word	0x20000288

080038c8 <_fwalk_sglue>:
 80038c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038cc:	4607      	mov	r7, r0
 80038ce:	4688      	mov	r8, r1
 80038d0:	4614      	mov	r4, r2
 80038d2:	2600      	movs	r6, #0
 80038d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80038d8:	f1b9 0901 	subs.w	r9, r9, #1
 80038dc:	d505      	bpl.n	80038ea <_fwalk_sglue+0x22>
 80038de:	6824      	ldr	r4, [r4, #0]
 80038e0:	2c00      	cmp	r4, #0
 80038e2:	d1f7      	bne.n	80038d4 <_fwalk_sglue+0xc>
 80038e4:	4630      	mov	r0, r6
 80038e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038ea:	89ab      	ldrh	r3, [r5, #12]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d907      	bls.n	8003900 <_fwalk_sglue+0x38>
 80038f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80038f4:	3301      	adds	r3, #1
 80038f6:	d003      	beq.n	8003900 <_fwalk_sglue+0x38>
 80038f8:	4629      	mov	r1, r5
 80038fa:	4638      	mov	r0, r7
 80038fc:	47c0      	blx	r8
 80038fe:	4306      	orrs	r6, r0
 8003900:	3568      	adds	r5, #104	@ 0x68
 8003902:	e7e9      	b.n	80038d8 <_fwalk_sglue+0x10>

08003904 <iprintf>:
 8003904:	b40f      	push	{r0, r1, r2, r3}
 8003906:	b507      	push	{r0, r1, r2, lr}
 8003908:	4906      	ldr	r1, [pc, #24]	@ (8003924 <iprintf+0x20>)
 800390a:	ab04      	add	r3, sp, #16
 800390c:	6808      	ldr	r0, [r1, #0]
 800390e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003912:	6881      	ldr	r1, [r0, #8]
 8003914:	9301      	str	r3, [sp, #4]
 8003916:	f000 f9e9 	bl	8003cec <_vfiprintf_r>
 800391a:	b003      	add	sp, #12
 800391c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003920:	b004      	add	sp, #16
 8003922:	4770      	bx	lr
 8003924:	2000001c 	.word	0x2000001c

08003928 <__sread>:
 8003928:	b510      	push	{r4, lr}
 800392a:	460c      	mov	r4, r1
 800392c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003930:	f000 f868 	bl	8003a04 <_read_r>
 8003934:	2800      	cmp	r0, #0
 8003936:	bfab      	itete	ge
 8003938:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800393a:	89a3      	ldrhlt	r3, [r4, #12]
 800393c:	181b      	addge	r3, r3, r0
 800393e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003942:	bfac      	ite	ge
 8003944:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003946:	81a3      	strhlt	r3, [r4, #12]
 8003948:	bd10      	pop	{r4, pc}

0800394a <__swrite>:
 800394a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800394e:	461f      	mov	r7, r3
 8003950:	898b      	ldrh	r3, [r1, #12]
 8003952:	05db      	lsls	r3, r3, #23
 8003954:	4605      	mov	r5, r0
 8003956:	460c      	mov	r4, r1
 8003958:	4616      	mov	r6, r2
 800395a:	d505      	bpl.n	8003968 <__swrite+0x1e>
 800395c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003960:	2302      	movs	r3, #2
 8003962:	2200      	movs	r2, #0
 8003964:	f000 f83c 	bl	80039e0 <_lseek_r>
 8003968:	89a3      	ldrh	r3, [r4, #12]
 800396a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800396e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003972:	81a3      	strh	r3, [r4, #12]
 8003974:	4632      	mov	r2, r6
 8003976:	463b      	mov	r3, r7
 8003978:	4628      	mov	r0, r5
 800397a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800397e:	f000 b853 	b.w	8003a28 <_write_r>

08003982 <__sseek>:
 8003982:	b510      	push	{r4, lr}
 8003984:	460c      	mov	r4, r1
 8003986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800398a:	f000 f829 	bl	80039e0 <_lseek_r>
 800398e:	1c43      	adds	r3, r0, #1
 8003990:	89a3      	ldrh	r3, [r4, #12]
 8003992:	bf15      	itete	ne
 8003994:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003996:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800399a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800399e:	81a3      	strheq	r3, [r4, #12]
 80039a0:	bf18      	it	ne
 80039a2:	81a3      	strhne	r3, [r4, #12]
 80039a4:	bd10      	pop	{r4, pc}

080039a6 <__sclose>:
 80039a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039aa:	f000 b809 	b.w	80039c0 <_close_r>

080039ae <memset>:
 80039ae:	4402      	add	r2, r0
 80039b0:	4603      	mov	r3, r0
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d100      	bne.n	80039b8 <memset+0xa>
 80039b6:	4770      	bx	lr
 80039b8:	f803 1b01 	strb.w	r1, [r3], #1
 80039bc:	e7f9      	b.n	80039b2 <memset+0x4>
	...

080039c0 <_close_r>:
 80039c0:	b538      	push	{r3, r4, r5, lr}
 80039c2:	4d06      	ldr	r5, [pc, #24]	@ (80039dc <_close_r+0x1c>)
 80039c4:	2300      	movs	r3, #0
 80039c6:	4604      	mov	r4, r0
 80039c8:	4608      	mov	r0, r1
 80039ca:	602b      	str	r3, [r5, #0]
 80039cc:	f7fd fd11 	bl	80013f2 <_close>
 80039d0:	1c43      	adds	r3, r0, #1
 80039d2:	d102      	bne.n	80039da <_close_r+0x1a>
 80039d4:	682b      	ldr	r3, [r5, #0]
 80039d6:	b103      	cbz	r3, 80039da <_close_r+0x1a>
 80039d8:	6023      	str	r3, [r4, #0]
 80039da:	bd38      	pop	{r3, r4, r5, pc}
 80039dc:	2000028c 	.word	0x2000028c

080039e0 <_lseek_r>:
 80039e0:	b538      	push	{r3, r4, r5, lr}
 80039e2:	4d07      	ldr	r5, [pc, #28]	@ (8003a00 <_lseek_r+0x20>)
 80039e4:	4604      	mov	r4, r0
 80039e6:	4608      	mov	r0, r1
 80039e8:	4611      	mov	r1, r2
 80039ea:	2200      	movs	r2, #0
 80039ec:	602a      	str	r2, [r5, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	f7fd fd26 	bl	8001440 <_lseek>
 80039f4:	1c43      	adds	r3, r0, #1
 80039f6:	d102      	bne.n	80039fe <_lseek_r+0x1e>
 80039f8:	682b      	ldr	r3, [r5, #0]
 80039fa:	b103      	cbz	r3, 80039fe <_lseek_r+0x1e>
 80039fc:	6023      	str	r3, [r4, #0]
 80039fe:	bd38      	pop	{r3, r4, r5, pc}
 8003a00:	2000028c 	.word	0x2000028c

08003a04 <_read_r>:
 8003a04:	b538      	push	{r3, r4, r5, lr}
 8003a06:	4d07      	ldr	r5, [pc, #28]	@ (8003a24 <_read_r+0x20>)
 8003a08:	4604      	mov	r4, r0
 8003a0a:	4608      	mov	r0, r1
 8003a0c:	4611      	mov	r1, r2
 8003a0e:	2200      	movs	r2, #0
 8003a10:	602a      	str	r2, [r5, #0]
 8003a12:	461a      	mov	r2, r3
 8003a14:	f7fd fcd0 	bl	80013b8 <_read>
 8003a18:	1c43      	adds	r3, r0, #1
 8003a1a:	d102      	bne.n	8003a22 <_read_r+0x1e>
 8003a1c:	682b      	ldr	r3, [r5, #0]
 8003a1e:	b103      	cbz	r3, 8003a22 <_read_r+0x1e>
 8003a20:	6023      	str	r3, [r4, #0]
 8003a22:	bd38      	pop	{r3, r4, r5, pc}
 8003a24:	2000028c 	.word	0x2000028c

08003a28 <_write_r>:
 8003a28:	b538      	push	{r3, r4, r5, lr}
 8003a2a:	4d07      	ldr	r5, [pc, #28]	@ (8003a48 <_write_r+0x20>)
 8003a2c:	4604      	mov	r4, r0
 8003a2e:	4608      	mov	r0, r1
 8003a30:	4611      	mov	r1, r2
 8003a32:	2200      	movs	r2, #0
 8003a34:	602a      	str	r2, [r5, #0]
 8003a36:	461a      	mov	r2, r3
 8003a38:	f7fd fd58 	bl	80014ec <_write>
 8003a3c:	1c43      	adds	r3, r0, #1
 8003a3e:	d102      	bne.n	8003a46 <_write_r+0x1e>
 8003a40:	682b      	ldr	r3, [r5, #0]
 8003a42:	b103      	cbz	r3, 8003a46 <_write_r+0x1e>
 8003a44:	6023      	str	r3, [r4, #0]
 8003a46:	bd38      	pop	{r3, r4, r5, pc}
 8003a48:	2000028c 	.word	0x2000028c

08003a4c <__errno>:
 8003a4c:	4b01      	ldr	r3, [pc, #4]	@ (8003a54 <__errno+0x8>)
 8003a4e:	6818      	ldr	r0, [r3, #0]
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	2000001c 	.word	0x2000001c

08003a58 <__libc_init_array>:
 8003a58:	b570      	push	{r4, r5, r6, lr}
 8003a5a:	4d0d      	ldr	r5, [pc, #52]	@ (8003a90 <__libc_init_array+0x38>)
 8003a5c:	4c0d      	ldr	r4, [pc, #52]	@ (8003a94 <__libc_init_array+0x3c>)
 8003a5e:	1b64      	subs	r4, r4, r5
 8003a60:	10a4      	asrs	r4, r4, #2
 8003a62:	2600      	movs	r6, #0
 8003a64:	42a6      	cmp	r6, r4
 8003a66:	d109      	bne.n	8003a7c <__libc_init_array+0x24>
 8003a68:	4d0b      	ldr	r5, [pc, #44]	@ (8003a98 <__libc_init_array+0x40>)
 8003a6a:	4c0c      	ldr	r4, [pc, #48]	@ (8003a9c <__libc_init_array+0x44>)
 8003a6c:	f001 fe3c 	bl	80056e8 <_init>
 8003a70:	1b64      	subs	r4, r4, r5
 8003a72:	10a4      	asrs	r4, r4, #2
 8003a74:	2600      	movs	r6, #0
 8003a76:	42a6      	cmp	r6, r4
 8003a78:	d105      	bne.n	8003a86 <__libc_init_array+0x2e>
 8003a7a:	bd70      	pop	{r4, r5, r6, pc}
 8003a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a80:	4798      	blx	r3
 8003a82:	3601      	adds	r6, #1
 8003a84:	e7ee      	b.n	8003a64 <__libc_init_array+0xc>
 8003a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a8a:	4798      	blx	r3
 8003a8c:	3601      	adds	r6, #1
 8003a8e:	e7f2      	b.n	8003a76 <__libc_init_array+0x1e>
 8003a90:	08005938 	.word	0x08005938
 8003a94:	08005938 	.word	0x08005938
 8003a98:	08005938 	.word	0x08005938
 8003a9c:	0800593c 	.word	0x0800593c

08003aa0 <__retarget_lock_init_recursive>:
 8003aa0:	4770      	bx	lr

08003aa2 <__retarget_lock_acquire_recursive>:
 8003aa2:	4770      	bx	lr

08003aa4 <__retarget_lock_release_recursive>:
 8003aa4:	4770      	bx	lr
	...

08003aa8 <_free_r>:
 8003aa8:	b538      	push	{r3, r4, r5, lr}
 8003aaa:	4605      	mov	r5, r0
 8003aac:	2900      	cmp	r1, #0
 8003aae:	d041      	beq.n	8003b34 <_free_r+0x8c>
 8003ab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ab4:	1f0c      	subs	r4, r1, #4
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	bfb8      	it	lt
 8003aba:	18e4      	addlt	r4, r4, r3
 8003abc:	f000 f8e0 	bl	8003c80 <__malloc_lock>
 8003ac0:	4a1d      	ldr	r2, [pc, #116]	@ (8003b38 <_free_r+0x90>)
 8003ac2:	6813      	ldr	r3, [r2, #0]
 8003ac4:	b933      	cbnz	r3, 8003ad4 <_free_r+0x2c>
 8003ac6:	6063      	str	r3, [r4, #4]
 8003ac8:	6014      	str	r4, [r2, #0]
 8003aca:	4628      	mov	r0, r5
 8003acc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ad0:	f000 b8dc 	b.w	8003c8c <__malloc_unlock>
 8003ad4:	42a3      	cmp	r3, r4
 8003ad6:	d908      	bls.n	8003aea <_free_r+0x42>
 8003ad8:	6820      	ldr	r0, [r4, #0]
 8003ada:	1821      	adds	r1, r4, r0
 8003adc:	428b      	cmp	r3, r1
 8003ade:	bf01      	itttt	eq
 8003ae0:	6819      	ldreq	r1, [r3, #0]
 8003ae2:	685b      	ldreq	r3, [r3, #4]
 8003ae4:	1809      	addeq	r1, r1, r0
 8003ae6:	6021      	streq	r1, [r4, #0]
 8003ae8:	e7ed      	b.n	8003ac6 <_free_r+0x1e>
 8003aea:	461a      	mov	r2, r3
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	b10b      	cbz	r3, 8003af4 <_free_r+0x4c>
 8003af0:	42a3      	cmp	r3, r4
 8003af2:	d9fa      	bls.n	8003aea <_free_r+0x42>
 8003af4:	6811      	ldr	r1, [r2, #0]
 8003af6:	1850      	adds	r0, r2, r1
 8003af8:	42a0      	cmp	r0, r4
 8003afa:	d10b      	bne.n	8003b14 <_free_r+0x6c>
 8003afc:	6820      	ldr	r0, [r4, #0]
 8003afe:	4401      	add	r1, r0
 8003b00:	1850      	adds	r0, r2, r1
 8003b02:	4283      	cmp	r3, r0
 8003b04:	6011      	str	r1, [r2, #0]
 8003b06:	d1e0      	bne.n	8003aca <_free_r+0x22>
 8003b08:	6818      	ldr	r0, [r3, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	6053      	str	r3, [r2, #4]
 8003b0e:	4408      	add	r0, r1
 8003b10:	6010      	str	r0, [r2, #0]
 8003b12:	e7da      	b.n	8003aca <_free_r+0x22>
 8003b14:	d902      	bls.n	8003b1c <_free_r+0x74>
 8003b16:	230c      	movs	r3, #12
 8003b18:	602b      	str	r3, [r5, #0]
 8003b1a:	e7d6      	b.n	8003aca <_free_r+0x22>
 8003b1c:	6820      	ldr	r0, [r4, #0]
 8003b1e:	1821      	adds	r1, r4, r0
 8003b20:	428b      	cmp	r3, r1
 8003b22:	bf04      	itt	eq
 8003b24:	6819      	ldreq	r1, [r3, #0]
 8003b26:	685b      	ldreq	r3, [r3, #4]
 8003b28:	6063      	str	r3, [r4, #4]
 8003b2a:	bf04      	itt	eq
 8003b2c:	1809      	addeq	r1, r1, r0
 8003b2e:	6021      	streq	r1, [r4, #0]
 8003b30:	6054      	str	r4, [r2, #4]
 8003b32:	e7ca      	b.n	8003aca <_free_r+0x22>
 8003b34:	bd38      	pop	{r3, r4, r5, pc}
 8003b36:	bf00      	nop
 8003b38:	20000298 	.word	0x20000298

08003b3c <sbrk_aligned>:
 8003b3c:	b570      	push	{r4, r5, r6, lr}
 8003b3e:	4e0f      	ldr	r6, [pc, #60]	@ (8003b7c <sbrk_aligned+0x40>)
 8003b40:	460c      	mov	r4, r1
 8003b42:	6831      	ldr	r1, [r6, #0]
 8003b44:	4605      	mov	r5, r0
 8003b46:	b911      	cbnz	r1, 8003b4e <sbrk_aligned+0x12>
 8003b48:	f000 fcb6 	bl	80044b8 <_sbrk_r>
 8003b4c:	6030      	str	r0, [r6, #0]
 8003b4e:	4621      	mov	r1, r4
 8003b50:	4628      	mov	r0, r5
 8003b52:	f000 fcb1 	bl	80044b8 <_sbrk_r>
 8003b56:	1c43      	adds	r3, r0, #1
 8003b58:	d103      	bne.n	8003b62 <sbrk_aligned+0x26>
 8003b5a:	f04f 34ff 	mov.w	r4, #4294967295
 8003b5e:	4620      	mov	r0, r4
 8003b60:	bd70      	pop	{r4, r5, r6, pc}
 8003b62:	1cc4      	adds	r4, r0, #3
 8003b64:	f024 0403 	bic.w	r4, r4, #3
 8003b68:	42a0      	cmp	r0, r4
 8003b6a:	d0f8      	beq.n	8003b5e <sbrk_aligned+0x22>
 8003b6c:	1a21      	subs	r1, r4, r0
 8003b6e:	4628      	mov	r0, r5
 8003b70:	f000 fca2 	bl	80044b8 <_sbrk_r>
 8003b74:	3001      	adds	r0, #1
 8003b76:	d1f2      	bne.n	8003b5e <sbrk_aligned+0x22>
 8003b78:	e7ef      	b.n	8003b5a <sbrk_aligned+0x1e>
 8003b7a:	bf00      	nop
 8003b7c:	20000294 	.word	0x20000294

08003b80 <_malloc_r>:
 8003b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b84:	1ccd      	adds	r5, r1, #3
 8003b86:	f025 0503 	bic.w	r5, r5, #3
 8003b8a:	3508      	adds	r5, #8
 8003b8c:	2d0c      	cmp	r5, #12
 8003b8e:	bf38      	it	cc
 8003b90:	250c      	movcc	r5, #12
 8003b92:	2d00      	cmp	r5, #0
 8003b94:	4606      	mov	r6, r0
 8003b96:	db01      	blt.n	8003b9c <_malloc_r+0x1c>
 8003b98:	42a9      	cmp	r1, r5
 8003b9a:	d904      	bls.n	8003ba6 <_malloc_r+0x26>
 8003b9c:	230c      	movs	r3, #12
 8003b9e:	6033      	str	r3, [r6, #0]
 8003ba0:	2000      	movs	r0, #0
 8003ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ba6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003c7c <_malloc_r+0xfc>
 8003baa:	f000 f869 	bl	8003c80 <__malloc_lock>
 8003bae:	f8d8 3000 	ldr.w	r3, [r8]
 8003bb2:	461c      	mov	r4, r3
 8003bb4:	bb44      	cbnz	r4, 8003c08 <_malloc_r+0x88>
 8003bb6:	4629      	mov	r1, r5
 8003bb8:	4630      	mov	r0, r6
 8003bba:	f7ff ffbf 	bl	8003b3c <sbrk_aligned>
 8003bbe:	1c43      	adds	r3, r0, #1
 8003bc0:	4604      	mov	r4, r0
 8003bc2:	d158      	bne.n	8003c76 <_malloc_r+0xf6>
 8003bc4:	f8d8 4000 	ldr.w	r4, [r8]
 8003bc8:	4627      	mov	r7, r4
 8003bca:	2f00      	cmp	r7, #0
 8003bcc:	d143      	bne.n	8003c56 <_malloc_r+0xd6>
 8003bce:	2c00      	cmp	r4, #0
 8003bd0:	d04b      	beq.n	8003c6a <_malloc_r+0xea>
 8003bd2:	6823      	ldr	r3, [r4, #0]
 8003bd4:	4639      	mov	r1, r7
 8003bd6:	4630      	mov	r0, r6
 8003bd8:	eb04 0903 	add.w	r9, r4, r3
 8003bdc:	f000 fc6c 	bl	80044b8 <_sbrk_r>
 8003be0:	4581      	cmp	r9, r0
 8003be2:	d142      	bne.n	8003c6a <_malloc_r+0xea>
 8003be4:	6821      	ldr	r1, [r4, #0]
 8003be6:	1a6d      	subs	r5, r5, r1
 8003be8:	4629      	mov	r1, r5
 8003bea:	4630      	mov	r0, r6
 8003bec:	f7ff ffa6 	bl	8003b3c <sbrk_aligned>
 8003bf0:	3001      	adds	r0, #1
 8003bf2:	d03a      	beq.n	8003c6a <_malloc_r+0xea>
 8003bf4:	6823      	ldr	r3, [r4, #0]
 8003bf6:	442b      	add	r3, r5
 8003bf8:	6023      	str	r3, [r4, #0]
 8003bfa:	f8d8 3000 	ldr.w	r3, [r8]
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	bb62      	cbnz	r2, 8003c5c <_malloc_r+0xdc>
 8003c02:	f8c8 7000 	str.w	r7, [r8]
 8003c06:	e00f      	b.n	8003c28 <_malloc_r+0xa8>
 8003c08:	6822      	ldr	r2, [r4, #0]
 8003c0a:	1b52      	subs	r2, r2, r5
 8003c0c:	d420      	bmi.n	8003c50 <_malloc_r+0xd0>
 8003c0e:	2a0b      	cmp	r2, #11
 8003c10:	d917      	bls.n	8003c42 <_malloc_r+0xc2>
 8003c12:	1961      	adds	r1, r4, r5
 8003c14:	42a3      	cmp	r3, r4
 8003c16:	6025      	str	r5, [r4, #0]
 8003c18:	bf18      	it	ne
 8003c1a:	6059      	strne	r1, [r3, #4]
 8003c1c:	6863      	ldr	r3, [r4, #4]
 8003c1e:	bf08      	it	eq
 8003c20:	f8c8 1000 	streq.w	r1, [r8]
 8003c24:	5162      	str	r2, [r4, r5]
 8003c26:	604b      	str	r3, [r1, #4]
 8003c28:	4630      	mov	r0, r6
 8003c2a:	f000 f82f 	bl	8003c8c <__malloc_unlock>
 8003c2e:	f104 000b 	add.w	r0, r4, #11
 8003c32:	1d23      	adds	r3, r4, #4
 8003c34:	f020 0007 	bic.w	r0, r0, #7
 8003c38:	1ac2      	subs	r2, r0, r3
 8003c3a:	bf1c      	itt	ne
 8003c3c:	1a1b      	subne	r3, r3, r0
 8003c3e:	50a3      	strne	r3, [r4, r2]
 8003c40:	e7af      	b.n	8003ba2 <_malloc_r+0x22>
 8003c42:	6862      	ldr	r2, [r4, #4]
 8003c44:	42a3      	cmp	r3, r4
 8003c46:	bf0c      	ite	eq
 8003c48:	f8c8 2000 	streq.w	r2, [r8]
 8003c4c:	605a      	strne	r2, [r3, #4]
 8003c4e:	e7eb      	b.n	8003c28 <_malloc_r+0xa8>
 8003c50:	4623      	mov	r3, r4
 8003c52:	6864      	ldr	r4, [r4, #4]
 8003c54:	e7ae      	b.n	8003bb4 <_malloc_r+0x34>
 8003c56:	463c      	mov	r4, r7
 8003c58:	687f      	ldr	r7, [r7, #4]
 8003c5a:	e7b6      	b.n	8003bca <_malloc_r+0x4a>
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	42a3      	cmp	r3, r4
 8003c62:	d1fb      	bne.n	8003c5c <_malloc_r+0xdc>
 8003c64:	2300      	movs	r3, #0
 8003c66:	6053      	str	r3, [r2, #4]
 8003c68:	e7de      	b.n	8003c28 <_malloc_r+0xa8>
 8003c6a:	230c      	movs	r3, #12
 8003c6c:	6033      	str	r3, [r6, #0]
 8003c6e:	4630      	mov	r0, r6
 8003c70:	f000 f80c 	bl	8003c8c <__malloc_unlock>
 8003c74:	e794      	b.n	8003ba0 <_malloc_r+0x20>
 8003c76:	6005      	str	r5, [r0, #0]
 8003c78:	e7d6      	b.n	8003c28 <_malloc_r+0xa8>
 8003c7a:	bf00      	nop
 8003c7c:	20000298 	.word	0x20000298

08003c80 <__malloc_lock>:
 8003c80:	4801      	ldr	r0, [pc, #4]	@ (8003c88 <__malloc_lock+0x8>)
 8003c82:	f7ff bf0e 	b.w	8003aa2 <__retarget_lock_acquire_recursive>
 8003c86:	bf00      	nop
 8003c88:	20000290 	.word	0x20000290

08003c8c <__malloc_unlock>:
 8003c8c:	4801      	ldr	r0, [pc, #4]	@ (8003c94 <__malloc_unlock+0x8>)
 8003c8e:	f7ff bf09 	b.w	8003aa4 <__retarget_lock_release_recursive>
 8003c92:	bf00      	nop
 8003c94:	20000290 	.word	0x20000290

08003c98 <__sfputc_r>:
 8003c98:	6893      	ldr	r3, [r2, #8]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	b410      	push	{r4}
 8003ca0:	6093      	str	r3, [r2, #8]
 8003ca2:	da08      	bge.n	8003cb6 <__sfputc_r+0x1e>
 8003ca4:	6994      	ldr	r4, [r2, #24]
 8003ca6:	42a3      	cmp	r3, r4
 8003ca8:	db01      	blt.n	8003cae <__sfputc_r+0x16>
 8003caa:	290a      	cmp	r1, #10
 8003cac:	d103      	bne.n	8003cb6 <__sfputc_r+0x1e>
 8003cae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003cb2:	f000 bb6d 	b.w	8004390 <__swbuf_r>
 8003cb6:	6813      	ldr	r3, [r2, #0]
 8003cb8:	1c58      	adds	r0, r3, #1
 8003cba:	6010      	str	r0, [r2, #0]
 8003cbc:	7019      	strb	r1, [r3, #0]
 8003cbe:	4608      	mov	r0, r1
 8003cc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <__sfputs_r>:
 8003cc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc8:	4606      	mov	r6, r0
 8003cca:	460f      	mov	r7, r1
 8003ccc:	4614      	mov	r4, r2
 8003cce:	18d5      	adds	r5, r2, r3
 8003cd0:	42ac      	cmp	r4, r5
 8003cd2:	d101      	bne.n	8003cd8 <__sfputs_r+0x12>
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	e007      	b.n	8003ce8 <__sfputs_r+0x22>
 8003cd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cdc:	463a      	mov	r2, r7
 8003cde:	4630      	mov	r0, r6
 8003ce0:	f7ff ffda 	bl	8003c98 <__sfputc_r>
 8003ce4:	1c43      	adds	r3, r0, #1
 8003ce6:	d1f3      	bne.n	8003cd0 <__sfputs_r+0xa>
 8003ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003cec <_vfiprintf_r>:
 8003cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cf0:	460d      	mov	r5, r1
 8003cf2:	b09d      	sub	sp, #116	@ 0x74
 8003cf4:	4614      	mov	r4, r2
 8003cf6:	4698      	mov	r8, r3
 8003cf8:	4606      	mov	r6, r0
 8003cfa:	b118      	cbz	r0, 8003d04 <_vfiprintf_r+0x18>
 8003cfc:	6a03      	ldr	r3, [r0, #32]
 8003cfe:	b90b      	cbnz	r3, 8003d04 <_vfiprintf_r+0x18>
 8003d00:	f7ff fdca 	bl	8003898 <__sinit>
 8003d04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003d06:	07d9      	lsls	r1, r3, #31
 8003d08:	d405      	bmi.n	8003d16 <_vfiprintf_r+0x2a>
 8003d0a:	89ab      	ldrh	r3, [r5, #12]
 8003d0c:	059a      	lsls	r2, r3, #22
 8003d0e:	d402      	bmi.n	8003d16 <_vfiprintf_r+0x2a>
 8003d10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003d12:	f7ff fec6 	bl	8003aa2 <__retarget_lock_acquire_recursive>
 8003d16:	89ab      	ldrh	r3, [r5, #12]
 8003d18:	071b      	lsls	r3, r3, #28
 8003d1a:	d501      	bpl.n	8003d20 <_vfiprintf_r+0x34>
 8003d1c:	692b      	ldr	r3, [r5, #16]
 8003d1e:	b99b      	cbnz	r3, 8003d48 <_vfiprintf_r+0x5c>
 8003d20:	4629      	mov	r1, r5
 8003d22:	4630      	mov	r0, r6
 8003d24:	f000 fb72 	bl	800440c <__swsetup_r>
 8003d28:	b170      	cbz	r0, 8003d48 <_vfiprintf_r+0x5c>
 8003d2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003d2c:	07dc      	lsls	r4, r3, #31
 8003d2e:	d504      	bpl.n	8003d3a <_vfiprintf_r+0x4e>
 8003d30:	f04f 30ff 	mov.w	r0, #4294967295
 8003d34:	b01d      	add	sp, #116	@ 0x74
 8003d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d3a:	89ab      	ldrh	r3, [r5, #12]
 8003d3c:	0598      	lsls	r0, r3, #22
 8003d3e:	d4f7      	bmi.n	8003d30 <_vfiprintf_r+0x44>
 8003d40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003d42:	f7ff feaf 	bl	8003aa4 <__retarget_lock_release_recursive>
 8003d46:	e7f3      	b.n	8003d30 <_vfiprintf_r+0x44>
 8003d48:	2300      	movs	r3, #0
 8003d4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d4c:	2320      	movs	r3, #32
 8003d4e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003d52:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d56:	2330      	movs	r3, #48	@ 0x30
 8003d58:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003f08 <_vfiprintf_r+0x21c>
 8003d5c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003d60:	f04f 0901 	mov.w	r9, #1
 8003d64:	4623      	mov	r3, r4
 8003d66:	469a      	mov	sl, r3
 8003d68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d6c:	b10a      	cbz	r2, 8003d72 <_vfiprintf_r+0x86>
 8003d6e:	2a25      	cmp	r2, #37	@ 0x25
 8003d70:	d1f9      	bne.n	8003d66 <_vfiprintf_r+0x7a>
 8003d72:	ebba 0b04 	subs.w	fp, sl, r4
 8003d76:	d00b      	beq.n	8003d90 <_vfiprintf_r+0xa4>
 8003d78:	465b      	mov	r3, fp
 8003d7a:	4622      	mov	r2, r4
 8003d7c:	4629      	mov	r1, r5
 8003d7e:	4630      	mov	r0, r6
 8003d80:	f7ff ffa1 	bl	8003cc6 <__sfputs_r>
 8003d84:	3001      	adds	r0, #1
 8003d86:	f000 80a7 	beq.w	8003ed8 <_vfiprintf_r+0x1ec>
 8003d8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003d8c:	445a      	add	r2, fp
 8003d8e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003d90:	f89a 3000 	ldrb.w	r3, [sl]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 809f 	beq.w	8003ed8 <_vfiprintf_r+0x1ec>
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003da0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003da4:	f10a 0a01 	add.w	sl, sl, #1
 8003da8:	9304      	str	r3, [sp, #16]
 8003daa:	9307      	str	r3, [sp, #28]
 8003dac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003db0:	931a      	str	r3, [sp, #104]	@ 0x68
 8003db2:	4654      	mov	r4, sl
 8003db4:	2205      	movs	r2, #5
 8003db6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dba:	4853      	ldr	r0, [pc, #332]	@ (8003f08 <_vfiprintf_r+0x21c>)
 8003dbc:	f7fc fa10 	bl	80001e0 <memchr>
 8003dc0:	9a04      	ldr	r2, [sp, #16]
 8003dc2:	b9d8      	cbnz	r0, 8003dfc <_vfiprintf_r+0x110>
 8003dc4:	06d1      	lsls	r1, r2, #27
 8003dc6:	bf44      	itt	mi
 8003dc8:	2320      	movmi	r3, #32
 8003dca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003dce:	0713      	lsls	r3, r2, #28
 8003dd0:	bf44      	itt	mi
 8003dd2:	232b      	movmi	r3, #43	@ 0x2b
 8003dd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003dd8:	f89a 3000 	ldrb.w	r3, [sl]
 8003ddc:	2b2a      	cmp	r3, #42	@ 0x2a
 8003dde:	d015      	beq.n	8003e0c <_vfiprintf_r+0x120>
 8003de0:	9a07      	ldr	r2, [sp, #28]
 8003de2:	4654      	mov	r4, sl
 8003de4:	2000      	movs	r0, #0
 8003de6:	f04f 0c0a 	mov.w	ip, #10
 8003dea:	4621      	mov	r1, r4
 8003dec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003df0:	3b30      	subs	r3, #48	@ 0x30
 8003df2:	2b09      	cmp	r3, #9
 8003df4:	d94b      	bls.n	8003e8e <_vfiprintf_r+0x1a2>
 8003df6:	b1b0      	cbz	r0, 8003e26 <_vfiprintf_r+0x13a>
 8003df8:	9207      	str	r2, [sp, #28]
 8003dfa:	e014      	b.n	8003e26 <_vfiprintf_r+0x13a>
 8003dfc:	eba0 0308 	sub.w	r3, r0, r8
 8003e00:	fa09 f303 	lsl.w	r3, r9, r3
 8003e04:	4313      	orrs	r3, r2
 8003e06:	9304      	str	r3, [sp, #16]
 8003e08:	46a2      	mov	sl, r4
 8003e0a:	e7d2      	b.n	8003db2 <_vfiprintf_r+0xc6>
 8003e0c:	9b03      	ldr	r3, [sp, #12]
 8003e0e:	1d19      	adds	r1, r3, #4
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	9103      	str	r1, [sp, #12]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	bfbb      	ittet	lt
 8003e18:	425b      	neglt	r3, r3
 8003e1a:	f042 0202 	orrlt.w	r2, r2, #2
 8003e1e:	9307      	strge	r3, [sp, #28]
 8003e20:	9307      	strlt	r3, [sp, #28]
 8003e22:	bfb8      	it	lt
 8003e24:	9204      	strlt	r2, [sp, #16]
 8003e26:	7823      	ldrb	r3, [r4, #0]
 8003e28:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e2a:	d10a      	bne.n	8003e42 <_vfiprintf_r+0x156>
 8003e2c:	7863      	ldrb	r3, [r4, #1]
 8003e2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e30:	d132      	bne.n	8003e98 <_vfiprintf_r+0x1ac>
 8003e32:	9b03      	ldr	r3, [sp, #12]
 8003e34:	1d1a      	adds	r2, r3, #4
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	9203      	str	r2, [sp, #12]
 8003e3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003e3e:	3402      	adds	r4, #2
 8003e40:	9305      	str	r3, [sp, #20]
 8003e42:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003f18 <_vfiprintf_r+0x22c>
 8003e46:	7821      	ldrb	r1, [r4, #0]
 8003e48:	2203      	movs	r2, #3
 8003e4a:	4650      	mov	r0, sl
 8003e4c:	f7fc f9c8 	bl	80001e0 <memchr>
 8003e50:	b138      	cbz	r0, 8003e62 <_vfiprintf_r+0x176>
 8003e52:	9b04      	ldr	r3, [sp, #16]
 8003e54:	eba0 000a 	sub.w	r0, r0, sl
 8003e58:	2240      	movs	r2, #64	@ 0x40
 8003e5a:	4082      	lsls	r2, r0
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	3401      	adds	r4, #1
 8003e60:	9304      	str	r3, [sp, #16]
 8003e62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e66:	4829      	ldr	r0, [pc, #164]	@ (8003f0c <_vfiprintf_r+0x220>)
 8003e68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003e6c:	2206      	movs	r2, #6
 8003e6e:	f7fc f9b7 	bl	80001e0 <memchr>
 8003e72:	2800      	cmp	r0, #0
 8003e74:	d03f      	beq.n	8003ef6 <_vfiprintf_r+0x20a>
 8003e76:	4b26      	ldr	r3, [pc, #152]	@ (8003f10 <_vfiprintf_r+0x224>)
 8003e78:	bb1b      	cbnz	r3, 8003ec2 <_vfiprintf_r+0x1d6>
 8003e7a:	9b03      	ldr	r3, [sp, #12]
 8003e7c:	3307      	adds	r3, #7
 8003e7e:	f023 0307 	bic.w	r3, r3, #7
 8003e82:	3308      	adds	r3, #8
 8003e84:	9303      	str	r3, [sp, #12]
 8003e86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e88:	443b      	add	r3, r7
 8003e8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e8c:	e76a      	b.n	8003d64 <_vfiprintf_r+0x78>
 8003e8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e92:	460c      	mov	r4, r1
 8003e94:	2001      	movs	r0, #1
 8003e96:	e7a8      	b.n	8003dea <_vfiprintf_r+0xfe>
 8003e98:	2300      	movs	r3, #0
 8003e9a:	3401      	adds	r4, #1
 8003e9c:	9305      	str	r3, [sp, #20]
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	f04f 0c0a 	mov.w	ip, #10
 8003ea4:	4620      	mov	r0, r4
 8003ea6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003eaa:	3a30      	subs	r2, #48	@ 0x30
 8003eac:	2a09      	cmp	r2, #9
 8003eae:	d903      	bls.n	8003eb8 <_vfiprintf_r+0x1cc>
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0c6      	beq.n	8003e42 <_vfiprintf_r+0x156>
 8003eb4:	9105      	str	r1, [sp, #20]
 8003eb6:	e7c4      	b.n	8003e42 <_vfiprintf_r+0x156>
 8003eb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ebc:	4604      	mov	r4, r0
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e7f0      	b.n	8003ea4 <_vfiprintf_r+0x1b8>
 8003ec2:	ab03      	add	r3, sp, #12
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	462a      	mov	r2, r5
 8003ec8:	4b12      	ldr	r3, [pc, #72]	@ (8003f14 <_vfiprintf_r+0x228>)
 8003eca:	a904      	add	r1, sp, #16
 8003ecc:	4630      	mov	r0, r6
 8003ece:	f3af 8000 	nop.w
 8003ed2:	4607      	mov	r7, r0
 8003ed4:	1c78      	adds	r0, r7, #1
 8003ed6:	d1d6      	bne.n	8003e86 <_vfiprintf_r+0x19a>
 8003ed8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003eda:	07d9      	lsls	r1, r3, #31
 8003edc:	d405      	bmi.n	8003eea <_vfiprintf_r+0x1fe>
 8003ede:	89ab      	ldrh	r3, [r5, #12]
 8003ee0:	059a      	lsls	r2, r3, #22
 8003ee2:	d402      	bmi.n	8003eea <_vfiprintf_r+0x1fe>
 8003ee4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003ee6:	f7ff fddd 	bl	8003aa4 <__retarget_lock_release_recursive>
 8003eea:	89ab      	ldrh	r3, [r5, #12]
 8003eec:	065b      	lsls	r3, r3, #25
 8003eee:	f53f af1f 	bmi.w	8003d30 <_vfiprintf_r+0x44>
 8003ef2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003ef4:	e71e      	b.n	8003d34 <_vfiprintf_r+0x48>
 8003ef6:	ab03      	add	r3, sp, #12
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	462a      	mov	r2, r5
 8003efc:	4b05      	ldr	r3, [pc, #20]	@ (8003f14 <_vfiprintf_r+0x228>)
 8003efe:	a904      	add	r1, sp, #16
 8003f00:	4630      	mov	r0, r6
 8003f02:	f000 f879 	bl	8003ff8 <_printf_i>
 8003f06:	e7e4      	b.n	8003ed2 <_vfiprintf_r+0x1e6>
 8003f08:	08005720 	.word	0x08005720
 8003f0c:	0800572a 	.word	0x0800572a
 8003f10:	00000000 	.word	0x00000000
 8003f14:	08003cc7 	.word	0x08003cc7
 8003f18:	08005726 	.word	0x08005726

08003f1c <_printf_common>:
 8003f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f20:	4616      	mov	r6, r2
 8003f22:	4698      	mov	r8, r3
 8003f24:	688a      	ldr	r2, [r1, #8]
 8003f26:	690b      	ldr	r3, [r1, #16]
 8003f28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	bfb8      	it	lt
 8003f30:	4613      	movlt	r3, r2
 8003f32:	6033      	str	r3, [r6, #0]
 8003f34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003f38:	4607      	mov	r7, r0
 8003f3a:	460c      	mov	r4, r1
 8003f3c:	b10a      	cbz	r2, 8003f42 <_printf_common+0x26>
 8003f3e:	3301      	adds	r3, #1
 8003f40:	6033      	str	r3, [r6, #0]
 8003f42:	6823      	ldr	r3, [r4, #0]
 8003f44:	0699      	lsls	r1, r3, #26
 8003f46:	bf42      	ittt	mi
 8003f48:	6833      	ldrmi	r3, [r6, #0]
 8003f4a:	3302      	addmi	r3, #2
 8003f4c:	6033      	strmi	r3, [r6, #0]
 8003f4e:	6825      	ldr	r5, [r4, #0]
 8003f50:	f015 0506 	ands.w	r5, r5, #6
 8003f54:	d106      	bne.n	8003f64 <_printf_common+0x48>
 8003f56:	f104 0a19 	add.w	sl, r4, #25
 8003f5a:	68e3      	ldr	r3, [r4, #12]
 8003f5c:	6832      	ldr	r2, [r6, #0]
 8003f5e:	1a9b      	subs	r3, r3, r2
 8003f60:	42ab      	cmp	r3, r5
 8003f62:	dc26      	bgt.n	8003fb2 <_printf_common+0x96>
 8003f64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003f68:	6822      	ldr	r2, [r4, #0]
 8003f6a:	3b00      	subs	r3, #0
 8003f6c:	bf18      	it	ne
 8003f6e:	2301      	movne	r3, #1
 8003f70:	0692      	lsls	r2, r2, #26
 8003f72:	d42b      	bmi.n	8003fcc <_printf_common+0xb0>
 8003f74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003f78:	4641      	mov	r1, r8
 8003f7a:	4638      	mov	r0, r7
 8003f7c:	47c8      	blx	r9
 8003f7e:	3001      	adds	r0, #1
 8003f80:	d01e      	beq.n	8003fc0 <_printf_common+0xa4>
 8003f82:	6823      	ldr	r3, [r4, #0]
 8003f84:	6922      	ldr	r2, [r4, #16]
 8003f86:	f003 0306 	and.w	r3, r3, #6
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	bf02      	ittt	eq
 8003f8e:	68e5      	ldreq	r5, [r4, #12]
 8003f90:	6833      	ldreq	r3, [r6, #0]
 8003f92:	1aed      	subeq	r5, r5, r3
 8003f94:	68a3      	ldr	r3, [r4, #8]
 8003f96:	bf0c      	ite	eq
 8003f98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f9c:	2500      	movne	r5, #0
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	bfc4      	itt	gt
 8003fa2:	1a9b      	subgt	r3, r3, r2
 8003fa4:	18ed      	addgt	r5, r5, r3
 8003fa6:	2600      	movs	r6, #0
 8003fa8:	341a      	adds	r4, #26
 8003faa:	42b5      	cmp	r5, r6
 8003fac:	d11a      	bne.n	8003fe4 <_printf_common+0xc8>
 8003fae:	2000      	movs	r0, #0
 8003fb0:	e008      	b.n	8003fc4 <_printf_common+0xa8>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	4652      	mov	r2, sl
 8003fb6:	4641      	mov	r1, r8
 8003fb8:	4638      	mov	r0, r7
 8003fba:	47c8      	blx	r9
 8003fbc:	3001      	adds	r0, #1
 8003fbe:	d103      	bne.n	8003fc8 <_printf_common+0xac>
 8003fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fc8:	3501      	adds	r5, #1
 8003fca:	e7c6      	b.n	8003f5a <_printf_common+0x3e>
 8003fcc:	18e1      	adds	r1, r4, r3
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	2030      	movs	r0, #48	@ 0x30
 8003fd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003fd6:	4422      	add	r2, r4
 8003fd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003fdc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003fe0:	3302      	adds	r3, #2
 8003fe2:	e7c7      	b.n	8003f74 <_printf_common+0x58>
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	4622      	mov	r2, r4
 8003fe8:	4641      	mov	r1, r8
 8003fea:	4638      	mov	r0, r7
 8003fec:	47c8      	blx	r9
 8003fee:	3001      	adds	r0, #1
 8003ff0:	d0e6      	beq.n	8003fc0 <_printf_common+0xa4>
 8003ff2:	3601      	adds	r6, #1
 8003ff4:	e7d9      	b.n	8003faa <_printf_common+0x8e>
	...

08003ff8 <_printf_i>:
 8003ff8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ffc:	7e0f      	ldrb	r7, [r1, #24]
 8003ffe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004000:	2f78      	cmp	r7, #120	@ 0x78
 8004002:	4691      	mov	r9, r2
 8004004:	4680      	mov	r8, r0
 8004006:	460c      	mov	r4, r1
 8004008:	469a      	mov	sl, r3
 800400a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800400e:	d807      	bhi.n	8004020 <_printf_i+0x28>
 8004010:	2f62      	cmp	r7, #98	@ 0x62
 8004012:	d80a      	bhi.n	800402a <_printf_i+0x32>
 8004014:	2f00      	cmp	r7, #0
 8004016:	f000 80d2 	beq.w	80041be <_printf_i+0x1c6>
 800401a:	2f58      	cmp	r7, #88	@ 0x58
 800401c:	f000 80b9 	beq.w	8004192 <_printf_i+0x19a>
 8004020:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004024:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004028:	e03a      	b.n	80040a0 <_printf_i+0xa8>
 800402a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800402e:	2b15      	cmp	r3, #21
 8004030:	d8f6      	bhi.n	8004020 <_printf_i+0x28>
 8004032:	a101      	add	r1, pc, #4	@ (adr r1, 8004038 <_printf_i+0x40>)
 8004034:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004038:	08004091 	.word	0x08004091
 800403c:	080040a5 	.word	0x080040a5
 8004040:	08004021 	.word	0x08004021
 8004044:	08004021 	.word	0x08004021
 8004048:	08004021 	.word	0x08004021
 800404c:	08004021 	.word	0x08004021
 8004050:	080040a5 	.word	0x080040a5
 8004054:	08004021 	.word	0x08004021
 8004058:	08004021 	.word	0x08004021
 800405c:	08004021 	.word	0x08004021
 8004060:	08004021 	.word	0x08004021
 8004064:	080041a5 	.word	0x080041a5
 8004068:	080040cf 	.word	0x080040cf
 800406c:	0800415f 	.word	0x0800415f
 8004070:	08004021 	.word	0x08004021
 8004074:	08004021 	.word	0x08004021
 8004078:	080041c7 	.word	0x080041c7
 800407c:	08004021 	.word	0x08004021
 8004080:	080040cf 	.word	0x080040cf
 8004084:	08004021 	.word	0x08004021
 8004088:	08004021 	.word	0x08004021
 800408c:	08004167 	.word	0x08004167
 8004090:	6833      	ldr	r3, [r6, #0]
 8004092:	1d1a      	adds	r2, r3, #4
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6032      	str	r2, [r6, #0]
 8004098:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800409c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80040a0:	2301      	movs	r3, #1
 80040a2:	e09d      	b.n	80041e0 <_printf_i+0x1e8>
 80040a4:	6833      	ldr	r3, [r6, #0]
 80040a6:	6820      	ldr	r0, [r4, #0]
 80040a8:	1d19      	adds	r1, r3, #4
 80040aa:	6031      	str	r1, [r6, #0]
 80040ac:	0606      	lsls	r6, r0, #24
 80040ae:	d501      	bpl.n	80040b4 <_printf_i+0xbc>
 80040b0:	681d      	ldr	r5, [r3, #0]
 80040b2:	e003      	b.n	80040bc <_printf_i+0xc4>
 80040b4:	0645      	lsls	r5, r0, #25
 80040b6:	d5fb      	bpl.n	80040b0 <_printf_i+0xb8>
 80040b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80040bc:	2d00      	cmp	r5, #0
 80040be:	da03      	bge.n	80040c8 <_printf_i+0xd0>
 80040c0:	232d      	movs	r3, #45	@ 0x2d
 80040c2:	426d      	negs	r5, r5
 80040c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040c8:	4859      	ldr	r0, [pc, #356]	@ (8004230 <_printf_i+0x238>)
 80040ca:	230a      	movs	r3, #10
 80040cc:	e011      	b.n	80040f2 <_printf_i+0xfa>
 80040ce:	6821      	ldr	r1, [r4, #0]
 80040d0:	6833      	ldr	r3, [r6, #0]
 80040d2:	0608      	lsls	r0, r1, #24
 80040d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80040d8:	d402      	bmi.n	80040e0 <_printf_i+0xe8>
 80040da:	0649      	lsls	r1, r1, #25
 80040dc:	bf48      	it	mi
 80040de:	b2ad      	uxthmi	r5, r5
 80040e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80040e2:	4853      	ldr	r0, [pc, #332]	@ (8004230 <_printf_i+0x238>)
 80040e4:	6033      	str	r3, [r6, #0]
 80040e6:	bf14      	ite	ne
 80040e8:	230a      	movne	r3, #10
 80040ea:	2308      	moveq	r3, #8
 80040ec:	2100      	movs	r1, #0
 80040ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80040f2:	6866      	ldr	r6, [r4, #4]
 80040f4:	60a6      	str	r6, [r4, #8]
 80040f6:	2e00      	cmp	r6, #0
 80040f8:	bfa2      	ittt	ge
 80040fa:	6821      	ldrge	r1, [r4, #0]
 80040fc:	f021 0104 	bicge.w	r1, r1, #4
 8004100:	6021      	strge	r1, [r4, #0]
 8004102:	b90d      	cbnz	r5, 8004108 <_printf_i+0x110>
 8004104:	2e00      	cmp	r6, #0
 8004106:	d04b      	beq.n	80041a0 <_printf_i+0x1a8>
 8004108:	4616      	mov	r6, r2
 800410a:	fbb5 f1f3 	udiv	r1, r5, r3
 800410e:	fb03 5711 	mls	r7, r3, r1, r5
 8004112:	5dc7      	ldrb	r7, [r0, r7]
 8004114:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004118:	462f      	mov	r7, r5
 800411a:	42bb      	cmp	r3, r7
 800411c:	460d      	mov	r5, r1
 800411e:	d9f4      	bls.n	800410a <_printf_i+0x112>
 8004120:	2b08      	cmp	r3, #8
 8004122:	d10b      	bne.n	800413c <_printf_i+0x144>
 8004124:	6823      	ldr	r3, [r4, #0]
 8004126:	07df      	lsls	r7, r3, #31
 8004128:	d508      	bpl.n	800413c <_printf_i+0x144>
 800412a:	6923      	ldr	r3, [r4, #16]
 800412c:	6861      	ldr	r1, [r4, #4]
 800412e:	4299      	cmp	r1, r3
 8004130:	bfde      	ittt	le
 8004132:	2330      	movle	r3, #48	@ 0x30
 8004134:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004138:	f106 36ff 	addle.w	r6, r6, #4294967295
 800413c:	1b92      	subs	r2, r2, r6
 800413e:	6122      	str	r2, [r4, #16]
 8004140:	f8cd a000 	str.w	sl, [sp]
 8004144:	464b      	mov	r3, r9
 8004146:	aa03      	add	r2, sp, #12
 8004148:	4621      	mov	r1, r4
 800414a:	4640      	mov	r0, r8
 800414c:	f7ff fee6 	bl	8003f1c <_printf_common>
 8004150:	3001      	adds	r0, #1
 8004152:	d14a      	bne.n	80041ea <_printf_i+0x1f2>
 8004154:	f04f 30ff 	mov.w	r0, #4294967295
 8004158:	b004      	add	sp, #16
 800415a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800415e:	6823      	ldr	r3, [r4, #0]
 8004160:	f043 0320 	orr.w	r3, r3, #32
 8004164:	6023      	str	r3, [r4, #0]
 8004166:	4833      	ldr	r0, [pc, #204]	@ (8004234 <_printf_i+0x23c>)
 8004168:	2778      	movs	r7, #120	@ 0x78
 800416a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800416e:	6823      	ldr	r3, [r4, #0]
 8004170:	6831      	ldr	r1, [r6, #0]
 8004172:	061f      	lsls	r7, r3, #24
 8004174:	f851 5b04 	ldr.w	r5, [r1], #4
 8004178:	d402      	bmi.n	8004180 <_printf_i+0x188>
 800417a:	065f      	lsls	r7, r3, #25
 800417c:	bf48      	it	mi
 800417e:	b2ad      	uxthmi	r5, r5
 8004180:	6031      	str	r1, [r6, #0]
 8004182:	07d9      	lsls	r1, r3, #31
 8004184:	bf44      	itt	mi
 8004186:	f043 0320 	orrmi.w	r3, r3, #32
 800418a:	6023      	strmi	r3, [r4, #0]
 800418c:	b11d      	cbz	r5, 8004196 <_printf_i+0x19e>
 800418e:	2310      	movs	r3, #16
 8004190:	e7ac      	b.n	80040ec <_printf_i+0xf4>
 8004192:	4827      	ldr	r0, [pc, #156]	@ (8004230 <_printf_i+0x238>)
 8004194:	e7e9      	b.n	800416a <_printf_i+0x172>
 8004196:	6823      	ldr	r3, [r4, #0]
 8004198:	f023 0320 	bic.w	r3, r3, #32
 800419c:	6023      	str	r3, [r4, #0]
 800419e:	e7f6      	b.n	800418e <_printf_i+0x196>
 80041a0:	4616      	mov	r6, r2
 80041a2:	e7bd      	b.n	8004120 <_printf_i+0x128>
 80041a4:	6833      	ldr	r3, [r6, #0]
 80041a6:	6825      	ldr	r5, [r4, #0]
 80041a8:	6961      	ldr	r1, [r4, #20]
 80041aa:	1d18      	adds	r0, r3, #4
 80041ac:	6030      	str	r0, [r6, #0]
 80041ae:	062e      	lsls	r6, r5, #24
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	d501      	bpl.n	80041b8 <_printf_i+0x1c0>
 80041b4:	6019      	str	r1, [r3, #0]
 80041b6:	e002      	b.n	80041be <_printf_i+0x1c6>
 80041b8:	0668      	lsls	r0, r5, #25
 80041ba:	d5fb      	bpl.n	80041b4 <_printf_i+0x1bc>
 80041bc:	8019      	strh	r1, [r3, #0]
 80041be:	2300      	movs	r3, #0
 80041c0:	6123      	str	r3, [r4, #16]
 80041c2:	4616      	mov	r6, r2
 80041c4:	e7bc      	b.n	8004140 <_printf_i+0x148>
 80041c6:	6833      	ldr	r3, [r6, #0]
 80041c8:	1d1a      	adds	r2, r3, #4
 80041ca:	6032      	str	r2, [r6, #0]
 80041cc:	681e      	ldr	r6, [r3, #0]
 80041ce:	6862      	ldr	r2, [r4, #4]
 80041d0:	2100      	movs	r1, #0
 80041d2:	4630      	mov	r0, r6
 80041d4:	f7fc f804 	bl	80001e0 <memchr>
 80041d8:	b108      	cbz	r0, 80041de <_printf_i+0x1e6>
 80041da:	1b80      	subs	r0, r0, r6
 80041dc:	6060      	str	r0, [r4, #4]
 80041de:	6863      	ldr	r3, [r4, #4]
 80041e0:	6123      	str	r3, [r4, #16]
 80041e2:	2300      	movs	r3, #0
 80041e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041e8:	e7aa      	b.n	8004140 <_printf_i+0x148>
 80041ea:	6923      	ldr	r3, [r4, #16]
 80041ec:	4632      	mov	r2, r6
 80041ee:	4649      	mov	r1, r9
 80041f0:	4640      	mov	r0, r8
 80041f2:	47d0      	blx	sl
 80041f4:	3001      	adds	r0, #1
 80041f6:	d0ad      	beq.n	8004154 <_printf_i+0x15c>
 80041f8:	6823      	ldr	r3, [r4, #0]
 80041fa:	079b      	lsls	r3, r3, #30
 80041fc:	d413      	bmi.n	8004226 <_printf_i+0x22e>
 80041fe:	68e0      	ldr	r0, [r4, #12]
 8004200:	9b03      	ldr	r3, [sp, #12]
 8004202:	4298      	cmp	r0, r3
 8004204:	bfb8      	it	lt
 8004206:	4618      	movlt	r0, r3
 8004208:	e7a6      	b.n	8004158 <_printf_i+0x160>
 800420a:	2301      	movs	r3, #1
 800420c:	4632      	mov	r2, r6
 800420e:	4649      	mov	r1, r9
 8004210:	4640      	mov	r0, r8
 8004212:	47d0      	blx	sl
 8004214:	3001      	adds	r0, #1
 8004216:	d09d      	beq.n	8004154 <_printf_i+0x15c>
 8004218:	3501      	adds	r5, #1
 800421a:	68e3      	ldr	r3, [r4, #12]
 800421c:	9903      	ldr	r1, [sp, #12]
 800421e:	1a5b      	subs	r3, r3, r1
 8004220:	42ab      	cmp	r3, r5
 8004222:	dcf2      	bgt.n	800420a <_printf_i+0x212>
 8004224:	e7eb      	b.n	80041fe <_printf_i+0x206>
 8004226:	2500      	movs	r5, #0
 8004228:	f104 0619 	add.w	r6, r4, #25
 800422c:	e7f5      	b.n	800421a <_printf_i+0x222>
 800422e:	bf00      	nop
 8004230:	08005731 	.word	0x08005731
 8004234:	08005742 	.word	0x08005742

08004238 <__sflush_r>:
 8004238:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800423c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004240:	0716      	lsls	r6, r2, #28
 8004242:	4605      	mov	r5, r0
 8004244:	460c      	mov	r4, r1
 8004246:	d454      	bmi.n	80042f2 <__sflush_r+0xba>
 8004248:	684b      	ldr	r3, [r1, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	dc02      	bgt.n	8004254 <__sflush_r+0x1c>
 800424e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004250:	2b00      	cmp	r3, #0
 8004252:	dd48      	ble.n	80042e6 <__sflush_r+0xae>
 8004254:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004256:	2e00      	cmp	r6, #0
 8004258:	d045      	beq.n	80042e6 <__sflush_r+0xae>
 800425a:	2300      	movs	r3, #0
 800425c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004260:	682f      	ldr	r7, [r5, #0]
 8004262:	6a21      	ldr	r1, [r4, #32]
 8004264:	602b      	str	r3, [r5, #0]
 8004266:	d030      	beq.n	80042ca <__sflush_r+0x92>
 8004268:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800426a:	89a3      	ldrh	r3, [r4, #12]
 800426c:	0759      	lsls	r1, r3, #29
 800426e:	d505      	bpl.n	800427c <__sflush_r+0x44>
 8004270:	6863      	ldr	r3, [r4, #4]
 8004272:	1ad2      	subs	r2, r2, r3
 8004274:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004276:	b10b      	cbz	r3, 800427c <__sflush_r+0x44>
 8004278:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800427a:	1ad2      	subs	r2, r2, r3
 800427c:	2300      	movs	r3, #0
 800427e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004280:	6a21      	ldr	r1, [r4, #32]
 8004282:	4628      	mov	r0, r5
 8004284:	47b0      	blx	r6
 8004286:	1c43      	adds	r3, r0, #1
 8004288:	89a3      	ldrh	r3, [r4, #12]
 800428a:	d106      	bne.n	800429a <__sflush_r+0x62>
 800428c:	6829      	ldr	r1, [r5, #0]
 800428e:	291d      	cmp	r1, #29
 8004290:	d82b      	bhi.n	80042ea <__sflush_r+0xb2>
 8004292:	4a2a      	ldr	r2, [pc, #168]	@ (800433c <__sflush_r+0x104>)
 8004294:	410a      	asrs	r2, r1
 8004296:	07d6      	lsls	r6, r2, #31
 8004298:	d427      	bmi.n	80042ea <__sflush_r+0xb2>
 800429a:	2200      	movs	r2, #0
 800429c:	6062      	str	r2, [r4, #4]
 800429e:	04d9      	lsls	r1, r3, #19
 80042a0:	6922      	ldr	r2, [r4, #16]
 80042a2:	6022      	str	r2, [r4, #0]
 80042a4:	d504      	bpl.n	80042b0 <__sflush_r+0x78>
 80042a6:	1c42      	adds	r2, r0, #1
 80042a8:	d101      	bne.n	80042ae <__sflush_r+0x76>
 80042aa:	682b      	ldr	r3, [r5, #0]
 80042ac:	b903      	cbnz	r3, 80042b0 <__sflush_r+0x78>
 80042ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80042b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80042b2:	602f      	str	r7, [r5, #0]
 80042b4:	b1b9      	cbz	r1, 80042e6 <__sflush_r+0xae>
 80042b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80042ba:	4299      	cmp	r1, r3
 80042bc:	d002      	beq.n	80042c4 <__sflush_r+0x8c>
 80042be:	4628      	mov	r0, r5
 80042c0:	f7ff fbf2 	bl	8003aa8 <_free_r>
 80042c4:	2300      	movs	r3, #0
 80042c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80042c8:	e00d      	b.n	80042e6 <__sflush_r+0xae>
 80042ca:	2301      	movs	r3, #1
 80042cc:	4628      	mov	r0, r5
 80042ce:	47b0      	blx	r6
 80042d0:	4602      	mov	r2, r0
 80042d2:	1c50      	adds	r0, r2, #1
 80042d4:	d1c9      	bne.n	800426a <__sflush_r+0x32>
 80042d6:	682b      	ldr	r3, [r5, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d0c6      	beq.n	800426a <__sflush_r+0x32>
 80042dc:	2b1d      	cmp	r3, #29
 80042de:	d001      	beq.n	80042e4 <__sflush_r+0xac>
 80042e0:	2b16      	cmp	r3, #22
 80042e2:	d11e      	bne.n	8004322 <__sflush_r+0xea>
 80042e4:	602f      	str	r7, [r5, #0]
 80042e6:	2000      	movs	r0, #0
 80042e8:	e022      	b.n	8004330 <__sflush_r+0xf8>
 80042ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042ee:	b21b      	sxth	r3, r3
 80042f0:	e01b      	b.n	800432a <__sflush_r+0xf2>
 80042f2:	690f      	ldr	r7, [r1, #16]
 80042f4:	2f00      	cmp	r7, #0
 80042f6:	d0f6      	beq.n	80042e6 <__sflush_r+0xae>
 80042f8:	0793      	lsls	r3, r2, #30
 80042fa:	680e      	ldr	r6, [r1, #0]
 80042fc:	bf08      	it	eq
 80042fe:	694b      	ldreq	r3, [r1, #20]
 8004300:	600f      	str	r7, [r1, #0]
 8004302:	bf18      	it	ne
 8004304:	2300      	movne	r3, #0
 8004306:	eba6 0807 	sub.w	r8, r6, r7
 800430a:	608b      	str	r3, [r1, #8]
 800430c:	f1b8 0f00 	cmp.w	r8, #0
 8004310:	dde9      	ble.n	80042e6 <__sflush_r+0xae>
 8004312:	6a21      	ldr	r1, [r4, #32]
 8004314:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004316:	4643      	mov	r3, r8
 8004318:	463a      	mov	r2, r7
 800431a:	4628      	mov	r0, r5
 800431c:	47b0      	blx	r6
 800431e:	2800      	cmp	r0, #0
 8004320:	dc08      	bgt.n	8004334 <__sflush_r+0xfc>
 8004322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004326:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800432a:	81a3      	strh	r3, [r4, #12]
 800432c:	f04f 30ff 	mov.w	r0, #4294967295
 8004330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004334:	4407      	add	r7, r0
 8004336:	eba8 0800 	sub.w	r8, r8, r0
 800433a:	e7e7      	b.n	800430c <__sflush_r+0xd4>
 800433c:	dfbffffe 	.word	0xdfbffffe

08004340 <_fflush_r>:
 8004340:	b538      	push	{r3, r4, r5, lr}
 8004342:	690b      	ldr	r3, [r1, #16]
 8004344:	4605      	mov	r5, r0
 8004346:	460c      	mov	r4, r1
 8004348:	b913      	cbnz	r3, 8004350 <_fflush_r+0x10>
 800434a:	2500      	movs	r5, #0
 800434c:	4628      	mov	r0, r5
 800434e:	bd38      	pop	{r3, r4, r5, pc}
 8004350:	b118      	cbz	r0, 800435a <_fflush_r+0x1a>
 8004352:	6a03      	ldr	r3, [r0, #32]
 8004354:	b90b      	cbnz	r3, 800435a <_fflush_r+0x1a>
 8004356:	f7ff fa9f 	bl	8003898 <__sinit>
 800435a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0f3      	beq.n	800434a <_fflush_r+0xa>
 8004362:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004364:	07d0      	lsls	r0, r2, #31
 8004366:	d404      	bmi.n	8004372 <_fflush_r+0x32>
 8004368:	0599      	lsls	r1, r3, #22
 800436a:	d402      	bmi.n	8004372 <_fflush_r+0x32>
 800436c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800436e:	f7ff fb98 	bl	8003aa2 <__retarget_lock_acquire_recursive>
 8004372:	4628      	mov	r0, r5
 8004374:	4621      	mov	r1, r4
 8004376:	f7ff ff5f 	bl	8004238 <__sflush_r>
 800437a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800437c:	07da      	lsls	r2, r3, #31
 800437e:	4605      	mov	r5, r0
 8004380:	d4e4      	bmi.n	800434c <_fflush_r+0xc>
 8004382:	89a3      	ldrh	r3, [r4, #12]
 8004384:	059b      	lsls	r3, r3, #22
 8004386:	d4e1      	bmi.n	800434c <_fflush_r+0xc>
 8004388:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800438a:	f7ff fb8b 	bl	8003aa4 <__retarget_lock_release_recursive>
 800438e:	e7dd      	b.n	800434c <_fflush_r+0xc>

08004390 <__swbuf_r>:
 8004390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004392:	460e      	mov	r6, r1
 8004394:	4614      	mov	r4, r2
 8004396:	4605      	mov	r5, r0
 8004398:	b118      	cbz	r0, 80043a2 <__swbuf_r+0x12>
 800439a:	6a03      	ldr	r3, [r0, #32]
 800439c:	b90b      	cbnz	r3, 80043a2 <__swbuf_r+0x12>
 800439e:	f7ff fa7b 	bl	8003898 <__sinit>
 80043a2:	69a3      	ldr	r3, [r4, #24]
 80043a4:	60a3      	str	r3, [r4, #8]
 80043a6:	89a3      	ldrh	r3, [r4, #12]
 80043a8:	071a      	lsls	r2, r3, #28
 80043aa:	d501      	bpl.n	80043b0 <__swbuf_r+0x20>
 80043ac:	6923      	ldr	r3, [r4, #16]
 80043ae:	b943      	cbnz	r3, 80043c2 <__swbuf_r+0x32>
 80043b0:	4621      	mov	r1, r4
 80043b2:	4628      	mov	r0, r5
 80043b4:	f000 f82a 	bl	800440c <__swsetup_r>
 80043b8:	b118      	cbz	r0, 80043c2 <__swbuf_r+0x32>
 80043ba:	f04f 37ff 	mov.w	r7, #4294967295
 80043be:	4638      	mov	r0, r7
 80043c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	6922      	ldr	r2, [r4, #16]
 80043c6:	1a98      	subs	r0, r3, r2
 80043c8:	6963      	ldr	r3, [r4, #20]
 80043ca:	b2f6      	uxtb	r6, r6
 80043cc:	4283      	cmp	r3, r0
 80043ce:	4637      	mov	r7, r6
 80043d0:	dc05      	bgt.n	80043de <__swbuf_r+0x4e>
 80043d2:	4621      	mov	r1, r4
 80043d4:	4628      	mov	r0, r5
 80043d6:	f7ff ffb3 	bl	8004340 <_fflush_r>
 80043da:	2800      	cmp	r0, #0
 80043dc:	d1ed      	bne.n	80043ba <__swbuf_r+0x2a>
 80043de:	68a3      	ldr	r3, [r4, #8]
 80043e0:	3b01      	subs	r3, #1
 80043e2:	60a3      	str	r3, [r4, #8]
 80043e4:	6823      	ldr	r3, [r4, #0]
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	6022      	str	r2, [r4, #0]
 80043ea:	701e      	strb	r6, [r3, #0]
 80043ec:	6962      	ldr	r2, [r4, #20]
 80043ee:	1c43      	adds	r3, r0, #1
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d004      	beq.n	80043fe <__swbuf_r+0x6e>
 80043f4:	89a3      	ldrh	r3, [r4, #12]
 80043f6:	07db      	lsls	r3, r3, #31
 80043f8:	d5e1      	bpl.n	80043be <__swbuf_r+0x2e>
 80043fa:	2e0a      	cmp	r6, #10
 80043fc:	d1df      	bne.n	80043be <__swbuf_r+0x2e>
 80043fe:	4621      	mov	r1, r4
 8004400:	4628      	mov	r0, r5
 8004402:	f7ff ff9d 	bl	8004340 <_fflush_r>
 8004406:	2800      	cmp	r0, #0
 8004408:	d0d9      	beq.n	80043be <__swbuf_r+0x2e>
 800440a:	e7d6      	b.n	80043ba <__swbuf_r+0x2a>

0800440c <__swsetup_r>:
 800440c:	b538      	push	{r3, r4, r5, lr}
 800440e:	4b29      	ldr	r3, [pc, #164]	@ (80044b4 <__swsetup_r+0xa8>)
 8004410:	4605      	mov	r5, r0
 8004412:	6818      	ldr	r0, [r3, #0]
 8004414:	460c      	mov	r4, r1
 8004416:	b118      	cbz	r0, 8004420 <__swsetup_r+0x14>
 8004418:	6a03      	ldr	r3, [r0, #32]
 800441a:	b90b      	cbnz	r3, 8004420 <__swsetup_r+0x14>
 800441c:	f7ff fa3c 	bl	8003898 <__sinit>
 8004420:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004424:	0719      	lsls	r1, r3, #28
 8004426:	d422      	bmi.n	800446e <__swsetup_r+0x62>
 8004428:	06da      	lsls	r2, r3, #27
 800442a:	d407      	bmi.n	800443c <__swsetup_r+0x30>
 800442c:	2209      	movs	r2, #9
 800442e:	602a      	str	r2, [r5, #0]
 8004430:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004434:	81a3      	strh	r3, [r4, #12]
 8004436:	f04f 30ff 	mov.w	r0, #4294967295
 800443a:	e033      	b.n	80044a4 <__swsetup_r+0x98>
 800443c:	0758      	lsls	r0, r3, #29
 800443e:	d512      	bpl.n	8004466 <__swsetup_r+0x5a>
 8004440:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004442:	b141      	cbz	r1, 8004456 <__swsetup_r+0x4a>
 8004444:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004448:	4299      	cmp	r1, r3
 800444a:	d002      	beq.n	8004452 <__swsetup_r+0x46>
 800444c:	4628      	mov	r0, r5
 800444e:	f7ff fb2b 	bl	8003aa8 <_free_r>
 8004452:	2300      	movs	r3, #0
 8004454:	6363      	str	r3, [r4, #52]	@ 0x34
 8004456:	89a3      	ldrh	r3, [r4, #12]
 8004458:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800445c:	81a3      	strh	r3, [r4, #12]
 800445e:	2300      	movs	r3, #0
 8004460:	6063      	str	r3, [r4, #4]
 8004462:	6923      	ldr	r3, [r4, #16]
 8004464:	6023      	str	r3, [r4, #0]
 8004466:	89a3      	ldrh	r3, [r4, #12]
 8004468:	f043 0308 	orr.w	r3, r3, #8
 800446c:	81a3      	strh	r3, [r4, #12]
 800446e:	6923      	ldr	r3, [r4, #16]
 8004470:	b94b      	cbnz	r3, 8004486 <__swsetup_r+0x7a>
 8004472:	89a3      	ldrh	r3, [r4, #12]
 8004474:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004478:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800447c:	d003      	beq.n	8004486 <__swsetup_r+0x7a>
 800447e:	4621      	mov	r1, r4
 8004480:	4628      	mov	r0, r5
 8004482:	f000 f84f 	bl	8004524 <__smakebuf_r>
 8004486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800448a:	f013 0201 	ands.w	r2, r3, #1
 800448e:	d00a      	beq.n	80044a6 <__swsetup_r+0x9a>
 8004490:	2200      	movs	r2, #0
 8004492:	60a2      	str	r2, [r4, #8]
 8004494:	6962      	ldr	r2, [r4, #20]
 8004496:	4252      	negs	r2, r2
 8004498:	61a2      	str	r2, [r4, #24]
 800449a:	6922      	ldr	r2, [r4, #16]
 800449c:	b942      	cbnz	r2, 80044b0 <__swsetup_r+0xa4>
 800449e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80044a2:	d1c5      	bne.n	8004430 <__swsetup_r+0x24>
 80044a4:	bd38      	pop	{r3, r4, r5, pc}
 80044a6:	0799      	lsls	r1, r3, #30
 80044a8:	bf58      	it	pl
 80044aa:	6962      	ldrpl	r2, [r4, #20]
 80044ac:	60a2      	str	r2, [r4, #8]
 80044ae:	e7f4      	b.n	800449a <__swsetup_r+0x8e>
 80044b0:	2000      	movs	r0, #0
 80044b2:	e7f7      	b.n	80044a4 <__swsetup_r+0x98>
 80044b4:	2000001c 	.word	0x2000001c

080044b8 <_sbrk_r>:
 80044b8:	b538      	push	{r3, r4, r5, lr}
 80044ba:	4d06      	ldr	r5, [pc, #24]	@ (80044d4 <_sbrk_r+0x1c>)
 80044bc:	2300      	movs	r3, #0
 80044be:	4604      	mov	r4, r0
 80044c0:	4608      	mov	r0, r1
 80044c2:	602b      	str	r3, [r5, #0]
 80044c4:	f7fc ffca 	bl	800145c <_sbrk>
 80044c8:	1c43      	adds	r3, r0, #1
 80044ca:	d102      	bne.n	80044d2 <_sbrk_r+0x1a>
 80044cc:	682b      	ldr	r3, [r5, #0]
 80044ce:	b103      	cbz	r3, 80044d2 <_sbrk_r+0x1a>
 80044d0:	6023      	str	r3, [r4, #0]
 80044d2:	bd38      	pop	{r3, r4, r5, pc}
 80044d4:	2000028c 	.word	0x2000028c

080044d8 <__swhatbuf_r>:
 80044d8:	b570      	push	{r4, r5, r6, lr}
 80044da:	460c      	mov	r4, r1
 80044dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044e0:	2900      	cmp	r1, #0
 80044e2:	b096      	sub	sp, #88	@ 0x58
 80044e4:	4615      	mov	r5, r2
 80044e6:	461e      	mov	r6, r3
 80044e8:	da0d      	bge.n	8004506 <__swhatbuf_r+0x2e>
 80044ea:	89a3      	ldrh	r3, [r4, #12]
 80044ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80044f0:	f04f 0100 	mov.w	r1, #0
 80044f4:	bf14      	ite	ne
 80044f6:	2340      	movne	r3, #64	@ 0x40
 80044f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80044fc:	2000      	movs	r0, #0
 80044fe:	6031      	str	r1, [r6, #0]
 8004500:	602b      	str	r3, [r5, #0]
 8004502:	b016      	add	sp, #88	@ 0x58
 8004504:	bd70      	pop	{r4, r5, r6, pc}
 8004506:	466a      	mov	r2, sp
 8004508:	f000 f848 	bl	800459c <_fstat_r>
 800450c:	2800      	cmp	r0, #0
 800450e:	dbec      	blt.n	80044ea <__swhatbuf_r+0x12>
 8004510:	9901      	ldr	r1, [sp, #4]
 8004512:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004516:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800451a:	4259      	negs	r1, r3
 800451c:	4159      	adcs	r1, r3
 800451e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004522:	e7eb      	b.n	80044fc <__swhatbuf_r+0x24>

08004524 <__smakebuf_r>:
 8004524:	898b      	ldrh	r3, [r1, #12]
 8004526:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004528:	079d      	lsls	r5, r3, #30
 800452a:	4606      	mov	r6, r0
 800452c:	460c      	mov	r4, r1
 800452e:	d507      	bpl.n	8004540 <__smakebuf_r+0x1c>
 8004530:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004534:	6023      	str	r3, [r4, #0]
 8004536:	6123      	str	r3, [r4, #16]
 8004538:	2301      	movs	r3, #1
 800453a:	6163      	str	r3, [r4, #20]
 800453c:	b003      	add	sp, #12
 800453e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004540:	ab01      	add	r3, sp, #4
 8004542:	466a      	mov	r2, sp
 8004544:	f7ff ffc8 	bl	80044d8 <__swhatbuf_r>
 8004548:	9f00      	ldr	r7, [sp, #0]
 800454a:	4605      	mov	r5, r0
 800454c:	4639      	mov	r1, r7
 800454e:	4630      	mov	r0, r6
 8004550:	f7ff fb16 	bl	8003b80 <_malloc_r>
 8004554:	b948      	cbnz	r0, 800456a <__smakebuf_r+0x46>
 8004556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800455a:	059a      	lsls	r2, r3, #22
 800455c:	d4ee      	bmi.n	800453c <__smakebuf_r+0x18>
 800455e:	f023 0303 	bic.w	r3, r3, #3
 8004562:	f043 0302 	orr.w	r3, r3, #2
 8004566:	81a3      	strh	r3, [r4, #12]
 8004568:	e7e2      	b.n	8004530 <__smakebuf_r+0xc>
 800456a:	89a3      	ldrh	r3, [r4, #12]
 800456c:	6020      	str	r0, [r4, #0]
 800456e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004572:	81a3      	strh	r3, [r4, #12]
 8004574:	9b01      	ldr	r3, [sp, #4]
 8004576:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800457a:	b15b      	cbz	r3, 8004594 <__smakebuf_r+0x70>
 800457c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004580:	4630      	mov	r0, r6
 8004582:	f000 f81d 	bl	80045c0 <_isatty_r>
 8004586:	b128      	cbz	r0, 8004594 <__smakebuf_r+0x70>
 8004588:	89a3      	ldrh	r3, [r4, #12]
 800458a:	f023 0303 	bic.w	r3, r3, #3
 800458e:	f043 0301 	orr.w	r3, r3, #1
 8004592:	81a3      	strh	r3, [r4, #12]
 8004594:	89a3      	ldrh	r3, [r4, #12]
 8004596:	431d      	orrs	r5, r3
 8004598:	81a5      	strh	r5, [r4, #12]
 800459a:	e7cf      	b.n	800453c <__smakebuf_r+0x18>

0800459c <_fstat_r>:
 800459c:	b538      	push	{r3, r4, r5, lr}
 800459e:	4d07      	ldr	r5, [pc, #28]	@ (80045bc <_fstat_r+0x20>)
 80045a0:	2300      	movs	r3, #0
 80045a2:	4604      	mov	r4, r0
 80045a4:	4608      	mov	r0, r1
 80045a6:	4611      	mov	r1, r2
 80045a8:	602b      	str	r3, [r5, #0]
 80045aa:	f7fc ff2e 	bl	800140a <_fstat>
 80045ae:	1c43      	adds	r3, r0, #1
 80045b0:	d102      	bne.n	80045b8 <_fstat_r+0x1c>
 80045b2:	682b      	ldr	r3, [r5, #0]
 80045b4:	b103      	cbz	r3, 80045b8 <_fstat_r+0x1c>
 80045b6:	6023      	str	r3, [r4, #0]
 80045b8:	bd38      	pop	{r3, r4, r5, pc}
 80045ba:	bf00      	nop
 80045bc:	2000028c 	.word	0x2000028c

080045c0 <_isatty_r>:
 80045c0:	b538      	push	{r3, r4, r5, lr}
 80045c2:	4d06      	ldr	r5, [pc, #24]	@ (80045dc <_isatty_r+0x1c>)
 80045c4:	2300      	movs	r3, #0
 80045c6:	4604      	mov	r4, r0
 80045c8:	4608      	mov	r0, r1
 80045ca:	602b      	str	r3, [r5, #0]
 80045cc:	f7fc ff2d 	bl	800142a <_isatty>
 80045d0:	1c43      	adds	r3, r0, #1
 80045d2:	d102      	bne.n	80045da <_isatty_r+0x1a>
 80045d4:	682b      	ldr	r3, [r5, #0]
 80045d6:	b103      	cbz	r3, 80045da <_isatty_r+0x1a>
 80045d8:	6023      	str	r3, [r4, #0]
 80045da:	bd38      	pop	{r3, r4, r5, pc}
 80045dc:	2000028c 	.word	0x2000028c

080045e0 <cos>:
 80045e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80045e2:	ec53 2b10 	vmov	r2, r3, d0
 80045e6:	4826      	ldr	r0, [pc, #152]	@ (8004680 <cos+0xa0>)
 80045e8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80045ec:	4281      	cmp	r1, r0
 80045ee:	d806      	bhi.n	80045fe <cos+0x1e>
 80045f0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8004678 <cos+0x98>
 80045f4:	b005      	add	sp, #20
 80045f6:	f85d eb04 	ldr.w	lr, [sp], #4
 80045fa:	f000 b899 	b.w	8004730 <__kernel_cos>
 80045fe:	4821      	ldr	r0, [pc, #132]	@ (8004684 <cos+0xa4>)
 8004600:	4281      	cmp	r1, r0
 8004602:	d908      	bls.n	8004616 <cos+0x36>
 8004604:	4610      	mov	r0, r2
 8004606:	4619      	mov	r1, r3
 8004608:	f7fb fe3e 	bl	8000288 <__aeabi_dsub>
 800460c:	ec41 0b10 	vmov	d0, r0, r1
 8004610:	b005      	add	sp, #20
 8004612:	f85d fb04 	ldr.w	pc, [sp], #4
 8004616:	4668      	mov	r0, sp
 8004618:	f000 fa0e 	bl	8004a38 <__ieee754_rem_pio2>
 800461c:	f000 0003 	and.w	r0, r0, #3
 8004620:	2801      	cmp	r0, #1
 8004622:	d00b      	beq.n	800463c <cos+0x5c>
 8004624:	2802      	cmp	r0, #2
 8004626:	d015      	beq.n	8004654 <cos+0x74>
 8004628:	b9d8      	cbnz	r0, 8004662 <cos+0x82>
 800462a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800462e:	ed9d 0b00 	vldr	d0, [sp]
 8004632:	f000 f87d 	bl	8004730 <__kernel_cos>
 8004636:	ec51 0b10 	vmov	r0, r1, d0
 800463a:	e7e7      	b.n	800460c <cos+0x2c>
 800463c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004640:	ed9d 0b00 	vldr	d0, [sp]
 8004644:	f000 f93c 	bl	80048c0 <__kernel_sin>
 8004648:	ec53 2b10 	vmov	r2, r3, d0
 800464c:	4610      	mov	r0, r2
 800464e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8004652:	e7db      	b.n	800460c <cos+0x2c>
 8004654:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004658:	ed9d 0b00 	vldr	d0, [sp]
 800465c:	f000 f868 	bl	8004730 <__kernel_cos>
 8004660:	e7f2      	b.n	8004648 <cos+0x68>
 8004662:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004666:	ed9d 0b00 	vldr	d0, [sp]
 800466a:	2001      	movs	r0, #1
 800466c:	f000 f928 	bl	80048c0 <__kernel_sin>
 8004670:	e7e1      	b.n	8004636 <cos+0x56>
 8004672:	bf00      	nop
 8004674:	f3af 8000 	nop.w
	...
 8004680:	3fe921fb 	.word	0x3fe921fb
 8004684:	7fefffff 	.word	0x7fefffff

08004688 <sin>:
 8004688:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800468a:	ec53 2b10 	vmov	r2, r3, d0
 800468e:	4826      	ldr	r0, [pc, #152]	@ (8004728 <sin+0xa0>)
 8004690:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004694:	4281      	cmp	r1, r0
 8004696:	d807      	bhi.n	80046a8 <sin+0x20>
 8004698:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8004720 <sin+0x98>
 800469c:	2000      	movs	r0, #0
 800469e:	b005      	add	sp, #20
 80046a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80046a4:	f000 b90c 	b.w	80048c0 <__kernel_sin>
 80046a8:	4820      	ldr	r0, [pc, #128]	@ (800472c <sin+0xa4>)
 80046aa:	4281      	cmp	r1, r0
 80046ac:	d908      	bls.n	80046c0 <sin+0x38>
 80046ae:	4610      	mov	r0, r2
 80046b0:	4619      	mov	r1, r3
 80046b2:	f7fb fde9 	bl	8000288 <__aeabi_dsub>
 80046b6:	ec41 0b10 	vmov	d0, r0, r1
 80046ba:	b005      	add	sp, #20
 80046bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80046c0:	4668      	mov	r0, sp
 80046c2:	f000 f9b9 	bl	8004a38 <__ieee754_rem_pio2>
 80046c6:	f000 0003 	and.w	r0, r0, #3
 80046ca:	2801      	cmp	r0, #1
 80046cc:	d00c      	beq.n	80046e8 <sin+0x60>
 80046ce:	2802      	cmp	r0, #2
 80046d0:	d011      	beq.n	80046f6 <sin+0x6e>
 80046d2:	b9e8      	cbnz	r0, 8004710 <sin+0x88>
 80046d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80046d8:	ed9d 0b00 	vldr	d0, [sp]
 80046dc:	2001      	movs	r0, #1
 80046de:	f000 f8ef 	bl	80048c0 <__kernel_sin>
 80046e2:	ec51 0b10 	vmov	r0, r1, d0
 80046e6:	e7e6      	b.n	80046b6 <sin+0x2e>
 80046e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80046ec:	ed9d 0b00 	vldr	d0, [sp]
 80046f0:	f000 f81e 	bl	8004730 <__kernel_cos>
 80046f4:	e7f5      	b.n	80046e2 <sin+0x5a>
 80046f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80046fa:	ed9d 0b00 	vldr	d0, [sp]
 80046fe:	2001      	movs	r0, #1
 8004700:	f000 f8de 	bl	80048c0 <__kernel_sin>
 8004704:	ec53 2b10 	vmov	r2, r3, d0
 8004708:	4610      	mov	r0, r2
 800470a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800470e:	e7d2      	b.n	80046b6 <sin+0x2e>
 8004710:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004714:	ed9d 0b00 	vldr	d0, [sp]
 8004718:	f000 f80a 	bl	8004730 <__kernel_cos>
 800471c:	e7f2      	b.n	8004704 <sin+0x7c>
 800471e:	bf00      	nop
	...
 8004728:	3fe921fb 	.word	0x3fe921fb
 800472c:	7fefffff 	.word	0x7fefffff

08004730 <__kernel_cos>:
 8004730:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004734:	ec57 6b10 	vmov	r6, r7, d0
 8004738:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800473c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8004740:	ed8d 1b00 	vstr	d1, [sp]
 8004744:	d206      	bcs.n	8004754 <__kernel_cos+0x24>
 8004746:	4630      	mov	r0, r6
 8004748:	4639      	mov	r1, r7
 800474a:	f7fc f9ef 	bl	8000b2c <__aeabi_d2iz>
 800474e:	2800      	cmp	r0, #0
 8004750:	f000 8088 	beq.w	8004864 <__kernel_cos+0x134>
 8004754:	4632      	mov	r2, r6
 8004756:	463b      	mov	r3, r7
 8004758:	4630      	mov	r0, r6
 800475a:	4639      	mov	r1, r7
 800475c:	f7fb ff4c 	bl	80005f8 <__aeabi_dmul>
 8004760:	4b51      	ldr	r3, [pc, #324]	@ (80048a8 <__kernel_cos+0x178>)
 8004762:	2200      	movs	r2, #0
 8004764:	4604      	mov	r4, r0
 8004766:	460d      	mov	r5, r1
 8004768:	f7fb ff46 	bl	80005f8 <__aeabi_dmul>
 800476c:	a340      	add	r3, pc, #256	@ (adr r3, 8004870 <__kernel_cos+0x140>)
 800476e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004772:	4682      	mov	sl, r0
 8004774:	468b      	mov	fp, r1
 8004776:	4620      	mov	r0, r4
 8004778:	4629      	mov	r1, r5
 800477a:	f7fb ff3d 	bl	80005f8 <__aeabi_dmul>
 800477e:	a33e      	add	r3, pc, #248	@ (adr r3, 8004878 <__kernel_cos+0x148>)
 8004780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004784:	f7fb fd82 	bl	800028c <__adddf3>
 8004788:	4622      	mov	r2, r4
 800478a:	462b      	mov	r3, r5
 800478c:	f7fb ff34 	bl	80005f8 <__aeabi_dmul>
 8004790:	a33b      	add	r3, pc, #236	@ (adr r3, 8004880 <__kernel_cos+0x150>)
 8004792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004796:	f7fb fd77 	bl	8000288 <__aeabi_dsub>
 800479a:	4622      	mov	r2, r4
 800479c:	462b      	mov	r3, r5
 800479e:	f7fb ff2b 	bl	80005f8 <__aeabi_dmul>
 80047a2:	a339      	add	r3, pc, #228	@ (adr r3, 8004888 <__kernel_cos+0x158>)
 80047a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a8:	f7fb fd70 	bl	800028c <__adddf3>
 80047ac:	4622      	mov	r2, r4
 80047ae:	462b      	mov	r3, r5
 80047b0:	f7fb ff22 	bl	80005f8 <__aeabi_dmul>
 80047b4:	a336      	add	r3, pc, #216	@ (adr r3, 8004890 <__kernel_cos+0x160>)
 80047b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ba:	f7fb fd65 	bl	8000288 <__aeabi_dsub>
 80047be:	4622      	mov	r2, r4
 80047c0:	462b      	mov	r3, r5
 80047c2:	f7fb ff19 	bl	80005f8 <__aeabi_dmul>
 80047c6:	a334      	add	r3, pc, #208	@ (adr r3, 8004898 <__kernel_cos+0x168>)
 80047c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047cc:	f7fb fd5e 	bl	800028c <__adddf3>
 80047d0:	4622      	mov	r2, r4
 80047d2:	462b      	mov	r3, r5
 80047d4:	f7fb ff10 	bl	80005f8 <__aeabi_dmul>
 80047d8:	4622      	mov	r2, r4
 80047da:	462b      	mov	r3, r5
 80047dc:	f7fb ff0c 	bl	80005f8 <__aeabi_dmul>
 80047e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80047e4:	4604      	mov	r4, r0
 80047e6:	460d      	mov	r5, r1
 80047e8:	4630      	mov	r0, r6
 80047ea:	4639      	mov	r1, r7
 80047ec:	f7fb ff04 	bl	80005f8 <__aeabi_dmul>
 80047f0:	460b      	mov	r3, r1
 80047f2:	4602      	mov	r2, r0
 80047f4:	4629      	mov	r1, r5
 80047f6:	4620      	mov	r0, r4
 80047f8:	f7fb fd46 	bl	8000288 <__aeabi_dsub>
 80047fc:	4b2b      	ldr	r3, [pc, #172]	@ (80048ac <__kernel_cos+0x17c>)
 80047fe:	4598      	cmp	r8, r3
 8004800:	4606      	mov	r6, r0
 8004802:	460f      	mov	r7, r1
 8004804:	d810      	bhi.n	8004828 <__kernel_cos+0xf8>
 8004806:	4602      	mov	r2, r0
 8004808:	460b      	mov	r3, r1
 800480a:	4650      	mov	r0, sl
 800480c:	4659      	mov	r1, fp
 800480e:	f7fb fd3b 	bl	8000288 <__aeabi_dsub>
 8004812:	460b      	mov	r3, r1
 8004814:	4926      	ldr	r1, [pc, #152]	@ (80048b0 <__kernel_cos+0x180>)
 8004816:	4602      	mov	r2, r0
 8004818:	2000      	movs	r0, #0
 800481a:	f7fb fd35 	bl	8000288 <__aeabi_dsub>
 800481e:	ec41 0b10 	vmov	d0, r0, r1
 8004822:	b003      	add	sp, #12
 8004824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004828:	4b22      	ldr	r3, [pc, #136]	@ (80048b4 <__kernel_cos+0x184>)
 800482a:	4921      	ldr	r1, [pc, #132]	@ (80048b0 <__kernel_cos+0x180>)
 800482c:	4598      	cmp	r8, r3
 800482e:	bf8c      	ite	hi
 8004830:	4d21      	ldrhi	r5, [pc, #132]	@ (80048b8 <__kernel_cos+0x188>)
 8004832:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8004836:	2400      	movs	r4, #0
 8004838:	4622      	mov	r2, r4
 800483a:	462b      	mov	r3, r5
 800483c:	2000      	movs	r0, #0
 800483e:	f7fb fd23 	bl	8000288 <__aeabi_dsub>
 8004842:	4622      	mov	r2, r4
 8004844:	4680      	mov	r8, r0
 8004846:	4689      	mov	r9, r1
 8004848:	462b      	mov	r3, r5
 800484a:	4650      	mov	r0, sl
 800484c:	4659      	mov	r1, fp
 800484e:	f7fb fd1b 	bl	8000288 <__aeabi_dsub>
 8004852:	4632      	mov	r2, r6
 8004854:	463b      	mov	r3, r7
 8004856:	f7fb fd17 	bl	8000288 <__aeabi_dsub>
 800485a:	4602      	mov	r2, r0
 800485c:	460b      	mov	r3, r1
 800485e:	4640      	mov	r0, r8
 8004860:	4649      	mov	r1, r9
 8004862:	e7da      	b.n	800481a <__kernel_cos+0xea>
 8004864:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80048a0 <__kernel_cos+0x170>
 8004868:	e7db      	b.n	8004822 <__kernel_cos+0xf2>
 800486a:	bf00      	nop
 800486c:	f3af 8000 	nop.w
 8004870:	be8838d4 	.word	0xbe8838d4
 8004874:	bda8fae9 	.word	0xbda8fae9
 8004878:	bdb4b1c4 	.word	0xbdb4b1c4
 800487c:	3e21ee9e 	.word	0x3e21ee9e
 8004880:	809c52ad 	.word	0x809c52ad
 8004884:	3e927e4f 	.word	0x3e927e4f
 8004888:	19cb1590 	.word	0x19cb1590
 800488c:	3efa01a0 	.word	0x3efa01a0
 8004890:	16c15177 	.word	0x16c15177
 8004894:	3f56c16c 	.word	0x3f56c16c
 8004898:	5555554c 	.word	0x5555554c
 800489c:	3fa55555 	.word	0x3fa55555
 80048a0:	00000000 	.word	0x00000000
 80048a4:	3ff00000 	.word	0x3ff00000
 80048a8:	3fe00000 	.word	0x3fe00000
 80048ac:	3fd33332 	.word	0x3fd33332
 80048b0:	3ff00000 	.word	0x3ff00000
 80048b4:	3fe90000 	.word	0x3fe90000
 80048b8:	3fd20000 	.word	0x3fd20000
 80048bc:	00000000 	.word	0x00000000

080048c0 <__kernel_sin>:
 80048c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048c4:	ec55 4b10 	vmov	r4, r5, d0
 80048c8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80048cc:	b085      	sub	sp, #20
 80048ce:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80048d2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80048d6:	4680      	mov	r8, r0
 80048d8:	d205      	bcs.n	80048e6 <__kernel_sin+0x26>
 80048da:	4620      	mov	r0, r4
 80048dc:	4629      	mov	r1, r5
 80048de:	f7fc f925 	bl	8000b2c <__aeabi_d2iz>
 80048e2:	2800      	cmp	r0, #0
 80048e4:	d052      	beq.n	800498c <__kernel_sin+0xcc>
 80048e6:	4622      	mov	r2, r4
 80048e8:	462b      	mov	r3, r5
 80048ea:	4620      	mov	r0, r4
 80048ec:	4629      	mov	r1, r5
 80048ee:	f7fb fe83 	bl	80005f8 <__aeabi_dmul>
 80048f2:	4682      	mov	sl, r0
 80048f4:	468b      	mov	fp, r1
 80048f6:	4602      	mov	r2, r0
 80048f8:	460b      	mov	r3, r1
 80048fa:	4620      	mov	r0, r4
 80048fc:	4629      	mov	r1, r5
 80048fe:	f7fb fe7b 	bl	80005f8 <__aeabi_dmul>
 8004902:	a342      	add	r3, pc, #264	@ (adr r3, 8004a0c <__kernel_sin+0x14c>)
 8004904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004908:	e9cd 0100 	strd	r0, r1, [sp]
 800490c:	4650      	mov	r0, sl
 800490e:	4659      	mov	r1, fp
 8004910:	f7fb fe72 	bl	80005f8 <__aeabi_dmul>
 8004914:	a33f      	add	r3, pc, #252	@ (adr r3, 8004a14 <__kernel_sin+0x154>)
 8004916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491a:	f7fb fcb5 	bl	8000288 <__aeabi_dsub>
 800491e:	4652      	mov	r2, sl
 8004920:	465b      	mov	r3, fp
 8004922:	f7fb fe69 	bl	80005f8 <__aeabi_dmul>
 8004926:	a33d      	add	r3, pc, #244	@ (adr r3, 8004a1c <__kernel_sin+0x15c>)
 8004928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492c:	f7fb fcae 	bl	800028c <__adddf3>
 8004930:	4652      	mov	r2, sl
 8004932:	465b      	mov	r3, fp
 8004934:	f7fb fe60 	bl	80005f8 <__aeabi_dmul>
 8004938:	a33a      	add	r3, pc, #232	@ (adr r3, 8004a24 <__kernel_sin+0x164>)
 800493a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493e:	f7fb fca3 	bl	8000288 <__aeabi_dsub>
 8004942:	4652      	mov	r2, sl
 8004944:	465b      	mov	r3, fp
 8004946:	f7fb fe57 	bl	80005f8 <__aeabi_dmul>
 800494a:	a338      	add	r3, pc, #224	@ (adr r3, 8004a2c <__kernel_sin+0x16c>)
 800494c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004950:	f7fb fc9c 	bl	800028c <__adddf3>
 8004954:	4606      	mov	r6, r0
 8004956:	460f      	mov	r7, r1
 8004958:	f1b8 0f00 	cmp.w	r8, #0
 800495c:	d11b      	bne.n	8004996 <__kernel_sin+0xd6>
 800495e:	4602      	mov	r2, r0
 8004960:	460b      	mov	r3, r1
 8004962:	4650      	mov	r0, sl
 8004964:	4659      	mov	r1, fp
 8004966:	f7fb fe47 	bl	80005f8 <__aeabi_dmul>
 800496a:	a325      	add	r3, pc, #148	@ (adr r3, 8004a00 <__kernel_sin+0x140>)
 800496c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004970:	f7fb fc8a 	bl	8000288 <__aeabi_dsub>
 8004974:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004978:	f7fb fe3e 	bl	80005f8 <__aeabi_dmul>
 800497c:	4602      	mov	r2, r0
 800497e:	460b      	mov	r3, r1
 8004980:	4620      	mov	r0, r4
 8004982:	4629      	mov	r1, r5
 8004984:	f7fb fc82 	bl	800028c <__adddf3>
 8004988:	4604      	mov	r4, r0
 800498a:	460d      	mov	r5, r1
 800498c:	ec45 4b10 	vmov	d0, r4, r5
 8004990:	b005      	add	sp, #20
 8004992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004996:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800499a:	4b1b      	ldr	r3, [pc, #108]	@ (8004a08 <__kernel_sin+0x148>)
 800499c:	2200      	movs	r2, #0
 800499e:	f7fb fe2b 	bl	80005f8 <__aeabi_dmul>
 80049a2:	4632      	mov	r2, r6
 80049a4:	4680      	mov	r8, r0
 80049a6:	4689      	mov	r9, r1
 80049a8:	463b      	mov	r3, r7
 80049aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80049ae:	f7fb fe23 	bl	80005f8 <__aeabi_dmul>
 80049b2:	4602      	mov	r2, r0
 80049b4:	460b      	mov	r3, r1
 80049b6:	4640      	mov	r0, r8
 80049b8:	4649      	mov	r1, r9
 80049ba:	f7fb fc65 	bl	8000288 <__aeabi_dsub>
 80049be:	4652      	mov	r2, sl
 80049c0:	465b      	mov	r3, fp
 80049c2:	f7fb fe19 	bl	80005f8 <__aeabi_dmul>
 80049c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80049ca:	f7fb fc5d 	bl	8000288 <__aeabi_dsub>
 80049ce:	a30c      	add	r3, pc, #48	@ (adr r3, 8004a00 <__kernel_sin+0x140>)
 80049d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d4:	4606      	mov	r6, r0
 80049d6:	460f      	mov	r7, r1
 80049d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80049dc:	f7fb fe0c 	bl	80005f8 <__aeabi_dmul>
 80049e0:	4602      	mov	r2, r0
 80049e2:	460b      	mov	r3, r1
 80049e4:	4630      	mov	r0, r6
 80049e6:	4639      	mov	r1, r7
 80049e8:	f7fb fc50 	bl	800028c <__adddf3>
 80049ec:	4602      	mov	r2, r0
 80049ee:	460b      	mov	r3, r1
 80049f0:	4620      	mov	r0, r4
 80049f2:	4629      	mov	r1, r5
 80049f4:	f7fb fc48 	bl	8000288 <__aeabi_dsub>
 80049f8:	e7c6      	b.n	8004988 <__kernel_sin+0xc8>
 80049fa:	bf00      	nop
 80049fc:	f3af 8000 	nop.w
 8004a00:	55555549 	.word	0x55555549
 8004a04:	3fc55555 	.word	0x3fc55555
 8004a08:	3fe00000 	.word	0x3fe00000
 8004a0c:	5acfd57c 	.word	0x5acfd57c
 8004a10:	3de5d93a 	.word	0x3de5d93a
 8004a14:	8a2b9ceb 	.word	0x8a2b9ceb
 8004a18:	3e5ae5e6 	.word	0x3e5ae5e6
 8004a1c:	57b1fe7d 	.word	0x57b1fe7d
 8004a20:	3ec71de3 	.word	0x3ec71de3
 8004a24:	19c161d5 	.word	0x19c161d5
 8004a28:	3f2a01a0 	.word	0x3f2a01a0
 8004a2c:	1110f8a6 	.word	0x1110f8a6
 8004a30:	3f811111 	.word	0x3f811111
 8004a34:	00000000 	.word	0x00000000

08004a38 <__ieee754_rem_pio2>:
 8004a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a3c:	ec57 6b10 	vmov	r6, r7, d0
 8004a40:	4bc5      	ldr	r3, [pc, #788]	@ (8004d58 <__ieee754_rem_pio2+0x320>)
 8004a42:	b08d      	sub	sp, #52	@ 0x34
 8004a44:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8004a48:	4598      	cmp	r8, r3
 8004a4a:	4604      	mov	r4, r0
 8004a4c:	9704      	str	r7, [sp, #16]
 8004a4e:	d807      	bhi.n	8004a60 <__ieee754_rem_pio2+0x28>
 8004a50:	2200      	movs	r2, #0
 8004a52:	2300      	movs	r3, #0
 8004a54:	ed80 0b00 	vstr	d0, [r0]
 8004a58:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004a5c:	2500      	movs	r5, #0
 8004a5e:	e028      	b.n	8004ab2 <__ieee754_rem_pio2+0x7a>
 8004a60:	4bbe      	ldr	r3, [pc, #760]	@ (8004d5c <__ieee754_rem_pio2+0x324>)
 8004a62:	4598      	cmp	r8, r3
 8004a64:	d878      	bhi.n	8004b58 <__ieee754_rem_pio2+0x120>
 8004a66:	9b04      	ldr	r3, [sp, #16]
 8004a68:	4dbd      	ldr	r5, [pc, #756]	@ (8004d60 <__ieee754_rem_pio2+0x328>)
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	4630      	mov	r0, r6
 8004a6e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8004d20 <__ieee754_rem_pio2+0x2e8>)
 8004a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a74:	4639      	mov	r1, r7
 8004a76:	dd38      	ble.n	8004aea <__ieee754_rem_pio2+0xb2>
 8004a78:	f7fb fc06 	bl	8000288 <__aeabi_dsub>
 8004a7c:	45a8      	cmp	r8, r5
 8004a7e:	4606      	mov	r6, r0
 8004a80:	460f      	mov	r7, r1
 8004a82:	d01a      	beq.n	8004aba <__ieee754_rem_pio2+0x82>
 8004a84:	a3a8      	add	r3, pc, #672	@ (adr r3, 8004d28 <__ieee754_rem_pio2+0x2f0>)
 8004a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8a:	f7fb fbfd 	bl	8000288 <__aeabi_dsub>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	460b      	mov	r3, r1
 8004a92:	4680      	mov	r8, r0
 8004a94:	4689      	mov	r9, r1
 8004a96:	4630      	mov	r0, r6
 8004a98:	4639      	mov	r1, r7
 8004a9a:	f7fb fbf5 	bl	8000288 <__aeabi_dsub>
 8004a9e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8004d28 <__ieee754_rem_pio2+0x2f0>)
 8004aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa4:	f7fb fbf0 	bl	8000288 <__aeabi_dsub>
 8004aa8:	e9c4 8900 	strd	r8, r9, [r4]
 8004aac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004ab0:	2501      	movs	r5, #1
 8004ab2:	4628      	mov	r0, r5
 8004ab4:	b00d      	add	sp, #52	@ 0x34
 8004ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aba:	a39d      	add	r3, pc, #628	@ (adr r3, 8004d30 <__ieee754_rem_pio2+0x2f8>)
 8004abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac0:	f7fb fbe2 	bl	8000288 <__aeabi_dsub>
 8004ac4:	a39c      	add	r3, pc, #624	@ (adr r3, 8004d38 <__ieee754_rem_pio2+0x300>)
 8004ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aca:	4606      	mov	r6, r0
 8004acc:	460f      	mov	r7, r1
 8004ace:	f7fb fbdb 	bl	8000288 <__aeabi_dsub>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	4680      	mov	r8, r0
 8004ad8:	4689      	mov	r9, r1
 8004ada:	4630      	mov	r0, r6
 8004adc:	4639      	mov	r1, r7
 8004ade:	f7fb fbd3 	bl	8000288 <__aeabi_dsub>
 8004ae2:	a395      	add	r3, pc, #596	@ (adr r3, 8004d38 <__ieee754_rem_pio2+0x300>)
 8004ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae8:	e7dc      	b.n	8004aa4 <__ieee754_rem_pio2+0x6c>
 8004aea:	f7fb fbcf 	bl	800028c <__adddf3>
 8004aee:	45a8      	cmp	r8, r5
 8004af0:	4606      	mov	r6, r0
 8004af2:	460f      	mov	r7, r1
 8004af4:	d018      	beq.n	8004b28 <__ieee754_rem_pio2+0xf0>
 8004af6:	a38c      	add	r3, pc, #560	@ (adr r3, 8004d28 <__ieee754_rem_pio2+0x2f0>)
 8004af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afc:	f7fb fbc6 	bl	800028c <__adddf3>
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	4680      	mov	r8, r0
 8004b06:	4689      	mov	r9, r1
 8004b08:	4630      	mov	r0, r6
 8004b0a:	4639      	mov	r1, r7
 8004b0c:	f7fb fbbc 	bl	8000288 <__aeabi_dsub>
 8004b10:	a385      	add	r3, pc, #532	@ (adr r3, 8004d28 <__ieee754_rem_pio2+0x2f0>)
 8004b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b16:	f7fb fbb9 	bl	800028c <__adddf3>
 8004b1a:	f04f 35ff 	mov.w	r5, #4294967295
 8004b1e:	e9c4 8900 	strd	r8, r9, [r4]
 8004b22:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004b26:	e7c4      	b.n	8004ab2 <__ieee754_rem_pio2+0x7a>
 8004b28:	a381      	add	r3, pc, #516	@ (adr r3, 8004d30 <__ieee754_rem_pio2+0x2f8>)
 8004b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2e:	f7fb fbad 	bl	800028c <__adddf3>
 8004b32:	a381      	add	r3, pc, #516	@ (adr r3, 8004d38 <__ieee754_rem_pio2+0x300>)
 8004b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b38:	4606      	mov	r6, r0
 8004b3a:	460f      	mov	r7, r1
 8004b3c:	f7fb fba6 	bl	800028c <__adddf3>
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	4680      	mov	r8, r0
 8004b46:	4689      	mov	r9, r1
 8004b48:	4630      	mov	r0, r6
 8004b4a:	4639      	mov	r1, r7
 8004b4c:	f7fb fb9c 	bl	8000288 <__aeabi_dsub>
 8004b50:	a379      	add	r3, pc, #484	@ (adr r3, 8004d38 <__ieee754_rem_pio2+0x300>)
 8004b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b56:	e7de      	b.n	8004b16 <__ieee754_rem_pio2+0xde>
 8004b58:	4b82      	ldr	r3, [pc, #520]	@ (8004d64 <__ieee754_rem_pio2+0x32c>)
 8004b5a:	4598      	cmp	r8, r3
 8004b5c:	f200 80d1 	bhi.w	8004d02 <__ieee754_rem_pio2+0x2ca>
 8004b60:	f000 f966 	bl	8004e30 <fabs>
 8004b64:	ec57 6b10 	vmov	r6, r7, d0
 8004b68:	a375      	add	r3, pc, #468	@ (adr r3, 8004d40 <__ieee754_rem_pio2+0x308>)
 8004b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6e:	4630      	mov	r0, r6
 8004b70:	4639      	mov	r1, r7
 8004b72:	f7fb fd41 	bl	80005f8 <__aeabi_dmul>
 8004b76:	4b7c      	ldr	r3, [pc, #496]	@ (8004d68 <__ieee754_rem_pio2+0x330>)
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f7fb fb87 	bl	800028c <__adddf3>
 8004b7e:	f7fb ffd5 	bl	8000b2c <__aeabi_d2iz>
 8004b82:	4605      	mov	r5, r0
 8004b84:	f7fb fcce 	bl	8000524 <__aeabi_i2d>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004b90:	a363      	add	r3, pc, #396	@ (adr r3, 8004d20 <__ieee754_rem_pio2+0x2e8>)
 8004b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b96:	f7fb fd2f 	bl	80005f8 <__aeabi_dmul>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	4630      	mov	r0, r6
 8004ba0:	4639      	mov	r1, r7
 8004ba2:	f7fb fb71 	bl	8000288 <__aeabi_dsub>
 8004ba6:	a360      	add	r3, pc, #384	@ (adr r3, 8004d28 <__ieee754_rem_pio2+0x2f0>)
 8004ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bac:	4682      	mov	sl, r0
 8004bae:	468b      	mov	fp, r1
 8004bb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bb4:	f7fb fd20 	bl	80005f8 <__aeabi_dmul>
 8004bb8:	2d1f      	cmp	r5, #31
 8004bba:	4606      	mov	r6, r0
 8004bbc:	460f      	mov	r7, r1
 8004bbe:	dc0c      	bgt.n	8004bda <__ieee754_rem_pio2+0x1a2>
 8004bc0:	4b6a      	ldr	r3, [pc, #424]	@ (8004d6c <__ieee754_rem_pio2+0x334>)
 8004bc2:	1e6a      	subs	r2, r5, #1
 8004bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bc8:	4543      	cmp	r3, r8
 8004bca:	d006      	beq.n	8004bda <__ieee754_rem_pio2+0x1a2>
 8004bcc:	4632      	mov	r2, r6
 8004bce:	463b      	mov	r3, r7
 8004bd0:	4650      	mov	r0, sl
 8004bd2:	4659      	mov	r1, fp
 8004bd4:	f7fb fb58 	bl	8000288 <__aeabi_dsub>
 8004bd8:	e00e      	b.n	8004bf8 <__ieee754_rem_pio2+0x1c0>
 8004bda:	463b      	mov	r3, r7
 8004bdc:	4632      	mov	r2, r6
 8004bde:	4650      	mov	r0, sl
 8004be0:	4659      	mov	r1, fp
 8004be2:	f7fb fb51 	bl	8000288 <__aeabi_dsub>
 8004be6:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004bea:	9305      	str	r3, [sp, #20]
 8004bec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004bf0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8004bf4:	2b10      	cmp	r3, #16
 8004bf6:	dc02      	bgt.n	8004bfe <__ieee754_rem_pio2+0x1c6>
 8004bf8:	e9c4 0100 	strd	r0, r1, [r4]
 8004bfc:	e039      	b.n	8004c72 <__ieee754_rem_pio2+0x23a>
 8004bfe:	a34c      	add	r3, pc, #304	@ (adr r3, 8004d30 <__ieee754_rem_pio2+0x2f8>)
 8004c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c08:	f7fb fcf6 	bl	80005f8 <__aeabi_dmul>
 8004c0c:	4606      	mov	r6, r0
 8004c0e:	460f      	mov	r7, r1
 8004c10:	4602      	mov	r2, r0
 8004c12:	460b      	mov	r3, r1
 8004c14:	4650      	mov	r0, sl
 8004c16:	4659      	mov	r1, fp
 8004c18:	f7fb fb36 	bl	8000288 <__aeabi_dsub>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	460b      	mov	r3, r1
 8004c20:	4680      	mov	r8, r0
 8004c22:	4689      	mov	r9, r1
 8004c24:	4650      	mov	r0, sl
 8004c26:	4659      	mov	r1, fp
 8004c28:	f7fb fb2e 	bl	8000288 <__aeabi_dsub>
 8004c2c:	4632      	mov	r2, r6
 8004c2e:	463b      	mov	r3, r7
 8004c30:	f7fb fb2a 	bl	8000288 <__aeabi_dsub>
 8004c34:	a340      	add	r3, pc, #256	@ (adr r3, 8004d38 <__ieee754_rem_pio2+0x300>)
 8004c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3a:	4606      	mov	r6, r0
 8004c3c:	460f      	mov	r7, r1
 8004c3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c42:	f7fb fcd9 	bl	80005f8 <__aeabi_dmul>
 8004c46:	4632      	mov	r2, r6
 8004c48:	463b      	mov	r3, r7
 8004c4a:	f7fb fb1d 	bl	8000288 <__aeabi_dsub>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	460b      	mov	r3, r1
 8004c52:	4606      	mov	r6, r0
 8004c54:	460f      	mov	r7, r1
 8004c56:	4640      	mov	r0, r8
 8004c58:	4649      	mov	r1, r9
 8004c5a:	f7fb fb15 	bl	8000288 <__aeabi_dsub>
 8004c5e:	9a05      	ldr	r2, [sp, #20]
 8004c60:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b31      	cmp	r3, #49	@ 0x31
 8004c68:	dc20      	bgt.n	8004cac <__ieee754_rem_pio2+0x274>
 8004c6a:	e9c4 0100 	strd	r0, r1, [r4]
 8004c6e:	46c2      	mov	sl, r8
 8004c70:	46cb      	mov	fp, r9
 8004c72:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004c76:	4650      	mov	r0, sl
 8004c78:	4642      	mov	r2, r8
 8004c7a:	464b      	mov	r3, r9
 8004c7c:	4659      	mov	r1, fp
 8004c7e:	f7fb fb03 	bl	8000288 <__aeabi_dsub>
 8004c82:	463b      	mov	r3, r7
 8004c84:	4632      	mov	r2, r6
 8004c86:	f7fb faff 	bl	8000288 <__aeabi_dsub>
 8004c8a:	9b04      	ldr	r3, [sp, #16]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004c92:	f6bf af0e 	bge.w	8004ab2 <__ieee754_rem_pio2+0x7a>
 8004c96:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8004c9a:	6063      	str	r3, [r4, #4]
 8004c9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004ca0:	f8c4 8000 	str.w	r8, [r4]
 8004ca4:	60a0      	str	r0, [r4, #8]
 8004ca6:	60e3      	str	r3, [r4, #12]
 8004ca8:	426d      	negs	r5, r5
 8004caa:	e702      	b.n	8004ab2 <__ieee754_rem_pio2+0x7a>
 8004cac:	a326      	add	r3, pc, #152	@ (adr r3, 8004d48 <__ieee754_rem_pio2+0x310>)
 8004cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cb6:	f7fb fc9f 	bl	80005f8 <__aeabi_dmul>
 8004cba:	4606      	mov	r6, r0
 8004cbc:	460f      	mov	r7, r1
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	4640      	mov	r0, r8
 8004cc4:	4649      	mov	r1, r9
 8004cc6:	f7fb fadf 	bl	8000288 <__aeabi_dsub>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	460b      	mov	r3, r1
 8004cce:	4682      	mov	sl, r0
 8004cd0:	468b      	mov	fp, r1
 8004cd2:	4640      	mov	r0, r8
 8004cd4:	4649      	mov	r1, r9
 8004cd6:	f7fb fad7 	bl	8000288 <__aeabi_dsub>
 8004cda:	4632      	mov	r2, r6
 8004cdc:	463b      	mov	r3, r7
 8004cde:	f7fb fad3 	bl	8000288 <__aeabi_dsub>
 8004ce2:	a31b      	add	r3, pc, #108	@ (adr r3, 8004d50 <__ieee754_rem_pio2+0x318>)
 8004ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce8:	4606      	mov	r6, r0
 8004cea:	460f      	mov	r7, r1
 8004cec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cf0:	f7fb fc82 	bl	80005f8 <__aeabi_dmul>
 8004cf4:	4632      	mov	r2, r6
 8004cf6:	463b      	mov	r3, r7
 8004cf8:	f7fb fac6 	bl	8000288 <__aeabi_dsub>
 8004cfc:	4606      	mov	r6, r0
 8004cfe:	460f      	mov	r7, r1
 8004d00:	e764      	b.n	8004bcc <__ieee754_rem_pio2+0x194>
 8004d02:	4b1b      	ldr	r3, [pc, #108]	@ (8004d70 <__ieee754_rem_pio2+0x338>)
 8004d04:	4598      	cmp	r8, r3
 8004d06:	d935      	bls.n	8004d74 <__ieee754_rem_pio2+0x33c>
 8004d08:	4632      	mov	r2, r6
 8004d0a:	463b      	mov	r3, r7
 8004d0c:	4630      	mov	r0, r6
 8004d0e:	4639      	mov	r1, r7
 8004d10:	f7fb faba 	bl	8000288 <__aeabi_dsub>
 8004d14:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004d18:	e9c4 0100 	strd	r0, r1, [r4]
 8004d1c:	e69e      	b.n	8004a5c <__ieee754_rem_pio2+0x24>
 8004d1e:	bf00      	nop
 8004d20:	54400000 	.word	0x54400000
 8004d24:	3ff921fb 	.word	0x3ff921fb
 8004d28:	1a626331 	.word	0x1a626331
 8004d2c:	3dd0b461 	.word	0x3dd0b461
 8004d30:	1a600000 	.word	0x1a600000
 8004d34:	3dd0b461 	.word	0x3dd0b461
 8004d38:	2e037073 	.word	0x2e037073
 8004d3c:	3ba3198a 	.word	0x3ba3198a
 8004d40:	6dc9c883 	.word	0x6dc9c883
 8004d44:	3fe45f30 	.word	0x3fe45f30
 8004d48:	2e000000 	.word	0x2e000000
 8004d4c:	3ba3198a 	.word	0x3ba3198a
 8004d50:	252049c1 	.word	0x252049c1
 8004d54:	397b839a 	.word	0x397b839a
 8004d58:	3fe921fb 	.word	0x3fe921fb
 8004d5c:	4002d97b 	.word	0x4002d97b
 8004d60:	3ff921fb 	.word	0x3ff921fb
 8004d64:	413921fb 	.word	0x413921fb
 8004d68:	3fe00000 	.word	0x3fe00000
 8004d6c:	08005754 	.word	0x08005754
 8004d70:	7fefffff 	.word	0x7fefffff
 8004d74:	ea4f 5528 	mov.w	r5, r8, asr #20
 8004d78:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8004d7c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8004d80:	4630      	mov	r0, r6
 8004d82:	460f      	mov	r7, r1
 8004d84:	f7fb fed2 	bl	8000b2c <__aeabi_d2iz>
 8004d88:	f7fb fbcc 	bl	8000524 <__aeabi_i2d>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	460b      	mov	r3, r1
 8004d90:	4630      	mov	r0, r6
 8004d92:	4639      	mov	r1, r7
 8004d94:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004d98:	f7fb fa76 	bl	8000288 <__aeabi_dsub>
 8004d9c:	4b22      	ldr	r3, [pc, #136]	@ (8004e28 <__ieee754_rem_pio2+0x3f0>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f7fb fc2a 	bl	80005f8 <__aeabi_dmul>
 8004da4:	460f      	mov	r7, r1
 8004da6:	4606      	mov	r6, r0
 8004da8:	f7fb fec0 	bl	8000b2c <__aeabi_d2iz>
 8004dac:	f7fb fbba 	bl	8000524 <__aeabi_i2d>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	4630      	mov	r0, r6
 8004db6:	4639      	mov	r1, r7
 8004db8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004dbc:	f7fb fa64 	bl	8000288 <__aeabi_dsub>
 8004dc0:	4b19      	ldr	r3, [pc, #100]	@ (8004e28 <__ieee754_rem_pio2+0x3f0>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f7fb fc18 	bl	80005f8 <__aeabi_dmul>
 8004dc8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8004dcc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8004dd0:	f04f 0803 	mov.w	r8, #3
 8004dd4:	2600      	movs	r6, #0
 8004dd6:	2700      	movs	r7, #0
 8004dd8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8004ddc:	4632      	mov	r2, r6
 8004dde:	463b      	mov	r3, r7
 8004de0:	46c2      	mov	sl, r8
 8004de2:	f108 38ff 	add.w	r8, r8, #4294967295
 8004de6:	f7fb fe6f 	bl	8000ac8 <__aeabi_dcmpeq>
 8004dea:	2800      	cmp	r0, #0
 8004dec:	d1f4      	bne.n	8004dd8 <__ieee754_rem_pio2+0x3a0>
 8004dee:	4b0f      	ldr	r3, [pc, #60]	@ (8004e2c <__ieee754_rem_pio2+0x3f4>)
 8004df0:	9301      	str	r3, [sp, #4]
 8004df2:	2302      	movs	r3, #2
 8004df4:	9300      	str	r3, [sp, #0]
 8004df6:	462a      	mov	r2, r5
 8004df8:	4653      	mov	r3, sl
 8004dfa:	4621      	mov	r1, r4
 8004dfc:	a806      	add	r0, sp, #24
 8004dfe:	f000 f81f 	bl	8004e40 <__kernel_rem_pio2>
 8004e02:	9b04      	ldr	r3, [sp, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	4605      	mov	r5, r0
 8004e08:	f6bf ae53 	bge.w	8004ab2 <__ieee754_rem_pio2+0x7a>
 8004e0c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8004e10:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004e14:	e9c4 2300 	strd	r2, r3, [r4]
 8004e18:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8004e1c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004e20:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004e24:	e740      	b.n	8004ca8 <__ieee754_rem_pio2+0x270>
 8004e26:	bf00      	nop
 8004e28:	41700000 	.word	0x41700000
 8004e2c:	080057d4 	.word	0x080057d4

08004e30 <fabs>:
 8004e30:	ec51 0b10 	vmov	r0, r1, d0
 8004e34:	4602      	mov	r2, r0
 8004e36:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004e3a:	ec43 2b10 	vmov	d0, r2, r3
 8004e3e:	4770      	bx	lr

08004e40 <__kernel_rem_pio2>:
 8004e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e44:	ed2d 8b02 	vpush	{d8}
 8004e48:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8004e4c:	f112 0f14 	cmn.w	r2, #20
 8004e50:	9306      	str	r3, [sp, #24]
 8004e52:	9104      	str	r1, [sp, #16]
 8004e54:	4bbe      	ldr	r3, [pc, #760]	@ (8005150 <__kernel_rem_pio2+0x310>)
 8004e56:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8004e58:	9008      	str	r0, [sp, #32]
 8004e5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	9b06      	ldr	r3, [sp, #24]
 8004e62:	f103 33ff 	add.w	r3, r3, #4294967295
 8004e66:	bfa8      	it	ge
 8004e68:	1ed4      	subge	r4, r2, #3
 8004e6a:	9305      	str	r3, [sp, #20]
 8004e6c:	bfb2      	itee	lt
 8004e6e:	2400      	movlt	r4, #0
 8004e70:	2318      	movge	r3, #24
 8004e72:	fb94 f4f3 	sdivge	r4, r4, r3
 8004e76:	f06f 0317 	mvn.w	r3, #23
 8004e7a:	fb04 3303 	mla	r3, r4, r3, r3
 8004e7e:	eb03 0b02 	add.w	fp, r3, r2
 8004e82:	9b00      	ldr	r3, [sp, #0]
 8004e84:	9a05      	ldr	r2, [sp, #20]
 8004e86:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8005140 <__kernel_rem_pio2+0x300>
 8004e8a:	eb03 0802 	add.w	r8, r3, r2
 8004e8e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8004e90:	1aa7      	subs	r7, r4, r2
 8004e92:	ae20      	add	r6, sp, #128	@ 0x80
 8004e94:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004e98:	2500      	movs	r5, #0
 8004e9a:	4545      	cmp	r5, r8
 8004e9c:	dd13      	ble.n	8004ec6 <__kernel_rem_pio2+0x86>
 8004e9e:	9b06      	ldr	r3, [sp, #24]
 8004ea0:	aa20      	add	r2, sp, #128	@ 0x80
 8004ea2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8004ea6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8004eaa:	f04f 0800 	mov.w	r8, #0
 8004eae:	9b00      	ldr	r3, [sp, #0]
 8004eb0:	4598      	cmp	r8, r3
 8004eb2:	dc31      	bgt.n	8004f18 <__kernel_rem_pio2+0xd8>
 8004eb4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8005140 <__kernel_rem_pio2+0x300>
 8004eb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ebc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004ec0:	462f      	mov	r7, r5
 8004ec2:	2600      	movs	r6, #0
 8004ec4:	e01b      	b.n	8004efe <__kernel_rem_pio2+0xbe>
 8004ec6:	42ef      	cmn	r7, r5
 8004ec8:	d407      	bmi.n	8004eda <__kernel_rem_pio2+0x9a>
 8004eca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004ece:	f7fb fb29 	bl	8000524 <__aeabi_i2d>
 8004ed2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004ed6:	3501      	adds	r5, #1
 8004ed8:	e7df      	b.n	8004e9a <__kernel_rem_pio2+0x5a>
 8004eda:	ec51 0b18 	vmov	r0, r1, d8
 8004ede:	e7f8      	b.n	8004ed2 <__kernel_rem_pio2+0x92>
 8004ee0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ee4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004ee8:	f7fb fb86 	bl	80005f8 <__aeabi_dmul>
 8004eec:	4602      	mov	r2, r0
 8004eee:	460b      	mov	r3, r1
 8004ef0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ef4:	f7fb f9ca 	bl	800028c <__adddf3>
 8004ef8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004efc:	3601      	adds	r6, #1
 8004efe:	9b05      	ldr	r3, [sp, #20]
 8004f00:	429e      	cmp	r6, r3
 8004f02:	f1a7 0708 	sub.w	r7, r7, #8
 8004f06:	ddeb      	ble.n	8004ee0 <__kernel_rem_pio2+0xa0>
 8004f08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004f0c:	f108 0801 	add.w	r8, r8, #1
 8004f10:	ecaa 7b02 	vstmia	sl!, {d7}
 8004f14:	3508      	adds	r5, #8
 8004f16:	e7ca      	b.n	8004eae <__kernel_rem_pio2+0x6e>
 8004f18:	9b00      	ldr	r3, [sp, #0]
 8004f1a:	f8dd 8000 	ldr.w	r8, [sp]
 8004f1e:	aa0c      	add	r2, sp, #48	@ 0x30
 8004f20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004f24:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f26:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8004f28:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004f2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f2e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8004f32:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f34:	ab98      	add	r3, sp, #608	@ 0x260
 8004f36:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004f3a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8004f3e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004f42:	ac0c      	add	r4, sp, #48	@ 0x30
 8004f44:	ab70      	add	r3, sp, #448	@ 0x1c0
 8004f46:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8004f4a:	46a1      	mov	r9, r4
 8004f4c:	46c2      	mov	sl, r8
 8004f4e:	f1ba 0f00 	cmp.w	sl, #0
 8004f52:	f1a5 0508 	sub.w	r5, r5, #8
 8004f56:	dc77      	bgt.n	8005048 <__kernel_rem_pio2+0x208>
 8004f58:	4658      	mov	r0, fp
 8004f5a:	ed9d 0b02 	vldr	d0, [sp, #8]
 8004f5e:	f000 fac7 	bl	80054f0 <scalbn>
 8004f62:	ec57 6b10 	vmov	r6, r7, d0
 8004f66:	2200      	movs	r2, #0
 8004f68:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8004f6c:	4630      	mov	r0, r6
 8004f6e:	4639      	mov	r1, r7
 8004f70:	f7fb fb42 	bl	80005f8 <__aeabi_dmul>
 8004f74:	ec41 0b10 	vmov	d0, r0, r1
 8004f78:	f000 fb3a 	bl	80055f0 <floor>
 8004f7c:	4b75      	ldr	r3, [pc, #468]	@ (8005154 <__kernel_rem_pio2+0x314>)
 8004f7e:	ec51 0b10 	vmov	r0, r1, d0
 8004f82:	2200      	movs	r2, #0
 8004f84:	f7fb fb38 	bl	80005f8 <__aeabi_dmul>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	4630      	mov	r0, r6
 8004f8e:	4639      	mov	r1, r7
 8004f90:	f7fb f97a 	bl	8000288 <__aeabi_dsub>
 8004f94:	460f      	mov	r7, r1
 8004f96:	4606      	mov	r6, r0
 8004f98:	f7fb fdc8 	bl	8000b2c <__aeabi_d2iz>
 8004f9c:	9002      	str	r0, [sp, #8]
 8004f9e:	f7fb fac1 	bl	8000524 <__aeabi_i2d>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	4630      	mov	r0, r6
 8004fa8:	4639      	mov	r1, r7
 8004faa:	f7fb f96d 	bl	8000288 <__aeabi_dsub>
 8004fae:	f1bb 0f00 	cmp.w	fp, #0
 8004fb2:	4606      	mov	r6, r0
 8004fb4:	460f      	mov	r7, r1
 8004fb6:	dd6c      	ble.n	8005092 <__kernel_rem_pio2+0x252>
 8004fb8:	f108 31ff 	add.w	r1, r8, #4294967295
 8004fbc:	ab0c      	add	r3, sp, #48	@ 0x30
 8004fbe:	9d02      	ldr	r5, [sp, #8]
 8004fc0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004fc4:	f1cb 0018 	rsb	r0, fp, #24
 8004fc8:	fa43 f200 	asr.w	r2, r3, r0
 8004fcc:	4415      	add	r5, r2
 8004fce:	4082      	lsls	r2, r0
 8004fd0:	1a9b      	subs	r3, r3, r2
 8004fd2:	aa0c      	add	r2, sp, #48	@ 0x30
 8004fd4:	9502      	str	r5, [sp, #8]
 8004fd6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8004fda:	f1cb 0217 	rsb	r2, fp, #23
 8004fde:	fa43 f902 	asr.w	r9, r3, r2
 8004fe2:	f1b9 0f00 	cmp.w	r9, #0
 8004fe6:	dd64      	ble.n	80050b2 <__kernel_rem_pio2+0x272>
 8004fe8:	9b02      	ldr	r3, [sp, #8]
 8004fea:	2200      	movs	r2, #0
 8004fec:	3301      	adds	r3, #1
 8004fee:	9302      	str	r3, [sp, #8]
 8004ff0:	4615      	mov	r5, r2
 8004ff2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8004ff6:	4590      	cmp	r8, r2
 8004ff8:	f300 80b8 	bgt.w	800516c <__kernel_rem_pio2+0x32c>
 8004ffc:	f1bb 0f00 	cmp.w	fp, #0
 8005000:	dd07      	ble.n	8005012 <__kernel_rem_pio2+0x1d2>
 8005002:	f1bb 0f01 	cmp.w	fp, #1
 8005006:	f000 80bf 	beq.w	8005188 <__kernel_rem_pio2+0x348>
 800500a:	f1bb 0f02 	cmp.w	fp, #2
 800500e:	f000 80c6 	beq.w	800519e <__kernel_rem_pio2+0x35e>
 8005012:	f1b9 0f02 	cmp.w	r9, #2
 8005016:	d14c      	bne.n	80050b2 <__kernel_rem_pio2+0x272>
 8005018:	4632      	mov	r2, r6
 800501a:	463b      	mov	r3, r7
 800501c:	494e      	ldr	r1, [pc, #312]	@ (8005158 <__kernel_rem_pio2+0x318>)
 800501e:	2000      	movs	r0, #0
 8005020:	f7fb f932 	bl	8000288 <__aeabi_dsub>
 8005024:	4606      	mov	r6, r0
 8005026:	460f      	mov	r7, r1
 8005028:	2d00      	cmp	r5, #0
 800502a:	d042      	beq.n	80050b2 <__kernel_rem_pio2+0x272>
 800502c:	4658      	mov	r0, fp
 800502e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8005148 <__kernel_rem_pio2+0x308>
 8005032:	f000 fa5d 	bl	80054f0 <scalbn>
 8005036:	4630      	mov	r0, r6
 8005038:	4639      	mov	r1, r7
 800503a:	ec53 2b10 	vmov	r2, r3, d0
 800503e:	f7fb f923 	bl	8000288 <__aeabi_dsub>
 8005042:	4606      	mov	r6, r0
 8005044:	460f      	mov	r7, r1
 8005046:	e034      	b.n	80050b2 <__kernel_rem_pio2+0x272>
 8005048:	4b44      	ldr	r3, [pc, #272]	@ (800515c <__kernel_rem_pio2+0x31c>)
 800504a:	2200      	movs	r2, #0
 800504c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005050:	f7fb fad2 	bl	80005f8 <__aeabi_dmul>
 8005054:	f7fb fd6a 	bl	8000b2c <__aeabi_d2iz>
 8005058:	f7fb fa64 	bl	8000524 <__aeabi_i2d>
 800505c:	4b40      	ldr	r3, [pc, #256]	@ (8005160 <__kernel_rem_pio2+0x320>)
 800505e:	2200      	movs	r2, #0
 8005060:	4606      	mov	r6, r0
 8005062:	460f      	mov	r7, r1
 8005064:	f7fb fac8 	bl	80005f8 <__aeabi_dmul>
 8005068:	4602      	mov	r2, r0
 800506a:	460b      	mov	r3, r1
 800506c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005070:	f7fb f90a 	bl	8000288 <__aeabi_dsub>
 8005074:	f7fb fd5a 	bl	8000b2c <__aeabi_d2iz>
 8005078:	e9d5 2300 	ldrd	r2, r3, [r5]
 800507c:	f849 0b04 	str.w	r0, [r9], #4
 8005080:	4639      	mov	r1, r7
 8005082:	4630      	mov	r0, r6
 8005084:	f7fb f902 	bl	800028c <__adddf3>
 8005088:	f10a 3aff 	add.w	sl, sl, #4294967295
 800508c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005090:	e75d      	b.n	8004f4e <__kernel_rem_pio2+0x10e>
 8005092:	d107      	bne.n	80050a4 <__kernel_rem_pio2+0x264>
 8005094:	f108 33ff 	add.w	r3, r8, #4294967295
 8005098:	aa0c      	add	r2, sp, #48	@ 0x30
 800509a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800509e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80050a2:	e79e      	b.n	8004fe2 <__kernel_rem_pio2+0x1a2>
 80050a4:	4b2f      	ldr	r3, [pc, #188]	@ (8005164 <__kernel_rem_pio2+0x324>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	f7fb fd2c 	bl	8000b04 <__aeabi_dcmpge>
 80050ac:	2800      	cmp	r0, #0
 80050ae:	d143      	bne.n	8005138 <__kernel_rem_pio2+0x2f8>
 80050b0:	4681      	mov	r9, r0
 80050b2:	2200      	movs	r2, #0
 80050b4:	2300      	movs	r3, #0
 80050b6:	4630      	mov	r0, r6
 80050b8:	4639      	mov	r1, r7
 80050ba:	f7fb fd05 	bl	8000ac8 <__aeabi_dcmpeq>
 80050be:	2800      	cmp	r0, #0
 80050c0:	f000 80bf 	beq.w	8005242 <__kernel_rem_pio2+0x402>
 80050c4:	f108 33ff 	add.w	r3, r8, #4294967295
 80050c8:	2200      	movs	r2, #0
 80050ca:	9900      	ldr	r1, [sp, #0]
 80050cc:	428b      	cmp	r3, r1
 80050ce:	da6e      	bge.n	80051ae <__kernel_rem_pio2+0x36e>
 80050d0:	2a00      	cmp	r2, #0
 80050d2:	f000 8089 	beq.w	80051e8 <__kernel_rem_pio2+0x3a8>
 80050d6:	f108 38ff 	add.w	r8, r8, #4294967295
 80050da:	ab0c      	add	r3, sp, #48	@ 0x30
 80050dc:	f1ab 0b18 	sub.w	fp, fp, #24
 80050e0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0f6      	beq.n	80050d6 <__kernel_rem_pio2+0x296>
 80050e8:	4658      	mov	r0, fp
 80050ea:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8005148 <__kernel_rem_pio2+0x308>
 80050ee:	f000 f9ff 	bl	80054f0 <scalbn>
 80050f2:	f108 0301 	add.w	r3, r8, #1
 80050f6:	00da      	lsls	r2, r3, #3
 80050f8:	9205      	str	r2, [sp, #20]
 80050fa:	ec55 4b10 	vmov	r4, r5, d0
 80050fe:	aa70      	add	r2, sp, #448	@ 0x1c0
 8005100:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800515c <__kernel_rem_pio2+0x31c>
 8005104:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8005108:	4646      	mov	r6, r8
 800510a:	f04f 0a00 	mov.w	sl, #0
 800510e:	2e00      	cmp	r6, #0
 8005110:	f280 80cf 	bge.w	80052b2 <__kernel_rem_pio2+0x472>
 8005114:	4644      	mov	r4, r8
 8005116:	2c00      	cmp	r4, #0
 8005118:	f2c0 80fd 	blt.w	8005316 <__kernel_rem_pio2+0x4d6>
 800511c:	4b12      	ldr	r3, [pc, #72]	@ (8005168 <__kernel_rem_pio2+0x328>)
 800511e:	461f      	mov	r7, r3
 8005120:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005122:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005126:	9306      	str	r3, [sp, #24]
 8005128:	f04f 0a00 	mov.w	sl, #0
 800512c:	f04f 0b00 	mov.w	fp, #0
 8005130:	2600      	movs	r6, #0
 8005132:	eba8 0504 	sub.w	r5, r8, r4
 8005136:	e0e2      	b.n	80052fe <__kernel_rem_pio2+0x4be>
 8005138:	f04f 0902 	mov.w	r9, #2
 800513c:	e754      	b.n	8004fe8 <__kernel_rem_pio2+0x1a8>
 800513e:	bf00      	nop
	...
 800514c:	3ff00000 	.word	0x3ff00000
 8005150:	08005920 	.word	0x08005920
 8005154:	40200000 	.word	0x40200000
 8005158:	3ff00000 	.word	0x3ff00000
 800515c:	3e700000 	.word	0x3e700000
 8005160:	41700000 	.word	0x41700000
 8005164:	3fe00000 	.word	0x3fe00000
 8005168:	080058e0 	.word	0x080058e0
 800516c:	f854 3b04 	ldr.w	r3, [r4], #4
 8005170:	b945      	cbnz	r5, 8005184 <__kernel_rem_pio2+0x344>
 8005172:	b123      	cbz	r3, 800517e <__kernel_rem_pio2+0x33e>
 8005174:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8005178:	f844 3c04 	str.w	r3, [r4, #-4]
 800517c:	2301      	movs	r3, #1
 800517e:	3201      	adds	r2, #1
 8005180:	461d      	mov	r5, r3
 8005182:	e738      	b.n	8004ff6 <__kernel_rem_pio2+0x1b6>
 8005184:	1acb      	subs	r3, r1, r3
 8005186:	e7f7      	b.n	8005178 <__kernel_rem_pio2+0x338>
 8005188:	f108 32ff 	add.w	r2, r8, #4294967295
 800518c:	ab0c      	add	r3, sp, #48	@ 0x30
 800518e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005192:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005196:	a90c      	add	r1, sp, #48	@ 0x30
 8005198:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800519c:	e739      	b.n	8005012 <__kernel_rem_pio2+0x1d2>
 800519e:	f108 32ff 	add.w	r2, r8, #4294967295
 80051a2:	ab0c      	add	r3, sp, #48	@ 0x30
 80051a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051a8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80051ac:	e7f3      	b.n	8005196 <__kernel_rem_pio2+0x356>
 80051ae:	a90c      	add	r1, sp, #48	@ 0x30
 80051b0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80051b4:	3b01      	subs	r3, #1
 80051b6:	430a      	orrs	r2, r1
 80051b8:	e787      	b.n	80050ca <__kernel_rem_pio2+0x28a>
 80051ba:	3401      	adds	r4, #1
 80051bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80051c0:	2a00      	cmp	r2, #0
 80051c2:	d0fa      	beq.n	80051ba <__kernel_rem_pio2+0x37a>
 80051c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80051c6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80051ca:	eb0d 0503 	add.w	r5, sp, r3
 80051ce:	9b06      	ldr	r3, [sp, #24]
 80051d0:	aa20      	add	r2, sp, #128	@ 0x80
 80051d2:	4443      	add	r3, r8
 80051d4:	f108 0701 	add.w	r7, r8, #1
 80051d8:	3d98      	subs	r5, #152	@ 0x98
 80051da:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80051de:	4444      	add	r4, r8
 80051e0:	42bc      	cmp	r4, r7
 80051e2:	da04      	bge.n	80051ee <__kernel_rem_pio2+0x3ae>
 80051e4:	46a0      	mov	r8, r4
 80051e6:	e6a2      	b.n	8004f2e <__kernel_rem_pio2+0xee>
 80051e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051ea:	2401      	movs	r4, #1
 80051ec:	e7e6      	b.n	80051bc <__kernel_rem_pio2+0x37c>
 80051ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051f0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80051f4:	f7fb f996 	bl	8000524 <__aeabi_i2d>
 80051f8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 80054c0 <__kernel_rem_pio2+0x680>
 80051fc:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005200:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005204:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005208:	46b2      	mov	sl, r6
 800520a:	f04f 0800 	mov.w	r8, #0
 800520e:	9b05      	ldr	r3, [sp, #20]
 8005210:	4598      	cmp	r8, r3
 8005212:	dd05      	ble.n	8005220 <__kernel_rem_pio2+0x3e0>
 8005214:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005218:	3701      	adds	r7, #1
 800521a:	eca5 7b02 	vstmia	r5!, {d7}
 800521e:	e7df      	b.n	80051e0 <__kernel_rem_pio2+0x3a0>
 8005220:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8005224:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005228:	f7fb f9e6 	bl	80005f8 <__aeabi_dmul>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005234:	f7fb f82a 	bl	800028c <__adddf3>
 8005238:	f108 0801 	add.w	r8, r8, #1
 800523c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005240:	e7e5      	b.n	800520e <__kernel_rem_pio2+0x3ce>
 8005242:	f1cb 0000 	rsb	r0, fp, #0
 8005246:	ec47 6b10 	vmov	d0, r6, r7
 800524a:	f000 f951 	bl	80054f0 <scalbn>
 800524e:	ec55 4b10 	vmov	r4, r5, d0
 8005252:	4b9d      	ldr	r3, [pc, #628]	@ (80054c8 <__kernel_rem_pio2+0x688>)
 8005254:	2200      	movs	r2, #0
 8005256:	4620      	mov	r0, r4
 8005258:	4629      	mov	r1, r5
 800525a:	f7fb fc53 	bl	8000b04 <__aeabi_dcmpge>
 800525e:	b300      	cbz	r0, 80052a2 <__kernel_rem_pio2+0x462>
 8005260:	4b9a      	ldr	r3, [pc, #616]	@ (80054cc <__kernel_rem_pio2+0x68c>)
 8005262:	2200      	movs	r2, #0
 8005264:	4620      	mov	r0, r4
 8005266:	4629      	mov	r1, r5
 8005268:	f7fb f9c6 	bl	80005f8 <__aeabi_dmul>
 800526c:	f7fb fc5e 	bl	8000b2c <__aeabi_d2iz>
 8005270:	4606      	mov	r6, r0
 8005272:	f7fb f957 	bl	8000524 <__aeabi_i2d>
 8005276:	4b94      	ldr	r3, [pc, #592]	@ (80054c8 <__kernel_rem_pio2+0x688>)
 8005278:	2200      	movs	r2, #0
 800527a:	f7fb f9bd 	bl	80005f8 <__aeabi_dmul>
 800527e:	460b      	mov	r3, r1
 8005280:	4602      	mov	r2, r0
 8005282:	4629      	mov	r1, r5
 8005284:	4620      	mov	r0, r4
 8005286:	f7fa ffff 	bl	8000288 <__aeabi_dsub>
 800528a:	f7fb fc4f 	bl	8000b2c <__aeabi_d2iz>
 800528e:	ab0c      	add	r3, sp, #48	@ 0x30
 8005290:	f10b 0b18 	add.w	fp, fp, #24
 8005294:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8005298:	f108 0801 	add.w	r8, r8, #1
 800529c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80052a0:	e722      	b.n	80050e8 <__kernel_rem_pio2+0x2a8>
 80052a2:	4620      	mov	r0, r4
 80052a4:	4629      	mov	r1, r5
 80052a6:	f7fb fc41 	bl	8000b2c <__aeabi_d2iz>
 80052aa:	ab0c      	add	r3, sp, #48	@ 0x30
 80052ac:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80052b0:	e71a      	b.n	80050e8 <__kernel_rem_pio2+0x2a8>
 80052b2:	ab0c      	add	r3, sp, #48	@ 0x30
 80052b4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80052b8:	f7fb f934 	bl	8000524 <__aeabi_i2d>
 80052bc:	4622      	mov	r2, r4
 80052be:	462b      	mov	r3, r5
 80052c0:	f7fb f99a 	bl	80005f8 <__aeabi_dmul>
 80052c4:	4652      	mov	r2, sl
 80052c6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80052ca:	465b      	mov	r3, fp
 80052cc:	4620      	mov	r0, r4
 80052ce:	4629      	mov	r1, r5
 80052d0:	f7fb f992 	bl	80005f8 <__aeabi_dmul>
 80052d4:	3e01      	subs	r6, #1
 80052d6:	4604      	mov	r4, r0
 80052d8:	460d      	mov	r5, r1
 80052da:	e718      	b.n	800510e <__kernel_rem_pio2+0x2ce>
 80052dc:	9906      	ldr	r1, [sp, #24]
 80052de:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80052e2:	9106      	str	r1, [sp, #24]
 80052e4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80052e8:	f7fb f986 	bl	80005f8 <__aeabi_dmul>
 80052ec:	4602      	mov	r2, r0
 80052ee:	460b      	mov	r3, r1
 80052f0:	4650      	mov	r0, sl
 80052f2:	4659      	mov	r1, fp
 80052f4:	f7fa ffca 	bl	800028c <__adddf3>
 80052f8:	3601      	adds	r6, #1
 80052fa:	4682      	mov	sl, r0
 80052fc:	468b      	mov	fp, r1
 80052fe:	9b00      	ldr	r3, [sp, #0]
 8005300:	429e      	cmp	r6, r3
 8005302:	dc01      	bgt.n	8005308 <__kernel_rem_pio2+0x4c8>
 8005304:	42b5      	cmp	r5, r6
 8005306:	dae9      	bge.n	80052dc <__kernel_rem_pio2+0x49c>
 8005308:	ab48      	add	r3, sp, #288	@ 0x120
 800530a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800530e:	e9c5 ab00 	strd	sl, fp, [r5]
 8005312:	3c01      	subs	r4, #1
 8005314:	e6ff      	b.n	8005116 <__kernel_rem_pio2+0x2d6>
 8005316:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8005318:	2b02      	cmp	r3, #2
 800531a:	dc0b      	bgt.n	8005334 <__kernel_rem_pio2+0x4f4>
 800531c:	2b00      	cmp	r3, #0
 800531e:	dc39      	bgt.n	8005394 <__kernel_rem_pio2+0x554>
 8005320:	d05d      	beq.n	80053de <__kernel_rem_pio2+0x59e>
 8005322:	9b02      	ldr	r3, [sp, #8]
 8005324:	f003 0007 	and.w	r0, r3, #7
 8005328:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800532c:	ecbd 8b02 	vpop	{d8}
 8005330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005334:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8005336:	2b03      	cmp	r3, #3
 8005338:	d1f3      	bne.n	8005322 <__kernel_rem_pio2+0x4e2>
 800533a:	9b05      	ldr	r3, [sp, #20]
 800533c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005340:	eb0d 0403 	add.w	r4, sp, r3
 8005344:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8005348:	4625      	mov	r5, r4
 800534a:	46c2      	mov	sl, r8
 800534c:	f1ba 0f00 	cmp.w	sl, #0
 8005350:	f1a5 0508 	sub.w	r5, r5, #8
 8005354:	dc6b      	bgt.n	800542e <__kernel_rem_pio2+0x5ee>
 8005356:	4645      	mov	r5, r8
 8005358:	2d01      	cmp	r5, #1
 800535a:	f1a4 0408 	sub.w	r4, r4, #8
 800535e:	f300 8087 	bgt.w	8005470 <__kernel_rem_pio2+0x630>
 8005362:	9c05      	ldr	r4, [sp, #20]
 8005364:	ab48      	add	r3, sp, #288	@ 0x120
 8005366:	441c      	add	r4, r3
 8005368:	2000      	movs	r0, #0
 800536a:	2100      	movs	r1, #0
 800536c:	f1b8 0f01 	cmp.w	r8, #1
 8005370:	f300 809c 	bgt.w	80054ac <__kernel_rem_pio2+0x66c>
 8005374:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8005378:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800537c:	f1b9 0f00 	cmp.w	r9, #0
 8005380:	f040 80a6 	bne.w	80054d0 <__kernel_rem_pio2+0x690>
 8005384:	9b04      	ldr	r3, [sp, #16]
 8005386:	e9c3 7800 	strd	r7, r8, [r3]
 800538a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800538e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005392:	e7c6      	b.n	8005322 <__kernel_rem_pio2+0x4e2>
 8005394:	9d05      	ldr	r5, [sp, #20]
 8005396:	ab48      	add	r3, sp, #288	@ 0x120
 8005398:	441d      	add	r5, r3
 800539a:	4644      	mov	r4, r8
 800539c:	2000      	movs	r0, #0
 800539e:	2100      	movs	r1, #0
 80053a0:	2c00      	cmp	r4, #0
 80053a2:	da35      	bge.n	8005410 <__kernel_rem_pio2+0x5d0>
 80053a4:	f1b9 0f00 	cmp.w	r9, #0
 80053a8:	d038      	beq.n	800541c <__kernel_rem_pio2+0x5dc>
 80053aa:	4602      	mov	r2, r0
 80053ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80053b0:	9c04      	ldr	r4, [sp, #16]
 80053b2:	e9c4 2300 	strd	r2, r3, [r4]
 80053b6:	4602      	mov	r2, r0
 80053b8:	460b      	mov	r3, r1
 80053ba:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80053be:	f7fa ff63 	bl	8000288 <__aeabi_dsub>
 80053c2:	ad4a      	add	r5, sp, #296	@ 0x128
 80053c4:	2401      	movs	r4, #1
 80053c6:	45a0      	cmp	r8, r4
 80053c8:	da2b      	bge.n	8005422 <__kernel_rem_pio2+0x5e2>
 80053ca:	f1b9 0f00 	cmp.w	r9, #0
 80053ce:	d002      	beq.n	80053d6 <__kernel_rem_pio2+0x596>
 80053d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80053d4:	4619      	mov	r1, r3
 80053d6:	9b04      	ldr	r3, [sp, #16]
 80053d8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80053dc:	e7a1      	b.n	8005322 <__kernel_rem_pio2+0x4e2>
 80053de:	9c05      	ldr	r4, [sp, #20]
 80053e0:	ab48      	add	r3, sp, #288	@ 0x120
 80053e2:	441c      	add	r4, r3
 80053e4:	2000      	movs	r0, #0
 80053e6:	2100      	movs	r1, #0
 80053e8:	f1b8 0f00 	cmp.w	r8, #0
 80053ec:	da09      	bge.n	8005402 <__kernel_rem_pio2+0x5c2>
 80053ee:	f1b9 0f00 	cmp.w	r9, #0
 80053f2:	d002      	beq.n	80053fa <__kernel_rem_pio2+0x5ba>
 80053f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80053f8:	4619      	mov	r1, r3
 80053fa:	9b04      	ldr	r3, [sp, #16]
 80053fc:	e9c3 0100 	strd	r0, r1, [r3]
 8005400:	e78f      	b.n	8005322 <__kernel_rem_pio2+0x4e2>
 8005402:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005406:	f7fa ff41 	bl	800028c <__adddf3>
 800540a:	f108 38ff 	add.w	r8, r8, #4294967295
 800540e:	e7eb      	b.n	80053e8 <__kernel_rem_pio2+0x5a8>
 8005410:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8005414:	f7fa ff3a 	bl	800028c <__adddf3>
 8005418:	3c01      	subs	r4, #1
 800541a:	e7c1      	b.n	80053a0 <__kernel_rem_pio2+0x560>
 800541c:	4602      	mov	r2, r0
 800541e:	460b      	mov	r3, r1
 8005420:	e7c6      	b.n	80053b0 <__kernel_rem_pio2+0x570>
 8005422:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8005426:	f7fa ff31 	bl	800028c <__adddf3>
 800542a:	3401      	adds	r4, #1
 800542c:	e7cb      	b.n	80053c6 <__kernel_rem_pio2+0x586>
 800542e:	ed95 7b00 	vldr	d7, [r5]
 8005432:	ed8d 7b00 	vstr	d7, [sp]
 8005436:	ed95 7b02 	vldr	d7, [r5, #8]
 800543a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800543e:	ec53 2b17 	vmov	r2, r3, d7
 8005442:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005446:	f7fa ff21 	bl	800028c <__adddf3>
 800544a:	4602      	mov	r2, r0
 800544c:	460b      	mov	r3, r1
 800544e:	4606      	mov	r6, r0
 8005450:	460f      	mov	r7, r1
 8005452:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005456:	f7fa ff17 	bl	8000288 <__aeabi_dsub>
 800545a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800545e:	f7fa ff15 	bl	800028c <__adddf3>
 8005462:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005466:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800546a:	e9c5 6700 	strd	r6, r7, [r5]
 800546e:	e76d      	b.n	800534c <__kernel_rem_pio2+0x50c>
 8005470:	ed94 7b00 	vldr	d7, [r4]
 8005474:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8005478:	ec51 0b17 	vmov	r0, r1, d7
 800547c:	4652      	mov	r2, sl
 800547e:	465b      	mov	r3, fp
 8005480:	ed8d 7b00 	vstr	d7, [sp]
 8005484:	f7fa ff02 	bl	800028c <__adddf3>
 8005488:	4602      	mov	r2, r0
 800548a:	460b      	mov	r3, r1
 800548c:	4606      	mov	r6, r0
 800548e:	460f      	mov	r7, r1
 8005490:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005494:	f7fa fef8 	bl	8000288 <__aeabi_dsub>
 8005498:	4652      	mov	r2, sl
 800549a:	465b      	mov	r3, fp
 800549c:	f7fa fef6 	bl	800028c <__adddf3>
 80054a0:	3d01      	subs	r5, #1
 80054a2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80054a6:	e9c4 6700 	strd	r6, r7, [r4]
 80054aa:	e755      	b.n	8005358 <__kernel_rem_pio2+0x518>
 80054ac:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80054b0:	f7fa feec 	bl	800028c <__adddf3>
 80054b4:	f108 38ff 	add.w	r8, r8, #4294967295
 80054b8:	e758      	b.n	800536c <__kernel_rem_pio2+0x52c>
 80054ba:	bf00      	nop
 80054bc:	f3af 8000 	nop.w
	...
 80054c8:	41700000 	.word	0x41700000
 80054cc:	3e700000 	.word	0x3e700000
 80054d0:	9b04      	ldr	r3, [sp, #16]
 80054d2:	9a04      	ldr	r2, [sp, #16]
 80054d4:	601f      	str	r7, [r3, #0]
 80054d6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80054da:	605c      	str	r4, [r3, #4]
 80054dc:	609d      	str	r5, [r3, #8]
 80054de:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80054e2:	60d3      	str	r3, [r2, #12]
 80054e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80054e8:	6110      	str	r0, [r2, #16]
 80054ea:	6153      	str	r3, [r2, #20]
 80054ec:	e719      	b.n	8005322 <__kernel_rem_pio2+0x4e2>
 80054ee:	bf00      	nop

080054f0 <scalbn>:
 80054f0:	b570      	push	{r4, r5, r6, lr}
 80054f2:	ec55 4b10 	vmov	r4, r5, d0
 80054f6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80054fa:	4606      	mov	r6, r0
 80054fc:	462b      	mov	r3, r5
 80054fe:	b991      	cbnz	r1, 8005526 <scalbn+0x36>
 8005500:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8005504:	4323      	orrs	r3, r4
 8005506:	d03d      	beq.n	8005584 <scalbn+0x94>
 8005508:	4b35      	ldr	r3, [pc, #212]	@ (80055e0 <scalbn+0xf0>)
 800550a:	4620      	mov	r0, r4
 800550c:	4629      	mov	r1, r5
 800550e:	2200      	movs	r2, #0
 8005510:	f7fb f872 	bl	80005f8 <__aeabi_dmul>
 8005514:	4b33      	ldr	r3, [pc, #204]	@ (80055e4 <scalbn+0xf4>)
 8005516:	429e      	cmp	r6, r3
 8005518:	4604      	mov	r4, r0
 800551a:	460d      	mov	r5, r1
 800551c:	da0f      	bge.n	800553e <scalbn+0x4e>
 800551e:	a328      	add	r3, pc, #160	@ (adr r3, 80055c0 <scalbn+0xd0>)
 8005520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005524:	e01e      	b.n	8005564 <scalbn+0x74>
 8005526:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800552a:	4291      	cmp	r1, r2
 800552c:	d10b      	bne.n	8005546 <scalbn+0x56>
 800552e:	4622      	mov	r2, r4
 8005530:	4620      	mov	r0, r4
 8005532:	4629      	mov	r1, r5
 8005534:	f7fa feaa 	bl	800028c <__adddf3>
 8005538:	4604      	mov	r4, r0
 800553a:	460d      	mov	r5, r1
 800553c:	e022      	b.n	8005584 <scalbn+0x94>
 800553e:	460b      	mov	r3, r1
 8005540:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005544:	3936      	subs	r1, #54	@ 0x36
 8005546:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800554a:	4296      	cmp	r6, r2
 800554c:	dd0d      	ble.n	800556a <scalbn+0x7a>
 800554e:	2d00      	cmp	r5, #0
 8005550:	a11d      	add	r1, pc, #116	@ (adr r1, 80055c8 <scalbn+0xd8>)
 8005552:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005556:	da02      	bge.n	800555e <scalbn+0x6e>
 8005558:	a11d      	add	r1, pc, #116	@ (adr r1, 80055d0 <scalbn+0xe0>)
 800555a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800555e:	a31a      	add	r3, pc, #104	@ (adr r3, 80055c8 <scalbn+0xd8>)
 8005560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005564:	f7fb f848 	bl	80005f8 <__aeabi_dmul>
 8005568:	e7e6      	b.n	8005538 <scalbn+0x48>
 800556a:	1872      	adds	r2, r6, r1
 800556c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8005570:	428a      	cmp	r2, r1
 8005572:	dcec      	bgt.n	800554e <scalbn+0x5e>
 8005574:	2a00      	cmp	r2, #0
 8005576:	dd08      	ble.n	800558a <scalbn+0x9a>
 8005578:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800557c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005580:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005584:	ec45 4b10 	vmov	d0, r4, r5
 8005588:	bd70      	pop	{r4, r5, r6, pc}
 800558a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800558e:	da08      	bge.n	80055a2 <scalbn+0xb2>
 8005590:	2d00      	cmp	r5, #0
 8005592:	a10b      	add	r1, pc, #44	@ (adr r1, 80055c0 <scalbn+0xd0>)
 8005594:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005598:	dac1      	bge.n	800551e <scalbn+0x2e>
 800559a:	a10f      	add	r1, pc, #60	@ (adr r1, 80055d8 <scalbn+0xe8>)
 800559c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055a0:	e7bd      	b.n	800551e <scalbn+0x2e>
 80055a2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80055a6:	3236      	adds	r2, #54	@ 0x36
 80055a8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80055ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80055b0:	4620      	mov	r0, r4
 80055b2:	4b0d      	ldr	r3, [pc, #52]	@ (80055e8 <scalbn+0xf8>)
 80055b4:	4629      	mov	r1, r5
 80055b6:	2200      	movs	r2, #0
 80055b8:	e7d4      	b.n	8005564 <scalbn+0x74>
 80055ba:	bf00      	nop
 80055bc:	f3af 8000 	nop.w
 80055c0:	c2f8f359 	.word	0xc2f8f359
 80055c4:	01a56e1f 	.word	0x01a56e1f
 80055c8:	8800759c 	.word	0x8800759c
 80055cc:	7e37e43c 	.word	0x7e37e43c
 80055d0:	8800759c 	.word	0x8800759c
 80055d4:	fe37e43c 	.word	0xfe37e43c
 80055d8:	c2f8f359 	.word	0xc2f8f359
 80055dc:	81a56e1f 	.word	0x81a56e1f
 80055e0:	43500000 	.word	0x43500000
 80055e4:	ffff3cb0 	.word	0xffff3cb0
 80055e8:	3c900000 	.word	0x3c900000
 80055ec:	00000000 	.word	0x00000000

080055f0 <floor>:
 80055f0:	ec51 0b10 	vmov	r0, r1, d0
 80055f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80055f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055fc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8005600:	2e13      	cmp	r6, #19
 8005602:	460c      	mov	r4, r1
 8005604:	4605      	mov	r5, r0
 8005606:	4680      	mov	r8, r0
 8005608:	dc34      	bgt.n	8005674 <floor+0x84>
 800560a:	2e00      	cmp	r6, #0
 800560c:	da17      	bge.n	800563e <floor+0x4e>
 800560e:	a332      	add	r3, pc, #200	@ (adr r3, 80056d8 <floor+0xe8>)
 8005610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005614:	f7fa fe3a 	bl	800028c <__adddf3>
 8005618:	2200      	movs	r2, #0
 800561a:	2300      	movs	r3, #0
 800561c:	f7fb fa7c 	bl	8000b18 <__aeabi_dcmpgt>
 8005620:	b150      	cbz	r0, 8005638 <floor+0x48>
 8005622:	2c00      	cmp	r4, #0
 8005624:	da55      	bge.n	80056d2 <floor+0xe2>
 8005626:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800562a:	432c      	orrs	r4, r5
 800562c:	2500      	movs	r5, #0
 800562e:	42ac      	cmp	r4, r5
 8005630:	4c2b      	ldr	r4, [pc, #172]	@ (80056e0 <floor+0xf0>)
 8005632:	bf08      	it	eq
 8005634:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8005638:	4621      	mov	r1, r4
 800563a:	4628      	mov	r0, r5
 800563c:	e023      	b.n	8005686 <floor+0x96>
 800563e:	4f29      	ldr	r7, [pc, #164]	@ (80056e4 <floor+0xf4>)
 8005640:	4137      	asrs	r7, r6
 8005642:	ea01 0307 	and.w	r3, r1, r7
 8005646:	4303      	orrs	r3, r0
 8005648:	d01d      	beq.n	8005686 <floor+0x96>
 800564a:	a323      	add	r3, pc, #140	@ (adr r3, 80056d8 <floor+0xe8>)
 800564c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005650:	f7fa fe1c 	bl	800028c <__adddf3>
 8005654:	2200      	movs	r2, #0
 8005656:	2300      	movs	r3, #0
 8005658:	f7fb fa5e 	bl	8000b18 <__aeabi_dcmpgt>
 800565c:	2800      	cmp	r0, #0
 800565e:	d0eb      	beq.n	8005638 <floor+0x48>
 8005660:	2c00      	cmp	r4, #0
 8005662:	bfbe      	ittt	lt
 8005664:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8005668:	4133      	asrlt	r3, r6
 800566a:	18e4      	addlt	r4, r4, r3
 800566c:	ea24 0407 	bic.w	r4, r4, r7
 8005670:	2500      	movs	r5, #0
 8005672:	e7e1      	b.n	8005638 <floor+0x48>
 8005674:	2e33      	cmp	r6, #51	@ 0x33
 8005676:	dd0a      	ble.n	800568e <floor+0x9e>
 8005678:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800567c:	d103      	bne.n	8005686 <floor+0x96>
 800567e:	4602      	mov	r2, r0
 8005680:	460b      	mov	r3, r1
 8005682:	f7fa fe03 	bl	800028c <__adddf3>
 8005686:	ec41 0b10 	vmov	d0, r0, r1
 800568a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800568e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8005692:	f04f 37ff 	mov.w	r7, #4294967295
 8005696:	40df      	lsrs	r7, r3
 8005698:	4207      	tst	r7, r0
 800569a:	d0f4      	beq.n	8005686 <floor+0x96>
 800569c:	a30e      	add	r3, pc, #56	@ (adr r3, 80056d8 <floor+0xe8>)
 800569e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a2:	f7fa fdf3 	bl	800028c <__adddf3>
 80056a6:	2200      	movs	r2, #0
 80056a8:	2300      	movs	r3, #0
 80056aa:	f7fb fa35 	bl	8000b18 <__aeabi_dcmpgt>
 80056ae:	2800      	cmp	r0, #0
 80056b0:	d0c2      	beq.n	8005638 <floor+0x48>
 80056b2:	2c00      	cmp	r4, #0
 80056b4:	da0a      	bge.n	80056cc <floor+0xdc>
 80056b6:	2e14      	cmp	r6, #20
 80056b8:	d101      	bne.n	80056be <floor+0xce>
 80056ba:	3401      	adds	r4, #1
 80056bc:	e006      	b.n	80056cc <floor+0xdc>
 80056be:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80056c2:	2301      	movs	r3, #1
 80056c4:	40b3      	lsls	r3, r6
 80056c6:	441d      	add	r5, r3
 80056c8:	4545      	cmp	r5, r8
 80056ca:	d3f6      	bcc.n	80056ba <floor+0xca>
 80056cc:	ea25 0507 	bic.w	r5, r5, r7
 80056d0:	e7b2      	b.n	8005638 <floor+0x48>
 80056d2:	2500      	movs	r5, #0
 80056d4:	462c      	mov	r4, r5
 80056d6:	e7af      	b.n	8005638 <floor+0x48>
 80056d8:	8800759c 	.word	0x8800759c
 80056dc:	7e37e43c 	.word	0x7e37e43c
 80056e0:	bff00000 	.word	0xbff00000
 80056e4:	000fffff 	.word	0x000fffff

080056e8 <_init>:
 80056e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ea:	bf00      	nop
 80056ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ee:	bc08      	pop	{r3}
 80056f0:	469e      	mov	lr, r3
 80056f2:	4770      	bx	lr

080056f4 <_fini>:
 80056f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056f6:	bf00      	nop
 80056f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056fa:	bc08      	pop	{r3}
 80056fc:	469e      	mov	lr, r3
 80056fe:	4770      	bx	lr
