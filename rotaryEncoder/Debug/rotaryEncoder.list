
rotaryEncoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a08  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08004ba8  08004ba8  00005ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c00  08004c00  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004c00  08004c00  00005c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c08  08004c08  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c08  08004c08  00005c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c0c  08004c0c  00005c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004c10  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  20000068  08004c78  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08004c78  00006324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e12d  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000222e  00000000  00000000  000141c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  000163f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a5e  00000000  00000000  00017150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a61  00000000  00000000  00017bae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff80  00000000  00000000  0002f60f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090036  00000000  00000000  0003f58f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cf5c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f00  00000000  00000000  000cf608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000d3508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004b90 	.word	0x08004b90

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004b90 	.word	0x08004b90

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <app>:
// 외부 장치 핸들 선언
extern TIM_HandleTypeDef htim1; // for Rotary encoder
extern TIM_HandleTypeDef htim3; // for Servo
extern UART_HandleTypeDef huart2;

void app(){
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	//초기화
	initUart(&huart2);
 8000574:	4816      	ldr	r0, [pc, #88]	@ (80005d0 <app+0x60>)
 8000576:	f000 fbf7 	bl	8000d68 <initUart>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1);
 800057a:	2100      	movs	r1, #0
 800057c:	4815      	ldr	r0, [pc, #84]	@ (80005d4 <app+0x64>)
 800057e:	f001 fe23 	bl	80021c8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_2);
 8000582:	2104      	movs	r1, #4
 8000584:	4813      	ldr	r0, [pc, #76]	@ (80005d4 <app+0x64>)
 8000586:	f001 fe1f 	bl	80021c8 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800058a:	2100      	movs	r1, #0
 800058c:	4812      	ldr	r0, [pc, #72]	@ (80005d8 <app+0x68>)
 800058e:	f001 fcc5 	bl	8001f1c <HAL_TIM_PWM_Start>
	while(1){
		static uint16_t oldCount, curCount;
		curCount = htim1.Instance->CNT;
 8000592:	4b10      	ldr	r3, [pc, #64]	@ (80005d4 <app+0x64>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000598:	b29a      	uxth	r2, r3
 800059a:	4b10      	ldr	r3, [pc, #64]	@ (80005dc <app+0x6c>)
 800059c:	801a      	strh	r2, [r3, #0]
		if(oldCount!=curCount){
 800059e:	4b10      	ldr	r3, [pc, #64]	@ (80005e0 <app+0x70>)
 80005a0:	881a      	ldrh	r2, [r3, #0]
 80005a2:	4b0e      	ldr	r3, [pc, #56]	@ (80005dc <app+0x6c>)
 80005a4:	881b      	ldrh	r3, [r3, #0]
 80005a6:	429a      	cmp	r2, r3
 80005a8:	d0f3      	beq.n	8000592 <app+0x22>
			printf("count = %d\n",curCount);
 80005aa:	4b0c      	ldr	r3, [pc, #48]	@ (80005dc <app+0x6c>)
 80005ac:	881b      	ldrh	r3, [r3, #0]
 80005ae:	4619      	mov	r1, r3
 80005b0:	480c      	ldr	r0, [pc, #48]	@ (80005e4 <app+0x74>)
 80005b2:	f003 fc7f 	bl	8003eb4 <iprintf>
			htim3.Instance->CCR1 = curCount+1000;
 80005b6:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <app+0x6c>)
 80005b8:	881b      	ldrh	r3, [r3, #0]
 80005ba:	f503 727a 	add.w	r2, r3, #1000	@ 0x3e8
 80005be:	4b06      	ldr	r3, [pc, #24]	@ (80005d8 <app+0x68>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	635a      	str	r2, [r3, #52]	@ 0x34
			oldCount = curCount;
 80005c4:	4b05      	ldr	r3, [pc, #20]	@ (80005dc <app+0x6c>)
 80005c6:	881a      	ldrh	r2, [r3, #0]
 80005c8:	4b05      	ldr	r3, [pc, #20]	@ (80005e0 <app+0x70>)
 80005ca:	801a      	strh	r2, [r3, #0]
	while(1){
 80005cc:	e7e1      	b.n	8000592 <app+0x22>
 80005ce:	bf00      	nop
 80005d0:	20000118 	.word	0x20000118
 80005d4:	20000088 	.word	0x20000088
 80005d8:	200000d0 	.word	0x200000d0
 80005dc:	20000084 	.word	0x20000084
 80005e0:	20000086 	.word	0x20000086
 80005e4:	08004ba8 	.word	0x08004ba8

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ec:	f000 fbfc 	bl	8000de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f0:	f000 f80c 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f4:	f000 f962 	bl	80008bc <MX_GPIO_Init>
  MX_TIM1_Init();
 80005f8:	f000 f866 	bl	80006c8 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80005fc:	f000 f934 	bl	8000868 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000600:	f000 f8ba 	bl	8000778 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  app();
 8000604:	f7ff ffb4 	bl	8000570 <app>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000608:	bf00      	nop
 800060a:	e7fd      	b.n	8000608 <main+0x20>

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b094      	sub	sp, #80	@ 0x50
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	2230      	movs	r2, #48	@ 0x30
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f003 fc9f 	bl	8003f5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	4b22      	ldr	r3, [pc, #136]	@ (80006c0 <SystemClock_Config+0xb4>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000638:	4a21      	ldr	r2, [pc, #132]	@ (80006c0 <SystemClock_Config+0xb4>)
 800063a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800063e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000640:	4b1f      	ldr	r3, [pc, #124]	@ (80006c0 <SystemClock_Config+0xb4>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000644:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	4b1c      	ldr	r3, [pc, #112]	@ (80006c4 <SystemClock_Config+0xb8>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a1b      	ldr	r2, [pc, #108]	@ (80006c4 <SystemClock_Config+0xb8>)
 8000656:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4b19      	ldr	r3, [pc, #100]	@ (80006c4 <SystemClock_Config+0xb8>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000668:	2302      	movs	r3, #2
 800066a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066c:	2301      	movs	r3, #1
 800066e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000670:	2310      	movs	r3, #16
 8000672:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000674:	2300      	movs	r3, #0
 8000676:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 0320 	add.w	r3, r7, #32
 800067c:	4618      	mov	r0, r3
 800067e:	f000 ff4d 	bl	800151c <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000688:	f000 f932 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	230f      	movs	r3, #15
 800068e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000690:	2300      	movs	r3, #0
 8000692:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 f9b0 	bl	8001a0c <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006b2:	f000 f91d 	bl	80008f0 <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	3750      	adds	r7, #80	@ 0x50
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08c      	sub	sp, #48	@ 0x30
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80006ce:	f107 030c 	add.w	r3, r7, #12
 80006d2:	2224      	movs	r2, #36	@ 0x24
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f003 fc41 	bl	8003f5e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006e4:	4b22      	ldr	r3, [pc, #136]	@ (8000770 <MX_TIM1_Init+0xa8>)
 80006e6:	4a23      	ldr	r2, [pc, #140]	@ (8000774 <MX_TIM1_Init+0xac>)
 80006e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006ea:	4b21      	ldr	r3, [pc, #132]	@ (8000770 <MX_TIM1_Init+0xa8>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000770 <MX_TIM1_Init+0xa8>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80006f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000770 <MX_TIM1_Init+0xa8>)
 80006f8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80006fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000770 <MX_TIM1_Init+0xa8>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000704:	4b1a      	ldr	r3, [pc, #104]	@ (8000770 <MX_TIM1_Init+0xa8>)
 8000706:	2200      	movs	r2, #0
 8000708:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800070a:	4b19      	ldr	r3, [pc, #100]	@ (8000770 <MX_TIM1_Init+0xa8>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000710:	2301      	movs	r3, #1
 8000712:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000714:	2300      	movs	r3, #0
 8000716:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000718:	2301      	movs	r3, #1
 800071a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000724:	2300      	movs	r3, #0
 8000726:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000728:	2301      	movs	r3, #1
 800072a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	4619      	mov	r1, r3
 800073a:	480d      	ldr	r0, [pc, #52]	@ (8000770 <MX_TIM1_Init+0xa8>)
 800073c:	f001 fc9e 	bl	800207c <HAL_TIM_Encoder_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000746:	f000 f8d3 	bl	80008f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800074e:	2300      	movs	r3, #0
 8000750:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	4619      	mov	r1, r3
 8000756:	4806      	ldr	r0, [pc, #24]	@ (8000770 <MX_TIM1_Init+0xa8>)
 8000758:	f002 fa26 	bl	8002ba8 <HAL_TIMEx_MasterConfigSynchronization>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000762:	f000 f8c5 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	3730      	adds	r7, #48	@ 0x30
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000088 	.word	0x20000088
 8000774:	40010000 	.word	0x40010000

08000778 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08e      	sub	sp, #56	@ 0x38
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800077e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800078c:	f107 0320 	add.w	r3, r7, #32
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
 80007a4:	615a      	str	r2, [r3, #20]
 80007a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007a8:	4b2d      	ldr	r3, [pc, #180]	@ (8000860 <MX_TIM3_Init+0xe8>)
 80007aa:	4a2e      	ldr	r2, [pc, #184]	@ (8000864 <MX_TIM3_Init+0xec>)
 80007ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 80007ae:	4b2c      	ldr	r3, [pc, #176]	@ (8000860 <MX_TIM3_Init+0xe8>)
 80007b0:	220f      	movs	r2, #15
 80007b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000860 <MX_TIM3_Init+0xe8>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 80007ba:	4b29      	ldr	r3, [pc, #164]	@ (8000860 <MX_TIM3_Init+0xe8>)
 80007bc:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80007c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c2:	4b27      	ldr	r3, [pc, #156]	@ (8000860 <MX_TIM3_Init+0xe8>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c8:	4b25      	ldr	r3, [pc, #148]	@ (8000860 <MX_TIM3_Init+0xe8>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007ce:	4824      	ldr	r0, [pc, #144]	@ (8000860 <MX_TIM3_Init+0xe8>)
 80007d0:	f001 fafc 	bl	8001dcc <HAL_TIM_Base_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80007da:	f000 f889 	bl	80008f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007e8:	4619      	mov	r1, r3
 80007ea:	481d      	ldr	r0, [pc, #116]	@ (8000860 <MX_TIM3_Init+0xe8>)
 80007ec:	f001 fe3c 	bl	8002468 <HAL_TIM_ConfigClockSource>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80007f6:	f000 f87b 	bl	80008f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007fa:	4819      	ldr	r0, [pc, #100]	@ (8000860 <MX_TIM3_Init+0xe8>)
 80007fc:	f001 fb35 	bl	8001e6a <HAL_TIM_PWM_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000806:	f000 f873 	bl	80008f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800080a:	2300      	movs	r3, #0
 800080c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800080e:	2300      	movs	r3, #0
 8000810:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000812:	f107 0320 	add.w	r3, r7, #32
 8000816:	4619      	mov	r1, r3
 8000818:	4811      	ldr	r0, [pc, #68]	@ (8000860 <MX_TIM3_Init+0xe8>)
 800081a:	f002 f9c5 	bl	8002ba8 <HAL_TIMEx_MasterConfigSynchronization>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000824:	f000 f864 	bl	80008f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000828:	2360      	movs	r3, #96	@ 0x60
 800082a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500-1;
 800082c:	f240 53db 	movw	r3, #1499	@ 0x5db
 8000830:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	2200      	movs	r2, #0
 800083e:	4619      	mov	r1, r3
 8000840:	4807      	ldr	r0, [pc, #28]	@ (8000860 <MX_TIM3_Init+0xe8>)
 8000842:	f001 fd4f 	bl	80022e4 <HAL_TIM_PWM_ConfigChannel>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800084c:	f000 f850 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000850:	4803      	ldr	r0, [pc, #12]	@ (8000860 <MX_TIM3_Init+0xe8>)
 8000852:	f000 f8e5 	bl	8000a20 <HAL_TIM_MspPostInit>

}
 8000856:	bf00      	nop
 8000858:	3738      	adds	r7, #56	@ 0x38
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200000d0 	.word	0x200000d0
 8000864:	40000400 	.word	0x40000400

08000868 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800086c:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 800086e:	4a12      	ldr	r2, [pc, #72]	@ (80008b8 <MX_USART2_UART_Init+0x50>)
 8000870:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000872:	4b10      	ldr	r3, [pc, #64]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000874:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000878:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800087a:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000880:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800088c:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 800088e:	220c      	movs	r2, #12
 8000890:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000892:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	@ (80008b4 <MX_USART2_UART_Init+0x4c>)
 80008a0:	f002 f9f0 	bl	8002c84 <HAL_UART_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008aa:	f000 f821 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000118 	.word	0x20000118
 80008b8:	40004400 	.word	0x40004400

080008bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <MX_GPIO_Init+0x30>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	4a08      	ldr	r2, [pc, #32]	@ (80008ec <MX_GPIO_Init+0x30>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d2:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <MX_GPIO_Init+0x30>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <Error_Handler+0x8>

080008fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b10      	ldr	r3, [pc, #64]	@ (8000948 <HAL_MspInit+0x4c>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800090a:	4a0f      	ldr	r2, [pc, #60]	@ (8000948 <HAL_MspInit+0x4c>)
 800090c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000910:	6453      	str	r3, [r2, #68]	@ 0x44
 8000912:	4b0d      	ldr	r3, [pc, #52]	@ (8000948 <HAL_MspInit+0x4c>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000916:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	4b09      	ldr	r3, [pc, #36]	@ (8000948 <HAL_MspInit+0x4c>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000926:	4a08      	ldr	r2, [pc, #32]	@ (8000948 <HAL_MspInit+0x4c>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800092c:	6413      	str	r3, [r2, #64]	@ 0x40
 800092e:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <HAL_MspInit+0x4c>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800

0800094c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	@ 0x28
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a19      	ldr	r2, [pc, #100]	@ (80009d0 <HAL_TIM_Encoder_MspInit+0x84>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d12c      	bne.n	80009c8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	4b18      	ldr	r3, [pc, #96]	@ (80009d4 <HAL_TIM_Encoder_MspInit+0x88>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000976:	4a17      	ldr	r2, [pc, #92]	@ (80009d4 <HAL_TIM_Encoder_MspInit+0x88>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6453      	str	r3, [r2, #68]	@ 0x44
 800097e:	4b15      	ldr	r3, [pc, #84]	@ (80009d4 <HAL_TIM_Encoder_MspInit+0x88>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	4b11      	ldr	r3, [pc, #68]	@ (80009d4 <HAL_TIM_Encoder_MspInit+0x88>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	4a10      	ldr	r2, [pc, #64]	@ (80009d4 <HAL_TIM_Encoder_MspInit+0x88>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6313      	str	r3, [r2, #48]	@ 0x30
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <HAL_TIM_Encoder_MspInit+0x88>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009a6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	2302      	movs	r3, #2
 80009ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80009b8:	2301      	movs	r3, #1
 80009ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	4619      	mov	r1, r3
 80009c2:	4805      	ldr	r0, [pc, #20]	@ (80009d8 <HAL_TIM_Encoder_MspInit+0x8c>)
 80009c4:	f000 fc26 	bl	8001214 <HAL_GPIO_Init>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80009c8:	bf00      	nop
 80009ca:	3728      	adds	r7, #40	@ 0x28
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40010000 	.word	0x40010000
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020000 	.word	0x40020000

080009dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a0b      	ldr	r2, [pc, #44]	@ (8000a18 <HAL_TIM_Base_MspInit+0x3c>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d10d      	bne.n	8000a0a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	4b0a      	ldr	r3, [pc, #40]	@ (8000a1c <HAL_TIM_Base_MspInit+0x40>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f6:	4a09      	ldr	r2, [pc, #36]	@ (8000a1c <HAL_TIM_Base_MspInit+0x40>)
 80009f8:	f043 0302 	orr.w	r3, r3, #2
 80009fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009fe:	4b07      	ldr	r3, [pc, #28]	@ (8000a1c <HAL_TIM_Base_MspInit+0x40>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a02:	f003 0302 	and.w	r3, r3, #2
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000a0a:	bf00      	nop
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	40000400 	.word	0x40000400
 8000a1c:	40023800 	.word	0x40023800

08000a20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b088      	sub	sp, #32
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 030c 	add.w	r3, r7, #12
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a12      	ldr	r2, [pc, #72]	@ (8000a88 <HAL_TIM_MspPostInit+0x68>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d11d      	bne.n	8000a7e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	4b11      	ldr	r3, [pc, #68]	@ (8000a8c <HAL_TIM_MspPostInit+0x6c>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	4a10      	ldr	r2, [pc, #64]	@ (8000a8c <HAL_TIM_MspPostInit+0x6c>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a52:	4b0e      	ldr	r3, [pc, #56]	@ (8000a8c <HAL_TIM_MspPostInit+0x6c>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a5e:	2340      	movs	r3, #64	@ 0x40
 8000a60:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	4619      	mov	r1, r3
 8000a78:	4805      	ldr	r0, [pc, #20]	@ (8000a90 <HAL_TIM_MspPostInit+0x70>)
 8000a7a:	f000 fbcb 	bl	8001214 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000a7e:	bf00      	nop
 8000a80:	3720      	adds	r7, #32
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40000400 	.word	0x40000400
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020000 	.word	0x40020000

08000a94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	@ 0x28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8000b28 <HAL_UART_MspInit+0x94>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d133      	bne.n	8000b1e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	4b1c      	ldr	r3, [pc, #112]	@ (8000b2c <HAL_UART_MspInit+0x98>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abe:	4a1b      	ldr	r2, [pc, #108]	@ (8000b2c <HAL_UART_MspInit+0x98>)
 8000ac0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ac6:	4b19      	ldr	r3, [pc, #100]	@ (8000b2c <HAL_UART_MspInit+0x98>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <HAL_UART_MspInit+0x98>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	4a14      	ldr	r2, [pc, #80]	@ (8000b2c <HAL_UART_MspInit+0x98>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae2:	4b12      	ldr	r3, [pc, #72]	@ (8000b2c <HAL_UART_MspInit+0x98>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000aee:	230c      	movs	r3, #12
 8000af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afa:	2303      	movs	r3, #3
 8000afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000afe:	2307      	movs	r3, #7
 8000b00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	4809      	ldr	r0, [pc, #36]	@ (8000b30 <HAL_UART_MspInit+0x9c>)
 8000b0a:	f000 fb83 	bl	8001214 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2100      	movs	r1, #0
 8000b12:	2026      	movs	r0, #38	@ 0x26
 8000b14:	f000 fab5 	bl	8001082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b18:	2026      	movs	r0, #38	@ 0x26
 8000b1a:	f000 face 	bl	80010ba <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b1e:	bf00      	nop
 8000b20:	3728      	adds	r7, #40	@ 0x28
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40004400 	.word	0x40004400
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020000 	.word	0x40020000

08000b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <NMI_Handler+0x4>

08000b3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <HardFault_Handler+0x4>

08000b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <MemManage_Handler+0x4>

08000b4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <BusFault_Handler+0x4>

08000b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <UsageFault_Handler+0x4>

08000b5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8a:	f000 f97f 	bl	8000e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b98:	4802      	ldr	r0, [pc, #8]	@ (8000ba4 <USART2_IRQHandler+0x10>)
 8000b9a:	f002 f973 	bl	8002e84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000118 	.word	0x20000118

08000ba8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]
 8000bb8:	e00a      	b.n	8000bd0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bba:	f3af 8000 	nop.w
 8000bbe:	4601      	mov	r1, r0
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	1c5a      	adds	r2, r3, #1
 8000bc4:	60ba      	str	r2, [r7, #8]
 8000bc6:	b2ca      	uxtb	r2, r1
 8000bc8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	697a      	ldr	r2, [r7, #20]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	dbf0      	blt.n	8000bba <_read+0x12>
  }

  return len;
 8000bd8:	687b      	ldr	r3, [r7, #4]
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3718      	adds	r7, #24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b083      	sub	sp, #12
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	b083      	sub	sp, #12
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
 8000c02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c0a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <_isatty>:

int _isatty(int file)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	b083      	sub	sp, #12
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c22:	2301      	movs	r3, #1
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3714      	adds	r7, #20
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
	...

08000c4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c54:	4a14      	ldr	r2, [pc, #80]	@ (8000ca8 <_sbrk+0x5c>)
 8000c56:	4b15      	ldr	r3, [pc, #84]	@ (8000cac <_sbrk+0x60>)
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c60:	4b13      	ldr	r3, [pc, #76]	@ (8000cb0 <_sbrk+0x64>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d102      	bne.n	8000c6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c68:	4b11      	ldr	r3, [pc, #68]	@ (8000cb0 <_sbrk+0x64>)
 8000c6a:	4a12      	ldr	r2, [pc, #72]	@ (8000cb4 <_sbrk+0x68>)
 8000c6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c6e:	4b10      	ldr	r3, [pc, #64]	@ (8000cb0 <_sbrk+0x64>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d207      	bcs.n	8000c8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c7c:	f003 f9be 	bl	8003ffc <__errno>
 8000c80:	4603      	mov	r3, r0
 8000c82:	220c      	movs	r2, #12
 8000c84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c86:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8a:	e009      	b.n	8000ca0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c8c:	4b08      	ldr	r3, [pc, #32]	@ (8000cb0 <_sbrk+0x64>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c92:	4b07      	ldr	r3, [pc, #28]	@ (8000cb0 <_sbrk+0x64>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	4a05      	ldr	r2, [pc, #20]	@ (8000cb0 <_sbrk+0x64>)
 8000c9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20020000 	.word	0x20020000
 8000cac:	00000400 	.word	0x00000400
 8000cb0:	20000160 	.word	0x20000160
 8000cb4:	20000328 	.word	0x20000328

08000cb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cbc:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <SystemInit+0x20>)
 8000cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cc2:	4a05      	ldr	r2, [pc, #20]	@ (8000cd8 <SystemInit+0x20>)
 8000cc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <_write>:
uint8_t rxBuffer[rxBufferMax];  //circle buffer = ring buffer
int rxBufferReadIndex; //읽기 위치
int rxBufferWriteIndex;


int _write(int file, char *p, int len){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(myHuart, (uint8_t *)p, len, 10);
 8000ce8:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <_write+0x28>)
 8000cea:	6818      	ldr	r0, [r3, #0]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	230a      	movs	r3, #10
 8000cf2:	68b9      	ldr	r1, [r7, #8]
 8000cf4:	f002 f816 	bl	8002d24 <HAL_UART_Transmit>
	return len;
 8000cf8:	687b      	ldr	r3, [r7, #4]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000164 	.word	0x20000164

08000d08 <HAL_UART_RxCpltCallback>:

// 수신 인터럽트(interrupt = event) 콜백(listner, isr)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
	//수신된 문자 저장
	rxBuffer[rxBufferWriteIndex++] = rxCharacter;
 8000d10:	4b10      	ldr	r3, [pc, #64]	@ (8000d54 <HAL_UART_RxCpltCallback+0x4c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	1c5a      	adds	r2, r3, #1
 8000d16:	490f      	ldr	r1, [pc, #60]	@ (8000d54 <HAL_UART_RxCpltCallback+0x4c>)
 8000d18:	600a      	str	r2, [r1, #0]
 8000d1a:	4a0f      	ldr	r2, [pc, #60]	@ (8000d58 <HAL_UART_RxCpltCallback+0x50>)
 8000d1c:	7811      	ldrb	r1, [r2, #0]
 8000d1e:	4a0f      	ldr	r2, [pc, #60]	@ (8000d5c <HAL_UART_RxCpltCallback+0x54>)
 8000d20:	54d1      	strb	r1, [r2, r3]
	//최대값 도달시 처음으로
	rxBufferWriteIndex %=rxBufferMax;
 8000d22:	4b0c      	ldr	r3, [pc, #48]	@ (8000d54 <HAL_UART_RxCpltCallback+0x4c>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	4b0e      	ldr	r3, [pc, #56]	@ (8000d60 <HAL_UART_RxCpltCallback+0x58>)
 8000d28:	fb83 1302 	smull	r1, r3, r3, r2
 8000d2c:	1159      	asrs	r1, r3, #5
 8000d2e:	17d3      	asrs	r3, r2, #31
 8000d30:	1acb      	subs	r3, r1, r3
 8000d32:	2164      	movs	r1, #100	@ 0x64
 8000d34:	fb01 f303 	mul.w	r3, r1, r3
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	4a06      	ldr	r2, [pc, #24]	@ (8000d54 <HAL_UART_RxCpltCallback+0x4c>)
 8000d3c:	6013      	str	r3, [r2, #0]
	//인터럽트 재 장전
	HAL_UART_Receive_IT(myHuart, &rxCharacter, 1);
 8000d3e:	4b09      	ldr	r3, [pc, #36]	@ (8000d64 <HAL_UART_RxCpltCallback+0x5c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2201      	movs	r2, #1
 8000d44:	4904      	ldr	r1, [pc, #16]	@ (8000d58 <HAL_UART_RxCpltCallback+0x50>)
 8000d46:	4618      	mov	r0, r3
 8000d48:	f002 f877 	bl	8002e3a <HAL_UART_Receive_IT>
}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	200001d0 	.word	0x200001d0
 8000d58:	20000168 	.word	0x20000168
 8000d5c:	2000016c 	.word	0x2000016c
 8000d60:	51eb851f 	.word	0x51eb851f
 8000d64:	20000164 	.word	0x20000164

08000d68 <initUart>:

//uart 장치 초기화
void initUart(UART_HandleTypeDef *inHuart){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	//uart 장치 주소 백업
	myHuart = inHuart;
 8000d70:	4a06      	ldr	r2, [pc, #24]	@ (8000d8c <initUart+0x24>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6013      	str	r3, [r2, #0]
	//인터럽트 장전
	HAL_UART_Receive_IT(myHuart, &rxCharacter, 1);
 8000d76:	4b05      	ldr	r3, [pc, #20]	@ (8000d8c <initUart+0x24>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	4904      	ldr	r1, [pc, #16]	@ (8000d90 <initUart+0x28>)
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f002 f85b 	bl	8002e3a <HAL_UART_Receive_IT>
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000164 	.word	0x20000164
 8000d90:	20000168 	.word	0x20000168

08000d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dcc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d98:	f7ff ff8e 	bl	8000cb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d9c:	480c      	ldr	r0, [pc, #48]	@ (8000dd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d9e:	490d      	ldr	r1, [pc, #52]	@ (8000dd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000da0:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da4:	e002      	b.n	8000dac <LoopCopyDataInit>

08000da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000daa:	3304      	adds	r3, #4

08000dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db0:	d3f9      	bcc.n	8000da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ddc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000db4:	4c0a      	ldr	r4, [pc, #40]	@ (8000de0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db8:	e001      	b.n	8000dbe <LoopFillZerobss>

08000dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dbc:	3204      	adds	r2, #4

08000dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc0:	d3fb      	bcc.n	8000dba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dc2:	f003 f921 	bl	8004008 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dc6:	f7ff fc0f 	bl	80005e8 <main>
  bx  lr    
 8000dca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000dd8:	08004c10 	.word	0x08004c10
  ldr r2, =_sbss
 8000ddc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000de0:	20000324 	.word	0x20000324

08000de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de4:	e7fe      	b.n	8000de4 <ADC_IRQHandler>
	...

08000de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dec:	4b0e      	ldr	r3, [pc, #56]	@ (8000e28 <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e28 <HAL_Init+0x40>)
 8000df2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000df8:	4b0b      	ldr	r3, [pc, #44]	@ (8000e28 <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0a      	ldr	r2, [pc, #40]	@ (8000e28 <HAL_Init+0x40>)
 8000dfe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e04:	4b08      	ldr	r3, [pc, #32]	@ (8000e28 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a07      	ldr	r2, [pc, #28]	@ (8000e28 <HAL_Init+0x40>)
 8000e0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e10:	2003      	movs	r0, #3
 8000e12:	f000 f92b 	bl	800106c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e16:	200f      	movs	r0, #15
 8000e18:	f000 f808 	bl	8000e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e1c:	f7ff fd6e 	bl	80008fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40023c00 	.word	0x40023c00

08000e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e34:	4b12      	ldr	r3, [pc, #72]	@ (8000e80 <HAL_InitTick+0x54>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b12      	ldr	r3, [pc, #72]	@ (8000e84 <HAL_InitTick+0x58>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 f943 	bl	80010d6 <HAL_SYSTICK_Config>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00e      	b.n	8000e78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b0f      	cmp	r3, #15
 8000e5e:	d80a      	bhi.n	8000e76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e60:	2200      	movs	r2, #0
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295
 8000e68:	f000 f90b 	bl	8001082 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e6c:	4a06      	ldr	r2, [pc, #24]	@ (8000e88 <HAL_InitTick+0x5c>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e72:	2300      	movs	r3, #0
 8000e74:	e000      	b.n	8000e78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000000 	.word	0x20000000
 8000e84:	20000008 	.word	0x20000008
 8000e88:	20000004 	.word	0x20000004

08000e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e90:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <HAL_IncTick+0x20>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b06      	ldr	r3, [pc, #24]	@ (8000eb0 <HAL_IncTick+0x24>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4a04      	ldr	r2, [pc, #16]	@ (8000eb0 <HAL_IncTick+0x24>)
 8000e9e:	6013      	str	r3, [r2, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	200001d4 	.word	0x200001d4

08000eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb8:	4b03      	ldr	r3, [pc, #12]	@ (8000ec8 <HAL_GetTick+0x14>)
 8000eba:	681b      	ldr	r3, [r3, #0]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	200001d4 	.word	0x200001d4

08000ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000edc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f10 <__NVIC_SetPriorityGrouping+0x44>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ee8:	4013      	ands	r3, r2
 8000eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ef8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efe:	4a04      	ldr	r2, [pc, #16]	@ (8000f10 <__NVIC_SetPriorityGrouping+0x44>)
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	60d3      	str	r3, [r2, #12]
}
 8000f04:	bf00      	nop
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f18:	4b04      	ldr	r3, [pc, #16]	@ (8000f2c <__NVIC_GetPriorityGrouping+0x18>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	0a1b      	lsrs	r3, r3, #8
 8000f1e:	f003 0307 	and.w	r3, r3, #7
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	db0b      	blt.n	8000f5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	f003 021f 	and.w	r2, r3, #31
 8000f48:	4907      	ldr	r1, [pc, #28]	@ (8000f68 <__NVIC_EnableIRQ+0x38>)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	095b      	lsrs	r3, r3, #5
 8000f50:	2001      	movs	r0, #1
 8000f52:	fa00 f202 	lsl.w	r2, r0, r2
 8000f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000e100 	.word	0xe000e100

08000f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	6039      	str	r1, [r7, #0]
 8000f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	db0a      	blt.n	8000f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	490c      	ldr	r1, [pc, #48]	@ (8000fb8 <__NVIC_SetPriority+0x4c>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	0112      	lsls	r2, r2, #4
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	440b      	add	r3, r1
 8000f90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f94:	e00a      	b.n	8000fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	4908      	ldr	r1, [pc, #32]	@ (8000fbc <__NVIC_SetPriority+0x50>)
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	f003 030f 	and.w	r3, r3, #15
 8000fa2:	3b04      	subs	r3, #4
 8000fa4:	0112      	lsls	r2, r2, #4
 8000fa6:	b2d2      	uxtb	r2, r2
 8000fa8:	440b      	add	r3, r1
 8000faa:	761a      	strb	r2, [r3, #24]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000e100 	.word	0xe000e100
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b089      	sub	sp, #36	@ 0x24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	f1c3 0307 	rsb	r3, r3, #7
 8000fda:	2b04      	cmp	r3, #4
 8000fdc:	bf28      	it	cs
 8000fde:	2304      	movcs	r3, #4
 8000fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	2b06      	cmp	r3, #6
 8000fe8:	d902      	bls.n	8000ff0 <NVIC_EncodePriority+0x30>
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3b03      	subs	r3, #3
 8000fee:	e000      	b.n	8000ff2 <NVIC_EncodePriority+0x32>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43da      	mvns	r2, r3
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	401a      	ands	r2, r3
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001008:	f04f 31ff 	mov.w	r1, #4294967295
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	fa01 f303 	lsl.w	r3, r1, r3
 8001012:	43d9      	mvns	r1, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	4313      	orrs	r3, r2
         );
}
 800101a:	4618      	mov	r0, r3
 800101c:	3724      	adds	r7, #36	@ 0x24
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
	...

08001028 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3b01      	subs	r3, #1
 8001034:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001038:	d301      	bcc.n	800103e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800103a:	2301      	movs	r3, #1
 800103c:	e00f      	b.n	800105e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800103e:	4a0a      	ldr	r2, [pc, #40]	@ (8001068 <SysTick_Config+0x40>)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3b01      	subs	r3, #1
 8001044:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001046:	210f      	movs	r1, #15
 8001048:	f04f 30ff 	mov.w	r0, #4294967295
 800104c:	f7ff ff8e 	bl	8000f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001050:	4b05      	ldr	r3, [pc, #20]	@ (8001068 <SysTick_Config+0x40>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001056:	4b04      	ldr	r3, [pc, #16]	@ (8001068 <SysTick_Config+0x40>)
 8001058:	2207      	movs	r2, #7
 800105a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	e000e010 	.word	0xe000e010

0800106c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff ff29 	bl	8000ecc <__NVIC_SetPriorityGrouping>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001082:	b580      	push	{r7, lr}
 8001084:	b086      	sub	sp, #24
 8001086:	af00      	add	r7, sp, #0
 8001088:	4603      	mov	r3, r0
 800108a:	60b9      	str	r1, [r7, #8]
 800108c:	607a      	str	r2, [r7, #4]
 800108e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001094:	f7ff ff3e 	bl	8000f14 <__NVIC_GetPriorityGrouping>
 8001098:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	68b9      	ldr	r1, [r7, #8]
 800109e:	6978      	ldr	r0, [r7, #20]
 80010a0:	f7ff ff8e 	bl	8000fc0 <NVIC_EncodePriority>
 80010a4:	4602      	mov	r2, r0
 80010a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010aa:	4611      	mov	r1, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff5d 	bl	8000f6c <__NVIC_SetPriority>
}
 80010b2:	bf00      	nop
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff31 	bl	8000f30 <__NVIC_EnableIRQ>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff ffa2 	bl	8001028 <SysTick_Config>
 80010e4:	4603      	mov	r3, r0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b084      	sub	sp, #16
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010fa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010fc:	f7ff feda 	bl	8000eb4 <HAL_GetTick>
 8001100:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b02      	cmp	r3, #2
 800110c:	d008      	beq.n	8001120 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2280      	movs	r2, #128	@ 0x80
 8001112:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e052      	b.n	80011c6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f022 0216 	bic.w	r2, r2, #22
 800112e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	695a      	ldr	r2, [r3, #20]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800113e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001144:	2b00      	cmp	r3, #0
 8001146:	d103      	bne.n	8001150 <HAL_DMA_Abort+0x62>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800114c:	2b00      	cmp	r3, #0
 800114e:	d007      	beq.n	8001160 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f022 0208 	bic.w	r2, r2, #8
 800115e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f022 0201 	bic.w	r2, r2, #1
 800116e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001170:	e013      	b.n	800119a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001172:	f7ff fe9f 	bl	8000eb4 <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b05      	cmp	r3, #5
 800117e:	d90c      	bls.n	800119a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2220      	movs	r2, #32
 8001184:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2203      	movs	r2, #3
 800118a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e015      	b.n	80011c6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1e4      	bne.n	8001172 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011ac:	223f      	movs	r2, #63	@ 0x3f
 80011ae:	409a      	lsls	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2201      	movs	r2, #1
 80011b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d004      	beq.n	80011ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2280      	movs	r2, #128	@ 0x80
 80011e6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e00c      	b.n	8001206 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2205      	movs	r2, #5
 80011f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f022 0201 	bic.w	r2, r2, #1
 8001202:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
	...

08001214 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001214:	b480      	push	{r7}
 8001216:	b089      	sub	sp, #36	@ 0x24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001226:	2300      	movs	r3, #0
 8001228:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
 800122e:	e159      	b.n	80014e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001230:	2201      	movs	r2, #1
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	4013      	ands	r3, r2
 8001242:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	429a      	cmp	r2, r3
 800124a:	f040 8148 	bne.w	80014de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f003 0303 	and.w	r3, r3, #3
 8001256:	2b01      	cmp	r3, #1
 8001258:	d005      	beq.n	8001266 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001262:	2b02      	cmp	r3, #2
 8001264:	d130      	bne.n	80012c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	2203      	movs	r2, #3
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43db      	mvns	r3, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4013      	ands	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	68da      	ldr	r2, [r3, #12]
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800129c:	2201      	movs	r2, #1
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	091b      	lsrs	r3, r3, #4
 80012b2:	f003 0201 	and.w	r2, r3, #1
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0303 	and.w	r3, r3, #3
 80012d0:	2b03      	cmp	r3, #3
 80012d2:	d017      	beq.n	8001304 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	2203      	movs	r2, #3
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d123      	bne.n	8001358 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	08da      	lsrs	r2, r3, #3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3208      	adds	r2, #8
 8001318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800131c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	f003 0307 	and.w	r3, r3, #7
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	220f      	movs	r2, #15
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	691a      	ldr	r2, [r3, #16]
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4313      	orrs	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	08da      	lsrs	r2, r3, #3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	3208      	adds	r2, #8
 8001352:	69b9      	ldr	r1, [r7, #24]
 8001354:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	2203      	movs	r2, #3
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 0203 	and.w	r2, r3, #3
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 80a2 	beq.w	80014de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	4b57      	ldr	r3, [pc, #348]	@ (80014fc <HAL_GPIO_Init+0x2e8>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a2:	4a56      	ldr	r2, [pc, #344]	@ (80014fc <HAL_GPIO_Init+0x2e8>)
 80013a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013aa:	4b54      	ldr	r3, [pc, #336]	@ (80014fc <HAL_GPIO_Init+0x2e8>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013b6:	4a52      	ldr	r2, [pc, #328]	@ (8001500 <HAL_GPIO_Init+0x2ec>)
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	089b      	lsrs	r3, r3, #2
 80013bc:	3302      	adds	r3, #2
 80013be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f003 0303 	and.w	r3, r3, #3
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	220f      	movs	r2, #15
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a49      	ldr	r2, [pc, #292]	@ (8001504 <HAL_GPIO_Init+0x2f0>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d019      	beq.n	8001416 <HAL_GPIO_Init+0x202>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a48      	ldr	r2, [pc, #288]	@ (8001508 <HAL_GPIO_Init+0x2f4>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d013      	beq.n	8001412 <HAL_GPIO_Init+0x1fe>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a47      	ldr	r2, [pc, #284]	@ (800150c <HAL_GPIO_Init+0x2f8>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d00d      	beq.n	800140e <HAL_GPIO_Init+0x1fa>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a46      	ldr	r2, [pc, #280]	@ (8001510 <HAL_GPIO_Init+0x2fc>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d007      	beq.n	800140a <HAL_GPIO_Init+0x1f6>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a45      	ldr	r2, [pc, #276]	@ (8001514 <HAL_GPIO_Init+0x300>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d101      	bne.n	8001406 <HAL_GPIO_Init+0x1f2>
 8001402:	2304      	movs	r3, #4
 8001404:	e008      	b.n	8001418 <HAL_GPIO_Init+0x204>
 8001406:	2307      	movs	r3, #7
 8001408:	e006      	b.n	8001418 <HAL_GPIO_Init+0x204>
 800140a:	2303      	movs	r3, #3
 800140c:	e004      	b.n	8001418 <HAL_GPIO_Init+0x204>
 800140e:	2302      	movs	r3, #2
 8001410:	e002      	b.n	8001418 <HAL_GPIO_Init+0x204>
 8001412:	2301      	movs	r3, #1
 8001414:	e000      	b.n	8001418 <HAL_GPIO_Init+0x204>
 8001416:	2300      	movs	r3, #0
 8001418:	69fa      	ldr	r2, [r7, #28]
 800141a:	f002 0203 	and.w	r2, r2, #3
 800141e:	0092      	lsls	r2, r2, #2
 8001420:	4093      	lsls	r3, r2
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001428:	4935      	ldr	r1, [pc, #212]	@ (8001500 <HAL_GPIO_Init+0x2ec>)
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	089b      	lsrs	r3, r3, #2
 800142e:	3302      	adds	r3, #2
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001436:	4b38      	ldr	r3, [pc, #224]	@ (8001518 <HAL_GPIO_Init+0x304>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	43db      	mvns	r3, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4013      	ands	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800145a:	4a2f      	ldr	r2, [pc, #188]	@ (8001518 <HAL_GPIO_Init+0x304>)
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001460:	4b2d      	ldr	r3, [pc, #180]	@ (8001518 <HAL_GPIO_Init+0x304>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001484:	4a24      	ldr	r2, [pc, #144]	@ (8001518 <HAL_GPIO_Init+0x304>)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800148a:	4b23      	ldr	r3, [pc, #140]	@ (8001518 <HAL_GPIO_Init+0x304>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	43db      	mvns	r3, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4013      	ands	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014ae:	4a1a      	ldr	r2, [pc, #104]	@ (8001518 <HAL_GPIO_Init+0x304>)
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014b4:	4b18      	ldr	r3, [pc, #96]	@ (8001518 <HAL_GPIO_Init+0x304>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	43db      	mvns	r3, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014d8:	4a0f      	ldr	r2, [pc, #60]	@ (8001518 <HAL_GPIO_Init+0x304>)
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3301      	adds	r3, #1
 80014e2:	61fb      	str	r3, [r7, #28]
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	2b0f      	cmp	r3, #15
 80014e8:	f67f aea2 	bls.w	8001230 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014ec:	bf00      	nop
 80014ee:	bf00      	nop
 80014f0:	3724      	adds	r7, #36	@ 0x24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800
 8001500:	40013800 	.word	0x40013800
 8001504:	40020000 	.word	0x40020000
 8001508:	40020400 	.word	0x40020400
 800150c:	40020800 	.word	0x40020800
 8001510:	40020c00 	.word	0x40020c00
 8001514:	40021000 	.word	0x40021000
 8001518:	40013c00 	.word	0x40013c00

0800151c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d101      	bne.n	800152e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e267      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b00      	cmp	r3, #0
 8001538:	d075      	beq.n	8001626 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800153a:	4b88      	ldr	r3, [pc, #544]	@ (800175c <HAL_RCC_OscConfig+0x240>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 030c 	and.w	r3, r3, #12
 8001542:	2b04      	cmp	r3, #4
 8001544:	d00c      	beq.n	8001560 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001546:	4b85      	ldr	r3, [pc, #532]	@ (800175c <HAL_RCC_OscConfig+0x240>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800154e:	2b08      	cmp	r3, #8
 8001550:	d112      	bne.n	8001578 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001552:	4b82      	ldr	r3, [pc, #520]	@ (800175c <HAL_RCC_OscConfig+0x240>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800155a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800155e:	d10b      	bne.n	8001578 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001560:	4b7e      	ldr	r3, [pc, #504]	@ (800175c <HAL_RCC_OscConfig+0x240>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d05b      	beq.n	8001624 <HAL_RCC_OscConfig+0x108>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d157      	bne.n	8001624 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e242      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001580:	d106      	bne.n	8001590 <HAL_RCC_OscConfig+0x74>
 8001582:	4b76      	ldr	r3, [pc, #472]	@ (800175c <HAL_RCC_OscConfig+0x240>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a75      	ldr	r2, [pc, #468]	@ (800175c <HAL_RCC_OscConfig+0x240>)
 8001588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	e01d      	b.n	80015cc <HAL_RCC_OscConfig+0xb0>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001598:	d10c      	bne.n	80015b4 <HAL_RCC_OscConfig+0x98>
 800159a:	4b70      	ldr	r3, [pc, #448]	@ (800175c <HAL_RCC_OscConfig+0x240>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a6f      	ldr	r2, [pc, #444]	@ (800175c <HAL_RCC_OscConfig+0x240>)
 80015a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	4b6d      	ldr	r3, [pc, #436]	@ (800175c <HAL_RCC_OscConfig+0x240>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a6c      	ldr	r2, [pc, #432]	@ (800175c <HAL_RCC_OscConfig+0x240>)
 80015ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	e00b      	b.n	80015cc <HAL_RCC_OscConfig+0xb0>
 80015b4:	4b69      	ldr	r3, [pc, #420]	@ (800175c <HAL_RCC_OscConfig+0x240>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a68      	ldr	r2, [pc, #416]	@ (800175c <HAL_RCC_OscConfig+0x240>)
 80015ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	4b66      	ldr	r3, [pc, #408]	@ (800175c <HAL_RCC_OscConfig+0x240>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a65      	ldr	r2, [pc, #404]	@ (800175c <HAL_RCC_OscConfig+0x240>)
 80015c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d013      	beq.n	80015fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d4:	f7ff fc6e 	bl	8000eb4 <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015dc:	f7ff fc6a 	bl	8000eb4 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b64      	cmp	r3, #100	@ 0x64
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e207      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ee:	4b5b      	ldr	r3, [pc, #364]	@ (800175c <HAL_RCC_OscConfig+0x240>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d0f0      	beq.n	80015dc <HAL_RCC_OscConfig+0xc0>
 80015fa:	e014      	b.n	8001626 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fc:	f7ff fc5a 	bl	8000eb4 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001604:	f7ff fc56 	bl	8000eb4 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b64      	cmp	r3, #100	@ 0x64
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e1f3      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001616:	4b51      	ldr	r3, [pc, #324]	@ (800175c <HAL_RCC_OscConfig+0x240>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f0      	bne.n	8001604 <HAL_RCC_OscConfig+0xe8>
 8001622:	e000      	b.n	8001626 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d063      	beq.n	80016fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001632:	4b4a      	ldr	r3, [pc, #296]	@ (800175c <HAL_RCC_OscConfig+0x240>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 030c 	and.w	r3, r3, #12
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00b      	beq.n	8001656 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800163e:	4b47      	ldr	r3, [pc, #284]	@ (800175c <HAL_RCC_OscConfig+0x240>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001646:	2b08      	cmp	r3, #8
 8001648:	d11c      	bne.n	8001684 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800164a:	4b44      	ldr	r3, [pc, #272]	@ (800175c <HAL_RCC_OscConfig+0x240>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d116      	bne.n	8001684 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001656:	4b41      	ldr	r3, [pc, #260]	@ (800175c <HAL_RCC_OscConfig+0x240>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d005      	beq.n	800166e <HAL_RCC_OscConfig+0x152>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d001      	beq.n	800166e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e1c7      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800166e:	4b3b      	ldr	r3, [pc, #236]	@ (800175c <HAL_RCC_OscConfig+0x240>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	4937      	ldr	r1, [pc, #220]	@ (800175c <HAL_RCC_OscConfig+0x240>)
 800167e:	4313      	orrs	r3, r2
 8001680:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001682:	e03a      	b.n	80016fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d020      	beq.n	80016ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800168c:	4b34      	ldr	r3, [pc, #208]	@ (8001760 <HAL_RCC_OscConfig+0x244>)
 800168e:	2201      	movs	r2, #1
 8001690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001692:	f7ff fc0f 	bl	8000eb4 <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800169a:	f7ff fc0b 	bl	8000eb4 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e1a8      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ac:	4b2b      	ldr	r3, [pc, #172]	@ (800175c <HAL_RCC_OscConfig+0x240>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d0f0      	beq.n	800169a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b8:	4b28      	ldr	r3, [pc, #160]	@ (800175c <HAL_RCC_OscConfig+0x240>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	4925      	ldr	r1, [pc, #148]	@ (800175c <HAL_RCC_OscConfig+0x240>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	600b      	str	r3, [r1, #0]
 80016cc:	e015      	b.n	80016fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ce:	4b24      	ldr	r3, [pc, #144]	@ (8001760 <HAL_RCC_OscConfig+0x244>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d4:	f7ff fbee 	bl	8000eb4 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016dc:	f7ff fbea 	bl	8000eb4 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e187      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ee:	4b1b      	ldr	r3, [pc, #108]	@ (800175c <HAL_RCC_OscConfig+0x240>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1f0      	bne.n	80016dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	2b00      	cmp	r3, #0
 8001704:	d036      	beq.n	8001774 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d016      	beq.n	800173c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800170e:	4b15      	ldr	r3, [pc, #84]	@ (8001764 <HAL_RCC_OscConfig+0x248>)
 8001710:	2201      	movs	r2, #1
 8001712:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001714:	f7ff fbce 	bl	8000eb4 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800171c:	f7ff fbca 	bl	8000eb4 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e167      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800172e:	4b0b      	ldr	r3, [pc, #44]	@ (800175c <HAL_RCC_OscConfig+0x240>)
 8001730:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0f0      	beq.n	800171c <HAL_RCC_OscConfig+0x200>
 800173a:	e01b      	b.n	8001774 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800173c:	4b09      	ldr	r3, [pc, #36]	@ (8001764 <HAL_RCC_OscConfig+0x248>)
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001742:	f7ff fbb7 	bl	8000eb4 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001748:	e00e      	b.n	8001768 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800174a:	f7ff fbb3 	bl	8000eb4 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d907      	bls.n	8001768 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e150      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
 800175c:	40023800 	.word	0x40023800
 8001760:	42470000 	.word	0x42470000
 8001764:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001768:	4b88      	ldr	r3, [pc, #544]	@ (800198c <HAL_RCC_OscConfig+0x470>)
 800176a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1ea      	bne.n	800174a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	2b00      	cmp	r3, #0
 800177e:	f000 8097 	beq.w	80018b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001782:	2300      	movs	r3, #0
 8001784:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001786:	4b81      	ldr	r3, [pc, #516]	@ (800198c <HAL_RCC_OscConfig+0x470>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10f      	bne.n	80017b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	4b7d      	ldr	r3, [pc, #500]	@ (800198c <HAL_RCC_OscConfig+0x470>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179a:	4a7c      	ldr	r2, [pc, #496]	@ (800198c <HAL_RCC_OscConfig+0x470>)
 800179c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017a2:	4b7a      	ldr	r3, [pc, #488]	@ (800198c <HAL_RCC_OscConfig+0x470>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ae:	2301      	movs	r3, #1
 80017b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b2:	4b77      	ldr	r3, [pc, #476]	@ (8001990 <HAL_RCC_OscConfig+0x474>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d118      	bne.n	80017f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017be:	4b74      	ldr	r3, [pc, #464]	@ (8001990 <HAL_RCC_OscConfig+0x474>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a73      	ldr	r2, [pc, #460]	@ (8001990 <HAL_RCC_OscConfig+0x474>)
 80017c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ca:	f7ff fb73 	bl	8000eb4 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017d2:	f7ff fb6f 	bl	8000eb4 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e10c      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e4:	4b6a      	ldr	r3, [pc, #424]	@ (8001990 <HAL_RCC_OscConfig+0x474>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0f0      	beq.n	80017d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d106      	bne.n	8001806 <HAL_RCC_OscConfig+0x2ea>
 80017f8:	4b64      	ldr	r3, [pc, #400]	@ (800198c <HAL_RCC_OscConfig+0x470>)
 80017fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017fc:	4a63      	ldr	r2, [pc, #396]	@ (800198c <HAL_RCC_OscConfig+0x470>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	6713      	str	r3, [r2, #112]	@ 0x70
 8001804:	e01c      	b.n	8001840 <HAL_RCC_OscConfig+0x324>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	2b05      	cmp	r3, #5
 800180c:	d10c      	bne.n	8001828 <HAL_RCC_OscConfig+0x30c>
 800180e:	4b5f      	ldr	r3, [pc, #380]	@ (800198c <HAL_RCC_OscConfig+0x470>)
 8001810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001812:	4a5e      	ldr	r2, [pc, #376]	@ (800198c <HAL_RCC_OscConfig+0x470>)
 8001814:	f043 0304 	orr.w	r3, r3, #4
 8001818:	6713      	str	r3, [r2, #112]	@ 0x70
 800181a:	4b5c      	ldr	r3, [pc, #368]	@ (800198c <HAL_RCC_OscConfig+0x470>)
 800181c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800181e:	4a5b      	ldr	r2, [pc, #364]	@ (800198c <HAL_RCC_OscConfig+0x470>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6713      	str	r3, [r2, #112]	@ 0x70
 8001826:	e00b      	b.n	8001840 <HAL_RCC_OscConfig+0x324>
 8001828:	4b58      	ldr	r3, [pc, #352]	@ (800198c <HAL_RCC_OscConfig+0x470>)
 800182a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800182c:	4a57      	ldr	r2, [pc, #348]	@ (800198c <HAL_RCC_OscConfig+0x470>)
 800182e:	f023 0301 	bic.w	r3, r3, #1
 8001832:	6713      	str	r3, [r2, #112]	@ 0x70
 8001834:	4b55      	ldr	r3, [pc, #340]	@ (800198c <HAL_RCC_OscConfig+0x470>)
 8001836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001838:	4a54      	ldr	r2, [pc, #336]	@ (800198c <HAL_RCC_OscConfig+0x470>)
 800183a:	f023 0304 	bic.w	r3, r3, #4
 800183e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d015      	beq.n	8001874 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001848:	f7ff fb34 	bl	8000eb4 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800184e:	e00a      	b.n	8001866 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001850:	f7ff fb30 	bl	8000eb4 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800185e:	4293      	cmp	r3, r2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e0cb      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001866:	4b49      	ldr	r3, [pc, #292]	@ (800198c <HAL_RCC_OscConfig+0x470>)
 8001868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0ee      	beq.n	8001850 <HAL_RCC_OscConfig+0x334>
 8001872:	e014      	b.n	800189e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001874:	f7ff fb1e 	bl	8000eb4 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800187a:	e00a      	b.n	8001892 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800187c:	f7ff fb1a 	bl	8000eb4 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	f241 3288 	movw	r2, #5000	@ 0x1388
 800188a:	4293      	cmp	r3, r2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e0b5      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001892:	4b3e      	ldr	r3, [pc, #248]	@ (800198c <HAL_RCC_OscConfig+0x470>)
 8001894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1ee      	bne.n	800187c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800189e:	7dfb      	ldrb	r3, [r7, #23]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d105      	bne.n	80018b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a4:	4b39      	ldr	r3, [pc, #228]	@ (800198c <HAL_RCC_OscConfig+0x470>)
 80018a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a8:	4a38      	ldr	r2, [pc, #224]	@ (800198c <HAL_RCC_OscConfig+0x470>)
 80018aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 80a1 	beq.w	80019fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018ba:	4b34      	ldr	r3, [pc, #208]	@ (800198c <HAL_RCC_OscConfig+0x470>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 030c 	and.w	r3, r3, #12
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	d05c      	beq.n	8001980 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d141      	bne.n	8001952 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ce:	4b31      	ldr	r3, [pc, #196]	@ (8001994 <HAL_RCC_OscConfig+0x478>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d4:	f7ff faee 	bl	8000eb4 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018dc:	f7ff faea 	bl	8000eb4 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e087      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ee:	4b27      	ldr	r3, [pc, #156]	@ (800198c <HAL_RCC_OscConfig+0x470>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f0      	bne.n	80018dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69da      	ldr	r2, [r3, #28]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	431a      	orrs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001908:	019b      	lsls	r3, r3, #6
 800190a:	431a      	orrs	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001910:	085b      	lsrs	r3, r3, #1
 8001912:	3b01      	subs	r3, #1
 8001914:	041b      	lsls	r3, r3, #16
 8001916:	431a      	orrs	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800191c:	061b      	lsls	r3, r3, #24
 800191e:	491b      	ldr	r1, [pc, #108]	@ (800198c <HAL_RCC_OscConfig+0x470>)
 8001920:	4313      	orrs	r3, r2
 8001922:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001924:	4b1b      	ldr	r3, [pc, #108]	@ (8001994 <HAL_RCC_OscConfig+0x478>)
 8001926:	2201      	movs	r2, #1
 8001928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192a:	f7ff fac3 	bl	8000eb4 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001932:	f7ff fabf 	bl	8000eb4 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e05c      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001944:	4b11      	ldr	r3, [pc, #68]	@ (800198c <HAL_RCC_OscConfig+0x470>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0f0      	beq.n	8001932 <HAL_RCC_OscConfig+0x416>
 8001950:	e054      	b.n	80019fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001952:	4b10      	ldr	r3, [pc, #64]	@ (8001994 <HAL_RCC_OscConfig+0x478>)
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001958:	f7ff faac 	bl	8000eb4 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001960:	f7ff faa8 	bl	8000eb4 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e045      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001972:	4b06      	ldr	r3, [pc, #24]	@ (800198c <HAL_RCC_OscConfig+0x470>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1f0      	bne.n	8001960 <HAL_RCC_OscConfig+0x444>
 800197e:	e03d      	b.n	80019fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d107      	bne.n	8001998 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e038      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
 800198c:	40023800 	.word	0x40023800
 8001990:	40007000 	.word	0x40007000
 8001994:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001998:	4b1b      	ldr	r3, [pc, #108]	@ (8001a08 <HAL_RCC_OscConfig+0x4ec>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d028      	beq.n	80019f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d121      	bne.n	80019f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019be:	429a      	cmp	r2, r3
 80019c0:	d11a      	bne.n	80019f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80019c8:	4013      	ands	r3, r2
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80019ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d111      	bne.n	80019f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019de:	085b      	lsrs	r3, r3, #1
 80019e0:	3b01      	subs	r3, #1
 80019e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d107      	bne.n	80019f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d001      	beq.n	80019fc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e000      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40023800 	.word	0x40023800

08001a0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e0cc      	b.n	8001bba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a20:	4b68      	ldr	r3, [pc, #416]	@ (8001bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d90c      	bls.n	8001a48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2e:	4b65      	ldr	r3, [pc, #404]	@ (8001bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a36:	4b63      	ldr	r3, [pc, #396]	@ (8001bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d001      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e0b8      	b.n	8001bba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d020      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d005      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a60:	4b59      	ldr	r3, [pc, #356]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	4a58      	ldr	r2, [pc, #352]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0308 	and.w	r3, r3, #8
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d005      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a78:	4b53      	ldr	r3, [pc, #332]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	4a52      	ldr	r2, [pc, #328]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a84:	4b50      	ldr	r3, [pc, #320]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	494d      	ldr	r1, [pc, #308]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d044      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d107      	bne.n	8001aba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aaa:	4b47      	ldr	r3, [pc, #284]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d119      	bne.n	8001aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e07f      	b.n	8001bba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d003      	beq.n	8001aca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ac6:	2b03      	cmp	r3, #3
 8001ac8:	d107      	bne.n	8001ada <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aca:	4b3f      	ldr	r3, [pc, #252]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d109      	bne.n	8001aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e06f      	b.n	8001bba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ada:	4b3b      	ldr	r3, [pc, #236]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e067      	b.n	8001bba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aea:	4b37      	ldr	r3, [pc, #220]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f023 0203 	bic.w	r2, r3, #3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	4934      	ldr	r1, [pc, #208]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001afc:	f7ff f9da 	bl	8000eb4 <HAL_GetTick>
 8001b00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b02:	e00a      	b.n	8001b1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b04:	f7ff f9d6 	bl	8000eb4 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e04f      	b.n	8001bba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1a:	4b2b      	ldr	r3, [pc, #172]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 020c 	and.w	r2, r3, #12
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d1eb      	bne.n	8001b04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b2c:	4b25      	ldr	r3, [pc, #148]	@ (8001bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d20c      	bcs.n	8001b54 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3a:	4b22      	ldr	r3, [pc, #136]	@ (8001bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b42:	4b20      	ldr	r3, [pc, #128]	@ (8001bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d001      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e032      	b.n	8001bba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d008      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b60:	4b19      	ldr	r3, [pc, #100]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	4916      	ldr	r1, [pc, #88]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0308 	and.w	r3, r3, #8
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d009      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b7e:	4b12      	ldr	r3, [pc, #72]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	490e      	ldr	r1, [pc, #56]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b92:	f000 f821 	bl	8001bd8 <HAL_RCC_GetSysClockFreq>
 8001b96:	4602      	mov	r2, r0
 8001b98:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	091b      	lsrs	r3, r3, #4
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	490a      	ldr	r1, [pc, #40]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001ba4:	5ccb      	ldrb	r3, [r1, r3]
 8001ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8001baa:	4a09      	ldr	r2, [pc, #36]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001bae:	4b09      	ldr	r3, [pc, #36]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff f93a 	bl	8000e2c <HAL_InitTick>

  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40023c00 	.word	0x40023c00
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	08004bb4 	.word	0x08004bb4
 8001bd0:	20000000 	.word	0x20000000
 8001bd4:	20000004 	.word	0x20000004

08001bd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bdc:	b090      	sub	sp, #64	@ 0x40
 8001bde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001be0:	2300      	movs	r3, #0
 8001be2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bf0:	4b59      	ldr	r3, [pc, #356]	@ (8001d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 030c 	and.w	r3, r3, #12
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d00d      	beq.n	8001c18 <HAL_RCC_GetSysClockFreq+0x40>
 8001bfc:	2b08      	cmp	r3, #8
 8001bfe:	f200 80a1 	bhi.w	8001d44 <HAL_RCC_GetSysClockFreq+0x16c>
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d002      	beq.n	8001c0c <HAL_RCC_GetSysClockFreq+0x34>
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d003      	beq.n	8001c12 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c0a:	e09b      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c0c:	4b53      	ldr	r3, [pc, #332]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x184>)
 8001c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c10:	e09b      	b.n	8001d4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c12:	4b53      	ldr	r3, [pc, #332]	@ (8001d60 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c14:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c16:	e098      	b.n	8001d4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c18:	4b4f      	ldr	r3, [pc, #316]	@ (8001d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c20:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c22:	4b4d      	ldr	r3, [pc, #308]	@ (8001d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d028      	beq.n	8001c80 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c2e:	4b4a      	ldr	r3, [pc, #296]	@ (8001d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	099b      	lsrs	r3, r3, #6
 8001c34:	2200      	movs	r2, #0
 8001c36:	623b      	str	r3, [r7, #32]
 8001c38:	627a      	str	r2, [r7, #36]	@ 0x24
 8001c3a:	6a3b      	ldr	r3, [r7, #32]
 8001c3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001c40:	2100      	movs	r1, #0
 8001c42:	4b47      	ldr	r3, [pc, #284]	@ (8001d60 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c44:	fb03 f201 	mul.w	r2, r3, r1
 8001c48:	2300      	movs	r3, #0
 8001c4a:	fb00 f303 	mul.w	r3, r0, r3
 8001c4e:	4413      	add	r3, r2
 8001c50:	4a43      	ldr	r2, [pc, #268]	@ (8001d60 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c52:	fba0 1202 	umull	r1, r2, r0, r2
 8001c56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c58:	460a      	mov	r2, r1
 8001c5a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001c5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c5e:	4413      	add	r3, r2
 8001c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c64:	2200      	movs	r2, #0
 8001c66:	61bb      	str	r3, [r7, #24]
 8001c68:	61fa      	str	r2, [r7, #28]
 8001c6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001c72:	f7fe fb05 	bl	8000280 <__aeabi_uldivmod>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c7e:	e053      	b.n	8001d28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c80:	4b35      	ldr	r3, [pc, #212]	@ (8001d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	099b      	lsrs	r3, r3, #6
 8001c86:	2200      	movs	r2, #0
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	617a      	str	r2, [r7, #20]
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c92:	f04f 0b00 	mov.w	fp, #0
 8001c96:	4652      	mov	r2, sl
 8001c98:	465b      	mov	r3, fp
 8001c9a:	f04f 0000 	mov.w	r0, #0
 8001c9e:	f04f 0100 	mov.w	r1, #0
 8001ca2:	0159      	lsls	r1, r3, #5
 8001ca4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ca8:	0150      	lsls	r0, r2, #5
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	ebb2 080a 	subs.w	r8, r2, sl
 8001cb2:	eb63 090b 	sbc.w	r9, r3, fp
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	f04f 0300 	mov.w	r3, #0
 8001cbe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001cc2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001cc6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001cca:	ebb2 0408 	subs.w	r4, r2, r8
 8001cce:	eb63 0509 	sbc.w	r5, r3, r9
 8001cd2:	f04f 0200 	mov.w	r2, #0
 8001cd6:	f04f 0300 	mov.w	r3, #0
 8001cda:	00eb      	lsls	r3, r5, #3
 8001cdc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ce0:	00e2      	lsls	r2, r4, #3
 8001ce2:	4614      	mov	r4, r2
 8001ce4:	461d      	mov	r5, r3
 8001ce6:	eb14 030a 	adds.w	r3, r4, sl
 8001cea:	603b      	str	r3, [r7, #0]
 8001cec:	eb45 030b 	adc.w	r3, r5, fp
 8001cf0:	607b      	str	r3, [r7, #4]
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	f04f 0300 	mov.w	r3, #0
 8001cfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cfe:	4629      	mov	r1, r5
 8001d00:	028b      	lsls	r3, r1, #10
 8001d02:	4621      	mov	r1, r4
 8001d04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d08:	4621      	mov	r1, r4
 8001d0a:	028a      	lsls	r2, r1, #10
 8001d0c:	4610      	mov	r0, r2
 8001d0e:	4619      	mov	r1, r3
 8001d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d12:	2200      	movs	r2, #0
 8001d14:	60bb      	str	r3, [r7, #8]
 8001d16:	60fa      	str	r2, [r7, #12]
 8001d18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d1c:	f7fe fab0 	bl	8000280 <__aeabi_uldivmod>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4613      	mov	r3, r2
 8001d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001d28:	4b0b      	ldr	r3, [pc, #44]	@ (8001d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	0c1b      	lsrs	r3, r3, #16
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	3301      	adds	r3, #1
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001d38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d40:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d42:	e002      	b.n	8001d4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d44:	4b05      	ldr	r3, [pc, #20]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x184>)
 8001d46:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3740      	adds	r7, #64	@ 0x40
 8001d50:	46bd      	mov	sp, r7
 8001d52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d56:	bf00      	nop
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	00f42400 	.word	0x00f42400
 8001d60:	017d7840 	.word	0x017d7840

08001d64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d68:	4b03      	ldr	r3, [pc, #12]	@ (8001d78 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	20000000 	.word	0x20000000

08001d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d80:	f7ff fff0 	bl	8001d64 <HAL_RCC_GetHCLKFreq>
 8001d84:	4602      	mov	r2, r0
 8001d86:	4b05      	ldr	r3, [pc, #20]	@ (8001d9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	0a9b      	lsrs	r3, r3, #10
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	4903      	ldr	r1, [pc, #12]	@ (8001da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d92:	5ccb      	ldrb	r3, [r1, r3]
 8001d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	08004bc4 	.word	0x08004bc4

08001da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001da8:	f7ff ffdc 	bl	8001d64 <HAL_RCC_GetHCLKFreq>
 8001dac:	4602      	mov	r2, r0
 8001dae:	4b05      	ldr	r3, [pc, #20]	@ (8001dc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	0b5b      	lsrs	r3, r3, #13
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	4903      	ldr	r1, [pc, #12]	@ (8001dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dba:	5ccb      	ldrb	r3, [r1, r3]
 8001dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	08004bc4 	.word	0x08004bc4

08001dcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e041      	b.n	8001e62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d106      	bne.n	8001df8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7fe fdf2 	bl	80009dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3304      	adds	r3, #4
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	f000 fbf4 	bl	80025f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e041      	b.n	8001f00 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d106      	bne.n	8001e96 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f839 	bl	8001f08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2202      	movs	r2, #2
 8001e9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4610      	mov	r0, r2
 8001eaa:	f000 fba5 	bl	80025f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d109      	bne.n	8001f40 <HAL_TIM_PWM_Start+0x24>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	bf14      	ite	ne
 8001f38:	2301      	movne	r3, #1
 8001f3a:	2300      	moveq	r3, #0
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	e022      	b.n	8001f86 <HAL_TIM_PWM_Start+0x6a>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	d109      	bne.n	8001f5a <HAL_TIM_PWM_Start+0x3e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	bf14      	ite	ne
 8001f52:	2301      	movne	r3, #1
 8001f54:	2300      	moveq	r3, #0
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	e015      	b.n	8001f86 <HAL_TIM_PWM_Start+0x6a>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	2b08      	cmp	r3, #8
 8001f5e:	d109      	bne.n	8001f74 <HAL_TIM_PWM_Start+0x58>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	bf14      	ite	ne
 8001f6c:	2301      	movne	r3, #1
 8001f6e:	2300      	moveq	r3, #0
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	e008      	b.n	8001f86 <HAL_TIM_PWM_Start+0x6a>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	bf14      	ite	ne
 8001f80:	2301      	movne	r3, #1
 8001f82:	2300      	moveq	r3, #0
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e068      	b.n	8002060 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d104      	bne.n	8001f9e <HAL_TIM_PWM_Start+0x82>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2202      	movs	r2, #2
 8001f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f9c:	e013      	b.n	8001fc6 <HAL_TIM_PWM_Start+0xaa>
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	2b04      	cmp	r3, #4
 8001fa2:	d104      	bne.n	8001fae <HAL_TIM_PWM_Start+0x92>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001fac:	e00b      	b.n	8001fc6 <HAL_TIM_PWM_Start+0xaa>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	2b08      	cmp	r3, #8
 8001fb2:	d104      	bne.n	8001fbe <HAL_TIM_PWM_Start+0xa2>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001fbc:	e003      	b.n	8001fc6 <HAL_TIM_PWM_Start+0xaa>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	6839      	ldr	r1, [r7, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 fdc4 	bl	8002b5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a23      	ldr	r2, [pc, #140]	@ (8002068 <HAL_TIM_PWM_Start+0x14c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d107      	bne.n	8001fee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001fec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a1d      	ldr	r2, [pc, #116]	@ (8002068 <HAL_TIM_PWM_Start+0x14c>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d018      	beq.n	800202a <HAL_TIM_PWM_Start+0x10e>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002000:	d013      	beq.n	800202a <HAL_TIM_PWM_Start+0x10e>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a19      	ldr	r2, [pc, #100]	@ (800206c <HAL_TIM_PWM_Start+0x150>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d00e      	beq.n	800202a <HAL_TIM_PWM_Start+0x10e>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a17      	ldr	r2, [pc, #92]	@ (8002070 <HAL_TIM_PWM_Start+0x154>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d009      	beq.n	800202a <HAL_TIM_PWM_Start+0x10e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a16      	ldr	r2, [pc, #88]	@ (8002074 <HAL_TIM_PWM_Start+0x158>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d004      	beq.n	800202a <HAL_TIM_PWM_Start+0x10e>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a14      	ldr	r2, [pc, #80]	@ (8002078 <HAL_TIM_PWM_Start+0x15c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d111      	bne.n	800204e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2b06      	cmp	r3, #6
 800203a:	d010      	beq.n	800205e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f042 0201 	orr.w	r2, r2, #1
 800204a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800204c:	e007      	b.n	800205e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f042 0201 	orr.w	r2, r2, #1
 800205c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40010000 	.word	0x40010000
 800206c:	40000400 	.word	0x40000400
 8002070:	40000800 	.word	0x40000800
 8002074:	40000c00 	.word	0x40000c00
 8002078:	40014000 	.word	0x40014000

0800207c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e097      	b.n	80021c0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b00      	cmp	r3, #0
 800209a:	d106      	bne.n	80020aa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7fe fc51 	bl	800094c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2202      	movs	r2, #2
 80020ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	6812      	ldr	r2, [r2, #0]
 80020bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80020c0:	f023 0307 	bic.w	r3, r3, #7
 80020c4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3304      	adds	r3, #4
 80020ce:	4619      	mov	r1, r3
 80020d0:	4610      	mov	r0, r2
 80020d2:	f000 fa91 	bl	80025f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020fe:	f023 0303 	bic.w	r3, r3, #3
 8002102:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	021b      	lsls	r3, r3, #8
 800210e:	4313      	orrs	r3, r2
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	4313      	orrs	r3, r2
 8002114:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800211c:	f023 030c 	bic.w	r3, r3, #12
 8002120:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002128:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800212c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	021b      	lsls	r3, r3, #8
 8002138:	4313      	orrs	r3, r2
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	011a      	lsls	r2, r3, #4
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	031b      	lsls	r3, r3, #12
 800214c:	4313      	orrs	r3, r2
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800215a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8002162:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	4313      	orrs	r3, r2
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	4313      	orrs	r3, r2
 8002174:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80021d8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80021e0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80021e8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80021f0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d110      	bne.n	800221a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d102      	bne.n	8002204 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80021fe:	7b7b      	ldrb	r3, [r7, #13]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d001      	beq.n	8002208 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e069      	b.n	80022dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2202      	movs	r2, #2
 800220c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2202      	movs	r2, #2
 8002214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002218:	e031      	b.n	800227e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	2b04      	cmp	r3, #4
 800221e:	d110      	bne.n	8002242 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002220:	7bbb      	ldrb	r3, [r7, #14]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d102      	bne.n	800222c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002226:	7b3b      	ldrb	r3, [r7, #12]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d001      	beq.n	8002230 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e055      	b.n	80022dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2202      	movs	r2, #2
 8002234:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2202      	movs	r2, #2
 800223c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002240:	e01d      	b.n	800227e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002242:	7bfb      	ldrb	r3, [r7, #15]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d108      	bne.n	800225a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002248:	7bbb      	ldrb	r3, [r7, #14]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d105      	bne.n	800225a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800224e:	7b7b      	ldrb	r3, [r7, #13]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d102      	bne.n	800225a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002254:	7b3b      	ldrb	r3, [r7, #12]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d001      	beq.n	800225e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e03e      	b.n	80022dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2202      	movs	r2, #2
 8002262:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2202      	movs	r2, #2
 800226a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2202      	movs	r2, #2
 8002272:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2202      	movs	r2, #2
 800227a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_TIM_Encoder_Start+0xc4>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	2b04      	cmp	r3, #4
 8002288:	d008      	beq.n	800229c <HAL_TIM_Encoder_Start+0xd4>
 800228a:	e00f      	b.n	80022ac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2201      	movs	r2, #1
 8002292:	2100      	movs	r1, #0
 8002294:	4618      	mov	r0, r3
 8002296:	f000 fc61 	bl	8002b5c <TIM_CCxChannelCmd>
      break;
 800229a:	e016      	b.n	80022ca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2201      	movs	r2, #1
 80022a2:	2104      	movs	r1, #4
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 fc59 	bl	8002b5c <TIM_CCxChannelCmd>
      break;
 80022aa:	e00e      	b.n	80022ca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2201      	movs	r2, #1
 80022b2:	2100      	movs	r1, #0
 80022b4:	4618      	mov	r0, r3
 80022b6:	f000 fc51 	bl	8002b5c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2201      	movs	r2, #1
 80022c0:	2104      	movs	r1, #4
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 fc4a 	bl	8002b5c <TIM_CCxChannelCmd>
      break;
 80022c8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f042 0201 	orr.w	r2, r2, #1
 80022d8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022f0:	2300      	movs	r3, #0
 80022f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d101      	bne.n	8002302 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80022fe:	2302      	movs	r3, #2
 8002300:	e0ae      	b.n	8002460 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b0c      	cmp	r3, #12
 800230e:	f200 809f 	bhi.w	8002450 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002312:	a201      	add	r2, pc, #4	@ (adr r2, 8002318 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002318:	0800234d 	.word	0x0800234d
 800231c:	08002451 	.word	0x08002451
 8002320:	08002451 	.word	0x08002451
 8002324:	08002451 	.word	0x08002451
 8002328:	0800238d 	.word	0x0800238d
 800232c:	08002451 	.word	0x08002451
 8002330:	08002451 	.word	0x08002451
 8002334:	08002451 	.word	0x08002451
 8002338:	080023cf 	.word	0x080023cf
 800233c:	08002451 	.word	0x08002451
 8002340:	08002451 	.word	0x08002451
 8002344:	08002451 	.word	0x08002451
 8002348:	0800240f 	.word	0x0800240f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68b9      	ldr	r1, [r7, #8]
 8002352:	4618      	mov	r0, r3
 8002354:	f000 f9dc 	bl	8002710 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	699a      	ldr	r2, [r3, #24]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0208 	orr.w	r2, r2, #8
 8002366:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	699a      	ldr	r2, [r3, #24]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0204 	bic.w	r2, r2, #4
 8002376:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6999      	ldr	r1, [r3, #24]
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	691a      	ldr	r2, [r3, #16]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	430a      	orrs	r2, r1
 8002388:	619a      	str	r2, [r3, #24]
      break;
 800238a:	e064      	b.n	8002456 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68b9      	ldr	r1, [r7, #8]
 8002392:	4618      	mov	r0, r3
 8002394:	f000 fa22 	bl	80027dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	699a      	ldr	r2, [r3, #24]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	699a      	ldr	r2, [r3, #24]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6999      	ldr	r1, [r3, #24]
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	021a      	lsls	r2, r3, #8
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	619a      	str	r2, [r3, #24]
      break;
 80023cc:	e043      	b.n	8002456 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68b9      	ldr	r1, [r7, #8]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 fa6d 	bl	80028b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	69da      	ldr	r2, [r3, #28]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f042 0208 	orr.w	r2, r2, #8
 80023e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	69da      	ldr	r2, [r3, #28]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0204 	bic.w	r2, r2, #4
 80023f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	69d9      	ldr	r1, [r3, #28]
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	691a      	ldr	r2, [r3, #16]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	61da      	str	r2, [r3, #28]
      break;
 800240c:	e023      	b.n	8002456 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68b9      	ldr	r1, [r7, #8]
 8002414:	4618      	mov	r0, r3
 8002416:	f000 fab7 	bl	8002988 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	69da      	ldr	r2, [r3, #28]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002428:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	69da      	ldr	r2, [r3, #28]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002438:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	69d9      	ldr	r1, [r3, #28]
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	021a      	lsls	r2, r3, #8
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	61da      	str	r2, [r3, #28]
      break;
 800244e:	e002      	b.n	8002456 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	75fb      	strb	r3, [r7, #23]
      break;
 8002454:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800245e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002472:	2300      	movs	r3, #0
 8002474:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800247c:	2b01      	cmp	r3, #1
 800247e:	d101      	bne.n	8002484 <HAL_TIM_ConfigClockSource+0x1c>
 8002480:	2302      	movs	r3, #2
 8002482:	e0b4      	b.n	80025ee <HAL_TIM_ConfigClockSource+0x186>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2202      	movs	r2, #2
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80024a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80024aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68ba      	ldr	r2, [r7, #8]
 80024b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024bc:	d03e      	beq.n	800253c <HAL_TIM_ConfigClockSource+0xd4>
 80024be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024c2:	f200 8087 	bhi.w	80025d4 <HAL_TIM_ConfigClockSource+0x16c>
 80024c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024ca:	f000 8086 	beq.w	80025da <HAL_TIM_ConfigClockSource+0x172>
 80024ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024d2:	d87f      	bhi.n	80025d4 <HAL_TIM_ConfigClockSource+0x16c>
 80024d4:	2b70      	cmp	r3, #112	@ 0x70
 80024d6:	d01a      	beq.n	800250e <HAL_TIM_ConfigClockSource+0xa6>
 80024d8:	2b70      	cmp	r3, #112	@ 0x70
 80024da:	d87b      	bhi.n	80025d4 <HAL_TIM_ConfigClockSource+0x16c>
 80024dc:	2b60      	cmp	r3, #96	@ 0x60
 80024de:	d050      	beq.n	8002582 <HAL_TIM_ConfigClockSource+0x11a>
 80024e0:	2b60      	cmp	r3, #96	@ 0x60
 80024e2:	d877      	bhi.n	80025d4 <HAL_TIM_ConfigClockSource+0x16c>
 80024e4:	2b50      	cmp	r3, #80	@ 0x50
 80024e6:	d03c      	beq.n	8002562 <HAL_TIM_ConfigClockSource+0xfa>
 80024e8:	2b50      	cmp	r3, #80	@ 0x50
 80024ea:	d873      	bhi.n	80025d4 <HAL_TIM_ConfigClockSource+0x16c>
 80024ec:	2b40      	cmp	r3, #64	@ 0x40
 80024ee:	d058      	beq.n	80025a2 <HAL_TIM_ConfigClockSource+0x13a>
 80024f0:	2b40      	cmp	r3, #64	@ 0x40
 80024f2:	d86f      	bhi.n	80025d4 <HAL_TIM_ConfigClockSource+0x16c>
 80024f4:	2b30      	cmp	r3, #48	@ 0x30
 80024f6:	d064      	beq.n	80025c2 <HAL_TIM_ConfigClockSource+0x15a>
 80024f8:	2b30      	cmp	r3, #48	@ 0x30
 80024fa:	d86b      	bhi.n	80025d4 <HAL_TIM_ConfigClockSource+0x16c>
 80024fc:	2b20      	cmp	r3, #32
 80024fe:	d060      	beq.n	80025c2 <HAL_TIM_ConfigClockSource+0x15a>
 8002500:	2b20      	cmp	r3, #32
 8002502:	d867      	bhi.n	80025d4 <HAL_TIM_ConfigClockSource+0x16c>
 8002504:	2b00      	cmp	r3, #0
 8002506:	d05c      	beq.n	80025c2 <HAL_TIM_ConfigClockSource+0x15a>
 8002508:	2b10      	cmp	r3, #16
 800250a:	d05a      	beq.n	80025c2 <HAL_TIM_ConfigClockSource+0x15a>
 800250c:	e062      	b.n	80025d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800251e:	f000 fafd 	bl	8002b1c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002530:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	609a      	str	r2, [r3, #8]
      break;
 800253a:	e04f      	b.n	80025dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800254c:	f000 fae6 	bl	8002b1c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800255e:	609a      	str	r2, [r3, #8]
      break;
 8002560:	e03c      	b.n	80025dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800256e:	461a      	mov	r2, r3
 8002570:	f000 fa5a 	bl	8002a28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2150      	movs	r1, #80	@ 0x50
 800257a:	4618      	mov	r0, r3
 800257c:	f000 fab3 	bl	8002ae6 <TIM_ITRx_SetConfig>
      break;
 8002580:	e02c      	b.n	80025dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800258e:	461a      	mov	r2, r3
 8002590:	f000 fa79 	bl	8002a86 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2160      	movs	r1, #96	@ 0x60
 800259a:	4618      	mov	r0, r3
 800259c:	f000 faa3 	bl	8002ae6 <TIM_ITRx_SetConfig>
      break;
 80025a0:	e01c      	b.n	80025dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025ae:	461a      	mov	r2, r3
 80025b0:	f000 fa3a 	bl	8002a28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2140      	movs	r1, #64	@ 0x40
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 fa93 	bl	8002ae6 <TIM_ITRx_SetConfig>
      break;
 80025c0:	e00c      	b.n	80025dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4619      	mov	r1, r3
 80025cc:	4610      	mov	r0, r2
 80025ce:	f000 fa8a 	bl	8002ae6 <TIM_ITRx_SetConfig>
      break;
 80025d2:	e003      	b.n	80025dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	73fb      	strb	r3, [r7, #15]
      break;
 80025d8:	e000      	b.n	80025dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80025da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
	...

080025f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a3a      	ldr	r2, [pc, #232]	@ (80026f4 <TIM_Base_SetConfig+0xfc>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d00f      	beq.n	8002630 <TIM_Base_SetConfig+0x38>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002616:	d00b      	beq.n	8002630 <TIM_Base_SetConfig+0x38>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a37      	ldr	r2, [pc, #220]	@ (80026f8 <TIM_Base_SetConfig+0x100>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d007      	beq.n	8002630 <TIM_Base_SetConfig+0x38>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a36      	ldr	r2, [pc, #216]	@ (80026fc <TIM_Base_SetConfig+0x104>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d003      	beq.n	8002630 <TIM_Base_SetConfig+0x38>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a35      	ldr	r2, [pc, #212]	@ (8002700 <TIM_Base_SetConfig+0x108>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d108      	bne.n	8002642 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002636:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	4313      	orrs	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a2b      	ldr	r2, [pc, #172]	@ (80026f4 <TIM_Base_SetConfig+0xfc>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d01b      	beq.n	8002682 <TIM_Base_SetConfig+0x8a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002650:	d017      	beq.n	8002682 <TIM_Base_SetConfig+0x8a>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a28      	ldr	r2, [pc, #160]	@ (80026f8 <TIM_Base_SetConfig+0x100>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d013      	beq.n	8002682 <TIM_Base_SetConfig+0x8a>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a27      	ldr	r2, [pc, #156]	@ (80026fc <TIM_Base_SetConfig+0x104>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d00f      	beq.n	8002682 <TIM_Base_SetConfig+0x8a>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a26      	ldr	r2, [pc, #152]	@ (8002700 <TIM_Base_SetConfig+0x108>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d00b      	beq.n	8002682 <TIM_Base_SetConfig+0x8a>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a25      	ldr	r2, [pc, #148]	@ (8002704 <TIM_Base_SetConfig+0x10c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d007      	beq.n	8002682 <TIM_Base_SetConfig+0x8a>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a24      	ldr	r2, [pc, #144]	@ (8002708 <TIM_Base_SetConfig+0x110>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d003      	beq.n	8002682 <TIM_Base_SetConfig+0x8a>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a23      	ldr	r2, [pc, #140]	@ (800270c <TIM_Base_SetConfig+0x114>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d108      	bne.n	8002694 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	4313      	orrs	r3, r2
 8002692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	4313      	orrs	r3, r2
 80026a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a0e      	ldr	r2, [pc, #56]	@ (80026f4 <TIM_Base_SetConfig+0xfc>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d103      	bne.n	80026c8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	691a      	ldr	r2, [r3, #16]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d105      	bne.n	80026e6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	f023 0201 	bic.w	r2, r3, #1
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	611a      	str	r2, [r3, #16]
  }
}
 80026e6:	bf00      	nop
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	40010000 	.word	0x40010000
 80026f8:	40000400 	.word	0x40000400
 80026fc:	40000800 	.word	0x40000800
 8002700:	40000c00 	.word	0x40000c00
 8002704:	40014000 	.word	0x40014000
 8002708:	40014400 	.word	0x40014400
 800270c:	40014800 	.word	0x40014800

08002710 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002710:	b480      	push	{r7}
 8002712:	b087      	sub	sp, #28
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	f023 0201 	bic.w	r2, r3, #1
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800273e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f023 0303 	bic.w	r3, r3, #3
 8002746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	4313      	orrs	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f023 0302 	bic.w	r3, r3, #2
 8002758:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	4313      	orrs	r3, r2
 8002762:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a1c      	ldr	r2, [pc, #112]	@ (80027d8 <TIM_OC1_SetConfig+0xc8>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d10c      	bne.n	8002786 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	f023 0308 	bic.w	r3, r3, #8
 8002772:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	4313      	orrs	r3, r2
 800277c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f023 0304 	bic.w	r3, r3, #4
 8002784:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a13      	ldr	r2, [pc, #76]	@ (80027d8 <TIM_OC1_SetConfig+0xc8>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d111      	bne.n	80027b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002794:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800279c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	621a      	str	r2, [r3, #32]
}
 80027cc:	bf00      	nop
 80027ce:	371c      	adds	r7, #28
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	40010000 	.word	0x40010000

080027dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	f023 0210 	bic.w	r2, r3, #16
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800280a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002812:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	021b      	lsls	r3, r3, #8
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	4313      	orrs	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f023 0320 	bic.w	r3, r3, #32
 8002826:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	4313      	orrs	r3, r2
 8002832:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a1e      	ldr	r2, [pc, #120]	@ (80028b0 <TIM_OC2_SetConfig+0xd4>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d10d      	bne.n	8002858 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002842:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	011b      	lsls	r3, r3, #4
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	4313      	orrs	r3, r2
 800284e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002856:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a15      	ldr	r2, [pc, #84]	@ (80028b0 <TIM_OC2_SetConfig+0xd4>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d113      	bne.n	8002888 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002866:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800286e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	4313      	orrs	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	621a      	str	r2, [r3, #32]
}
 80028a2:	bf00      	nop
 80028a4:	371c      	adds	r7, #28
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	40010000 	.word	0x40010000

080028b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b087      	sub	sp, #28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f023 0303 	bic.w	r3, r3, #3
 80028ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80028fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	021b      	lsls	r3, r3, #8
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	4313      	orrs	r3, r2
 8002908:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a1d      	ldr	r2, [pc, #116]	@ (8002984 <TIM_OC3_SetConfig+0xd0>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d10d      	bne.n	800292e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002918:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	021b      	lsls	r3, r3, #8
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	4313      	orrs	r3, r2
 8002924:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800292c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a14      	ldr	r2, [pc, #80]	@ (8002984 <TIM_OC3_SetConfig+0xd0>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d113      	bne.n	800295e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800293c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002944:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4313      	orrs	r3, r2
 8002950:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	011b      	lsls	r3, r3, #4
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	4313      	orrs	r3, r2
 800295c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	697a      	ldr	r2, [r7, #20]
 8002976:	621a      	str	r2, [r3, #32]
}
 8002978:	bf00      	nop
 800297a:	371c      	adds	r7, #28
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	40010000 	.word	0x40010000

08002988 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002988:	b480      	push	{r7}
 800298a:	b087      	sub	sp, #28
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	021b      	lsls	r3, r3, #8
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80029d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	031b      	lsls	r3, r3, #12
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a10      	ldr	r2, [pc, #64]	@ (8002a24 <TIM_OC4_SetConfig+0x9c>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d109      	bne.n	80029fc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80029ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	019b      	lsls	r3, r3, #6
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	621a      	str	r2, [r3, #32]
}
 8002a16:	bf00      	nop
 8002a18:	371c      	adds	r7, #28
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	40010000 	.word	0x40010000

08002a28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b087      	sub	sp, #28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	f023 0201 	bic.w	r2, r3, #1
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f023 030a 	bic.w	r3, r3, #10
 8002a64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	621a      	str	r2, [r3, #32]
}
 8002a7a:	bf00      	nop
 8002a7c:	371c      	adds	r7, #28
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b087      	sub	sp, #28
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	60f8      	str	r0, [r7, #12]
 8002a8e:	60b9      	str	r1, [r7, #8]
 8002a90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	f023 0210 	bic.w	r2, r3, #16
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002ab0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	031b      	lsls	r3, r3, #12
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002ac2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	011b      	lsls	r3, r3, #4
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	621a      	str	r2, [r3, #32]
}
 8002ada:	bf00      	nop
 8002adc:	371c      	adds	r7, #28
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b085      	sub	sp, #20
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
 8002aee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002afc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	f043 0307 	orr.w	r3, r3, #7
 8002b08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	609a      	str	r2, [r3, #8]
}
 8002b10:	bf00      	nop
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b087      	sub	sp, #28
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
 8002b28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	021a      	lsls	r2, r3, #8
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	609a      	str	r2, [r3, #8]
}
 8002b50:	bf00      	nop
 8002b52:	371c      	adds	r7, #28
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b087      	sub	sp, #28
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	f003 031f 	and.w	r3, r3, #31
 8002b6e:	2201      	movs	r2, #1
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6a1a      	ldr	r2, [r3, #32]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	401a      	ands	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6a1a      	ldr	r2, [r3, #32]
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	f003 031f 	and.w	r3, r3, #31
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	fa01 f303 	lsl.w	r3, r1, r3
 8002b94:	431a      	orrs	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	621a      	str	r2, [r3, #32]
}
 8002b9a:	bf00      	nop
 8002b9c:	371c      	adds	r7, #28
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
	...

08002ba8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d101      	bne.n	8002bc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	e050      	b.n	8002c62 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002be6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a1c      	ldr	r2, [pc, #112]	@ (8002c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d018      	beq.n	8002c36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c0c:	d013      	beq.n	8002c36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a18      	ldr	r2, [pc, #96]	@ (8002c74 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d00e      	beq.n	8002c36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a16      	ldr	r2, [pc, #88]	@ (8002c78 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d009      	beq.n	8002c36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a15      	ldr	r2, [pc, #84]	@ (8002c7c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d004      	beq.n	8002c36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a13      	ldr	r2, [pc, #76]	@ (8002c80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d10c      	bne.n	8002c50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68ba      	ldr	r2, [r7, #8]
 8002c4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	40010000 	.word	0x40010000
 8002c74:	40000400 	.word	0x40000400
 8002c78:	40000800 	.word	0x40000800
 8002c7c:	40000c00 	.word	0x40000c00
 8002c80:	40014000 	.word	0x40014000

08002c84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e042      	b.n	8002d1c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d106      	bne.n	8002cb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7fd fef2 	bl	8000a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2224      	movs	r2, #36	@ 0x24
 8002cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002cc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 fdbd 	bl	8003848 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	691a      	ldr	r2, [r3, #16]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002cdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	695a      	ldr	r2, [r3, #20]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002cec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002cfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2220      	movs	r2, #32
 8002d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08a      	sub	sp, #40	@ 0x28
 8002d28:	af02      	add	r7, sp, #8
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	4613      	mov	r3, r2
 8002d32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b20      	cmp	r3, #32
 8002d42:	d175      	bne.n	8002e30 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d002      	beq.n	8002d50 <HAL_UART_Transmit+0x2c>
 8002d4a:	88fb      	ldrh	r3, [r7, #6]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e06e      	b.n	8002e32 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2221      	movs	r2, #33	@ 0x21
 8002d5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d62:	f7fe f8a7 	bl	8000eb4 <HAL_GetTick>
 8002d66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	88fa      	ldrh	r2, [r7, #6]
 8002d6c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	88fa      	ldrh	r2, [r7, #6]
 8002d72:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d7c:	d108      	bne.n	8002d90 <HAL_UART_Transmit+0x6c>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d104      	bne.n	8002d90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d86:	2300      	movs	r3, #0
 8002d88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	61bb      	str	r3, [r7, #24]
 8002d8e:	e003      	b.n	8002d98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d94:	2300      	movs	r3, #0
 8002d96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d98:	e02e      	b.n	8002df8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	2200      	movs	r2, #0
 8002da2:	2180      	movs	r1, #128	@ 0x80
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f000 fb1f 	bl	80033e8 <UART_WaitOnFlagUntilTimeout>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d005      	beq.n	8002dbc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e03a      	b.n	8002e32 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10b      	bne.n	8002dda <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	3302      	adds	r3, #2
 8002dd6:	61bb      	str	r3, [r7, #24]
 8002dd8:	e007      	b.n	8002dea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	781a      	ldrb	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	3301      	adds	r3, #1
 8002de8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	3b01      	subs	r3, #1
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1cb      	bne.n	8002d9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	2140      	movs	r1, #64	@ 0x40
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 faeb 	bl	80033e8 <UART_WaitOnFlagUntilTimeout>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d005      	beq.n	8002e24 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e006      	b.n	8002e32 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2220      	movs	r2, #32
 8002e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	e000      	b.n	8002e32 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002e30:	2302      	movs	r3, #2
  }
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3720      	adds	r7, #32
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b084      	sub	sp, #16
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	60f8      	str	r0, [r7, #12]
 8002e42:	60b9      	str	r1, [r7, #8]
 8002e44:	4613      	mov	r3, r2
 8002e46:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b20      	cmp	r3, #32
 8002e52:	d112      	bne.n	8002e7a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <HAL_UART_Receive_IT+0x26>
 8002e5a:	88fb      	ldrh	r3, [r7, #6]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e00b      	b.n	8002e7c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002e6a:	88fb      	ldrh	r3, [r7, #6]
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	68b9      	ldr	r1, [r7, #8]
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 fb12 	bl	800349a <UART_Start_Receive_IT>
 8002e76:	4603      	mov	r3, r0
 8002e78:	e000      	b.n	8002e7c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002e7a:	2302      	movs	r3, #2
  }
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b0ba      	sub	sp, #232	@ 0xe8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002ec2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10f      	bne.n	8002eea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ece:	f003 0320 	and.w	r3, r3, #32
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d009      	beq.n	8002eea <HAL_UART_IRQHandler+0x66>
 8002ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002eda:	f003 0320 	and.w	r3, r3, #32
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 fbf2 	bl	80036cc <UART_Receive_IT>
      return;
 8002ee8:	e25b      	b.n	80033a2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002eea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 80de 	beq.w	80030b0 <HAL_UART_IRQHandler+0x22c>
 8002ef4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d106      	bne.n	8002f0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f04:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 80d1 	beq.w	80030b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00b      	beq.n	8002f32 <HAL_UART_IRQHandler+0xae>
 8002f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d005      	beq.n	8002f32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2a:	f043 0201 	orr.w	r2, r3, #1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f36:	f003 0304 	and.w	r3, r3, #4
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00b      	beq.n	8002f56 <HAL_UART_IRQHandler+0xd2>
 8002f3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d005      	beq.n	8002f56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f4e:	f043 0202 	orr.w	r2, r3, #2
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00b      	beq.n	8002f7a <HAL_UART_IRQHandler+0xf6>
 8002f62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d005      	beq.n	8002f7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f72:	f043 0204 	orr.w	r2, r3, #4
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d011      	beq.n	8002faa <HAL_UART_IRQHandler+0x126>
 8002f86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f8a:	f003 0320 	and.w	r3, r3, #32
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d105      	bne.n	8002f9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d005      	beq.n	8002faa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa2:	f043 0208 	orr.w	r2, r3, #8
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 81f2 	beq.w	8003398 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fb8:	f003 0320 	and.w	r3, r3, #32
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d008      	beq.n	8002fd2 <HAL_UART_IRQHandler+0x14e>
 8002fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fc4:	f003 0320 	and.w	r3, r3, #32
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d002      	beq.n	8002fd2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 fb7d 	bl	80036cc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fdc:	2b40      	cmp	r3, #64	@ 0x40
 8002fde:	bf0c      	ite	eq
 8002fe0:	2301      	moveq	r3, #1
 8002fe2:	2300      	movne	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d103      	bne.n	8002ffe <HAL_UART_IRQHandler+0x17a>
 8002ff6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d04f      	beq.n	800309e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 fa85 	bl	800350e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800300e:	2b40      	cmp	r3, #64	@ 0x40
 8003010:	d141      	bne.n	8003096 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	3314      	adds	r3, #20
 8003018:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800301c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003020:	e853 3f00 	ldrex	r3, [r3]
 8003024:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003028:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800302c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003030:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	3314      	adds	r3, #20
 800303a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800303e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003042:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003046:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800304a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800304e:	e841 2300 	strex	r3, r2, [r1]
 8003052:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003056:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1d9      	bne.n	8003012 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003062:	2b00      	cmp	r3, #0
 8003064:	d013      	beq.n	800308e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800306a:	4a7e      	ldr	r2, [pc, #504]	@ (8003264 <HAL_UART_IRQHandler+0x3e0>)
 800306c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003072:	4618      	mov	r0, r3
 8003074:	f7fe f8ab 	bl	80011ce <HAL_DMA_Abort_IT>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d016      	beq.n	80030ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003082:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003088:	4610      	mov	r0, r2
 800308a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800308c:	e00e      	b.n	80030ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f994 	bl	80033bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003094:	e00a      	b.n	80030ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f990 	bl	80033bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800309c:	e006      	b.n	80030ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f98c 	bl	80033bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80030aa:	e175      	b.n	8003398 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030ac:	bf00      	nop
    return;
 80030ae:	e173      	b.n	8003398 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	f040 814f 	bne.w	8003358 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80030ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030be:	f003 0310 	and.w	r3, r3, #16
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 8148 	beq.w	8003358 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80030c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030cc:	f003 0310 	and.w	r3, r3, #16
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 8141 	beq.w	8003358 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030d6:	2300      	movs	r3, #0
 80030d8:	60bb      	str	r3, [r7, #8]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	60bb      	str	r3, [r7, #8]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	60bb      	str	r3, [r7, #8]
 80030ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030f6:	2b40      	cmp	r3, #64	@ 0x40
 80030f8:	f040 80b6 	bne.w	8003268 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003108:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 8145 	beq.w	800339c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003116:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800311a:	429a      	cmp	r2, r3
 800311c:	f080 813e 	bcs.w	800339c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003126:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003132:	f000 8088 	beq.w	8003246 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	330c      	adds	r3, #12
 800313c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003140:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003144:	e853 3f00 	ldrex	r3, [r3]
 8003148:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800314c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003150:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003154:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	330c      	adds	r3, #12
 800315e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003162:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003166:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800316a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800316e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003172:	e841 2300 	strex	r3, r2, [r1]
 8003176:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800317a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1d9      	bne.n	8003136 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	3314      	adds	r3, #20
 8003188:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800318a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800318c:	e853 3f00 	ldrex	r3, [r3]
 8003190:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003192:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003194:	f023 0301 	bic.w	r3, r3, #1
 8003198:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	3314      	adds	r3, #20
 80031a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80031a6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80031aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80031ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80031b2:	e841 2300 	strex	r3, r2, [r1]
 80031b6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80031b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1e1      	bne.n	8003182 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	3314      	adds	r3, #20
 80031c4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031c8:	e853 3f00 	ldrex	r3, [r3]
 80031cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80031ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	3314      	adds	r3, #20
 80031de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80031e2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80031e4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80031e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80031ea:	e841 2300 	strex	r3, r2, [r1]
 80031ee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80031f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1e3      	bne.n	80031be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2220      	movs	r2, #32
 80031fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	330c      	adds	r3, #12
 800320a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800320e:	e853 3f00 	ldrex	r3, [r3]
 8003212:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003214:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003216:	f023 0310 	bic.w	r3, r3, #16
 800321a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	330c      	adds	r3, #12
 8003224:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003228:	65ba      	str	r2, [r7, #88]	@ 0x58
 800322a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800322c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800322e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003230:	e841 2300 	strex	r3, r2, [r1]
 8003234:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003236:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1e3      	bne.n	8003204 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003240:	4618      	mov	r0, r3
 8003242:	f7fd ff54 	bl	80010ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2202      	movs	r2, #2
 800324a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003254:	b29b      	uxth	r3, r3
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	b29b      	uxth	r3, r3
 800325a:	4619      	mov	r1, r3
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 f8b7 	bl	80033d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003262:	e09b      	b.n	800339c <HAL_UART_IRQHandler+0x518>
 8003264:	080035d5 	.word	0x080035d5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003270:	b29b      	uxth	r3, r3
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800327c:	b29b      	uxth	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 808e 	beq.w	80033a0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003284:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 8089 	beq.w	80033a0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	330c      	adds	r3, #12
 8003294:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003298:	e853 3f00 	ldrex	r3, [r3]
 800329c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800329e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	330c      	adds	r3, #12
 80032ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80032b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80032b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80032b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032ba:	e841 2300 	strex	r3, r2, [r1]
 80032be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80032c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1e3      	bne.n	800328e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	3314      	adds	r3, #20
 80032cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d0:	e853 3f00 	ldrex	r3, [r3]
 80032d4:	623b      	str	r3, [r7, #32]
   return(result);
 80032d6:	6a3b      	ldr	r3, [r7, #32]
 80032d8:	f023 0301 	bic.w	r3, r3, #1
 80032dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	3314      	adds	r3, #20
 80032e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80032ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80032ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032f2:	e841 2300 	strex	r3, r2, [r1]
 80032f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80032f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1e3      	bne.n	80032c6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2220      	movs	r2, #32
 8003302:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	330c      	adds	r3, #12
 8003312:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	e853 3f00 	ldrex	r3, [r3]
 800331a:	60fb      	str	r3, [r7, #12]
   return(result);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f023 0310 	bic.w	r3, r3, #16
 8003322:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	330c      	adds	r3, #12
 800332c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003330:	61fa      	str	r2, [r7, #28]
 8003332:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003334:	69b9      	ldr	r1, [r7, #24]
 8003336:	69fa      	ldr	r2, [r7, #28]
 8003338:	e841 2300 	strex	r3, r2, [r1]
 800333c:	617b      	str	r3, [r7, #20]
   return(result);
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1e3      	bne.n	800330c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2202      	movs	r2, #2
 8003348:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800334a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800334e:	4619      	mov	r1, r3
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 f83d 	bl	80033d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003356:	e023      	b.n	80033a0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800335c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003360:	2b00      	cmp	r3, #0
 8003362:	d009      	beq.n	8003378 <HAL_UART_IRQHandler+0x4f4>
 8003364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003368:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f943 	bl	80035fc <UART_Transmit_IT>
    return;
 8003376:	e014      	b.n	80033a2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800337c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00e      	beq.n	80033a2 <HAL_UART_IRQHandler+0x51e>
 8003384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800338c:	2b00      	cmp	r3, #0
 800338e:	d008      	beq.n	80033a2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f983 	bl	800369c <UART_EndTransmit_IT>
    return;
 8003396:	e004      	b.n	80033a2 <HAL_UART_IRQHandler+0x51e>
    return;
 8003398:	bf00      	nop
 800339a:	e002      	b.n	80033a2 <HAL_UART_IRQHandler+0x51e>
      return;
 800339c:	bf00      	nop
 800339e:	e000      	b.n	80033a2 <HAL_UART_IRQHandler+0x51e>
      return;
 80033a0:	bf00      	nop
  }
}
 80033a2:	37e8      	adds	r7, #232	@ 0xe8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	460b      	mov	r3, r1
 80033da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	603b      	str	r3, [r7, #0]
 80033f4:	4613      	mov	r3, r2
 80033f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033f8:	e03b      	b.n	8003472 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033fa:	6a3b      	ldr	r3, [r7, #32]
 80033fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003400:	d037      	beq.n	8003472 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003402:	f7fd fd57 	bl	8000eb4 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	6a3a      	ldr	r2, [r7, #32]
 800340e:	429a      	cmp	r2, r3
 8003410:	d302      	bcc.n	8003418 <UART_WaitOnFlagUntilTimeout+0x30>
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e03a      	b.n	8003492 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f003 0304 	and.w	r3, r3, #4
 8003426:	2b00      	cmp	r3, #0
 8003428:	d023      	beq.n	8003472 <UART_WaitOnFlagUntilTimeout+0x8a>
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	2b80      	cmp	r3, #128	@ 0x80
 800342e:	d020      	beq.n	8003472 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2b40      	cmp	r3, #64	@ 0x40
 8003434:	d01d      	beq.n	8003472 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0308 	and.w	r3, r3, #8
 8003440:	2b08      	cmp	r3, #8
 8003442:	d116      	bne.n	8003472 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f000 f857 	bl	800350e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2208      	movs	r2, #8
 8003464:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e00f      	b.n	8003492 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	4013      	ands	r3, r2
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	429a      	cmp	r2, r3
 8003480:	bf0c      	ite	eq
 8003482:	2301      	moveq	r3, #1
 8003484:	2300      	movne	r3, #0
 8003486:	b2db      	uxtb	r3, r3
 8003488:	461a      	mov	r2, r3
 800348a:	79fb      	ldrb	r3, [r7, #7]
 800348c:	429a      	cmp	r2, r3
 800348e:	d0b4      	beq.n	80033fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800349a:	b480      	push	{r7}
 800349c:	b085      	sub	sp, #20
 800349e:	af00      	add	r7, sp, #0
 80034a0:	60f8      	str	r0, [r7, #12]
 80034a2:	60b9      	str	r1, [r7, #8]
 80034a4:	4613      	mov	r3, r2
 80034a6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	88fa      	ldrh	r2, [r7, #6]
 80034b2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	88fa      	ldrh	r2, [r7, #6]
 80034b8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2222      	movs	r2, #34	@ 0x22
 80034c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d007      	beq.n	80034e0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034de:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	695a      	ldr	r2, [r3, #20]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0201 	orr.w	r2, r2, #1
 80034ee:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68da      	ldr	r2, [r3, #12]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0220 	orr.w	r2, r2, #32
 80034fe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800350e:	b480      	push	{r7}
 8003510:	b095      	sub	sp, #84	@ 0x54
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	330c      	adds	r3, #12
 800351c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003520:	e853 3f00 	ldrex	r3, [r3]
 8003524:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003528:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800352c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	330c      	adds	r3, #12
 8003534:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003536:	643a      	str	r2, [r7, #64]	@ 0x40
 8003538:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800353c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800353e:	e841 2300 	strex	r3, r2, [r1]
 8003542:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1e5      	bne.n	8003516 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	3314      	adds	r3, #20
 8003550:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	e853 3f00 	ldrex	r3, [r3]
 8003558:	61fb      	str	r3, [r7, #28]
   return(result);
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	f023 0301 	bic.w	r3, r3, #1
 8003560:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	3314      	adds	r3, #20
 8003568:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800356a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800356c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003570:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003572:	e841 2300 	strex	r3, r2, [r1]
 8003576:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1e5      	bne.n	800354a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003582:	2b01      	cmp	r3, #1
 8003584:	d119      	bne.n	80035ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	330c      	adds	r3, #12
 800358c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	e853 3f00 	ldrex	r3, [r3]
 8003594:	60bb      	str	r3, [r7, #8]
   return(result);
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	f023 0310 	bic.w	r3, r3, #16
 800359c:	647b      	str	r3, [r7, #68]	@ 0x44
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	330c      	adds	r3, #12
 80035a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035a6:	61ba      	str	r2, [r7, #24]
 80035a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035aa:	6979      	ldr	r1, [r7, #20]
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	e841 2300 	strex	r3, r2, [r1]
 80035b2:	613b      	str	r3, [r7, #16]
   return(result);
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1e5      	bne.n	8003586 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2220      	movs	r2, #32
 80035be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80035c8:	bf00      	nop
 80035ca:	3754      	adds	r7, #84	@ 0x54
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f7ff fee4 	bl	80033bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035f4:	bf00      	nop
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b21      	cmp	r3, #33	@ 0x21
 800360e:	d13e      	bne.n	800368e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003618:	d114      	bne.n	8003644 <UART_Transmit_IT+0x48>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d110      	bne.n	8003644 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	461a      	mov	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003636:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	1c9a      	adds	r2, r3, #2
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	621a      	str	r2, [r3, #32]
 8003642:	e008      	b.n	8003656 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	1c59      	adds	r1, r3, #1
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	6211      	str	r1, [r2, #32]
 800364e:	781a      	ldrb	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800365a:	b29b      	uxth	r3, r3
 800365c:	3b01      	subs	r3, #1
 800365e:	b29b      	uxth	r3, r3
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	4619      	mov	r1, r3
 8003664:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10f      	bne.n	800368a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68da      	ldr	r2, [r3, #12]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003678:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68da      	ldr	r2, [r3, #12]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003688:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	e000      	b.n	8003690 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800368e:	2302      	movs	r3, #2
  }
}
 8003690:	4618      	mov	r0, r3
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68da      	ldr	r2, [r3, #12]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036b2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2220      	movs	r2, #32
 80036b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7ff fe73 	bl	80033a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08c      	sub	sp, #48	@ 0x30
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b22      	cmp	r3, #34	@ 0x22
 80036de:	f040 80ae 	bne.w	800383e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036ea:	d117      	bne.n	800371c <UART_Receive_IT+0x50>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d113      	bne.n	800371c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80036f4:	2300      	movs	r3, #0
 80036f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036fc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	b29b      	uxth	r3, r3
 8003706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800370a:	b29a      	uxth	r2, r3
 800370c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800370e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003714:	1c9a      	adds	r2, r3, #2
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	629a      	str	r2, [r3, #40]	@ 0x28
 800371a:	e026      	b.n	800376a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003720:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003722:	2300      	movs	r3, #0
 8003724:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800372e:	d007      	beq.n	8003740 <UART_Receive_IT+0x74>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10a      	bne.n	800374e <UART_Receive_IT+0x82>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d106      	bne.n	800374e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	b2da      	uxtb	r2, r3
 8003748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800374a:	701a      	strb	r2, [r3, #0]
 800374c:	e008      	b.n	8003760 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	b2db      	uxtb	r3, r3
 8003756:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800375a:	b2da      	uxtb	r2, r3
 800375c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800375e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003764:	1c5a      	adds	r2, r3, #1
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800376e:	b29b      	uxth	r3, r3
 8003770:	3b01      	subs	r3, #1
 8003772:	b29b      	uxth	r3, r3
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	4619      	mov	r1, r3
 8003778:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800377a:	2b00      	cmp	r3, #0
 800377c:	d15d      	bne.n	800383a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68da      	ldr	r2, [r3, #12]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0220 	bic.w	r2, r2, #32
 800378c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68da      	ldr	r2, [r3, #12]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800379c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	695a      	ldr	r2, [r3, #20]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0201 	bic.w	r2, r2, #1
 80037ac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2220      	movs	r2, #32
 80037b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d135      	bne.n	8003830 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	330c      	adds	r3, #12
 80037d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	e853 3f00 	ldrex	r3, [r3]
 80037d8:	613b      	str	r3, [r7, #16]
   return(result);
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	f023 0310 	bic.w	r3, r3, #16
 80037e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	330c      	adds	r3, #12
 80037e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037ea:	623a      	str	r2, [r7, #32]
 80037ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ee:	69f9      	ldr	r1, [r7, #28]
 80037f0:	6a3a      	ldr	r2, [r7, #32]
 80037f2:	e841 2300 	strex	r3, r2, [r1]
 80037f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1e5      	bne.n	80037ca <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0310 	and.w	r3, r3, #16
 8003808:	2b10      	cmp	r3, #16
 800380a:	d10a      	bne.n	8003822 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800380c:	2300      	movs	r3, #0
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003826:	4619      	mov	r1, r3
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7ff fdd1 	bl	80033d0 <HAL_UARTEx_RxEventCallback>
 800382e:	e002      	b.n	8003836 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f7fd fa69 	bl	8000d08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	e002      	b.n	8003840 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800383a:	2300      	movs	r3, #0
 800383c:	e000      	b.n	8003840 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800383e:	2302      	movs	r3, #2
  }
}
 8003840:	4618      	mov	r0, r3
 8003842:	3730      	adds	r7, #48	@ 0x30
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800384c:	b0c0      	sub	sp, #256	@ 0x100
 800384e:	af00      	add	r7, sp, #0
 8003850:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003864:	68d9      	ldr	r1, [r3, #12]
 8003866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	ea40 0301 	orr.w	r3, r0, r1
 8003870:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003876:	689a      	ldr	r2, [r3, #8]
 8003878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	431a      	orrs	r2, r3
 8003880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	431a      	orrs	r2, r3
 8003888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	4313      	orrs	r3, r2
 8003890:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80038a0:	f021 010c 	bic.w	r1, r1, #12
 80038a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80038ae:	430b      	orrs	r3, r1
 80038b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80038be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038c2:	6999      	ldr	r1, [r3, #24]
 80038c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	ea40 0301 	orr.w	r3, r0, r1
 80038ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	4b8f      	ldr	r3, [pc, #572]	@ (8003b14 <UART_SetConfig+0x2cc>)
 80038d8:	429a      	cmp	r2, r3
 80038da:	d005      	beq.n	80038e8 <UART_SetConfig+0xa0>
 80038dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	4b8d      	ldr	r3, [pc, #564]	@ (8003b18 <UART_SetConfig+0x2d0>)
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d104      	bne.n	80038f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038e8:	f7fe fa5c 	bl	8001da4 <HAL_RCC_GetPCLK2Freq>
 80038ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80038f0:	e003      	b.n	80038fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038f2:	f7fe fa43 	bl	8001d7c <HAL_RCC_GetPCLK1Freq>
 80038f6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038fe:	69db      	ldr	r3, [r3, #28]
 8003900:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003904:	f040 810c 	bne.w	8003b20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003908:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800390c:	2200      	movs	r2, #0
 800390e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003912:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003916:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800391a:	4622      	mov	r2, r4
 800391c:	462b      	mov	r3, r5
 800391e:	1891      	adds	r1, r2, r2
 8003920:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003922:	415b      	adcs	r3, r3
 8003924:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003926:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800392a:	4621      	mov	r1, r4
 800392c:	eb12 0801 	adds.w	r8, r2, r1
 8003930:	4629      	mov	r1, r5
 8003932:	eb43 0901 	adc.w	r9, r3, r1
 8003936:	f04f 0200 	mov.w	r2, #0
 800393a:	f04f 0300 	mov.w	r3, #0
 800393e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003942:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003946:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800394a:	4690      	mov	r8, r2
 800394c:	4699      	mov	r9, r3
 800394e:	4623      	mov	r3, r4
 8003950:	eb18 0303 	adds.w	r3, r8, r3
 8003954:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003958:	462b      	mov	r3, r5
 800395a:	eb49 0303 	adc.w	r3, r9, r3
 800395e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800396e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003972:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003976:	460b      	mov	r3, r1
 8003978:	18db      	adds	r3, r3, r3
 800397a:	653b      	str	r3, [r7, #80]	@ 0x50
 800397c:	4613      	mov	r3, r2
 800397e:	eb42 0303 	adc.w	r3, r2, r3
 8003982:	657b      	str	r3, [r7, #84]	@ 0x54
 8003984:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003988:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800398c:	f7fc fc78 	bl	8000280 <__aeabi_uldivmod>
 8003990:	4602      	mov	r2, r0
 8003992:	460b      	mov	r3, r1
 8003994:	4b61      	ldr	r3, [pc, #388]	@ (8003b1c <UART_SetConfig+0x2d4>)
 8003996:	fba3 2302 	umull	r2, r3, r3, r2
 800399a:	095b      	lsrs	r3, r3, #5
 800399c:	011c      	lsls	r4, r3, #4
 800399e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039a2:	2200      	movs	r2, #0
 80039a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039a8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80039ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80039b0:	4642      	mov	r2, r8
 80039b2:	464b      	mov	r3, r9
 80039b4:	1891      	adds	r1, r2, r2
 80039b6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80039b8:	415b      	adcs	r3, r3
 80039ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80039c0:	4641      	mov	r1, r8
 80039c2:	eb12 0a01 	adds.w	sl, r2, r1
 80039c6:	4649      	mov	r1, r9
 80039c8:	eb43 0b01 	adc.w	fp, r3, r1
 80039cc:	f04f 0200 	mov.w	r2, #0
 80039d0:	f04f 0300 	mov.w	r3, #0
 80039d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039e0:	4692      	mov	sl, r2
 80039e2:	469b      	mov	fp, r3
 80039e4:	4643      	mov	r3, r8
 80039e6:	eb1a 0303 	adds.w	r3, sl, r3
 80039ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039ee:	464b      	mov	r3, r9
 80039f0:	eb4b 0303 	adc.w	r3, fp, r3
 80039f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80039f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a04:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003a08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	18db      	adds	r3, r3, r3
 8003a10:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a12:	4613      	mov	r3, r2
 8003a14:	eb42 0303 	adc.w	r3, r2, r3
 8003a18:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003a1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003a22:	f7fc fc2d 	bl	8000280 <__aeabi_uldivmod>
 8003a26:	4602      	mov	r2, r0
 8003a28:	460b      	mov	r3, r1
 8003a2a:	4611      	mov	r1, r2
 8003a2c:	4b3b      	ldr	r3, [pc, #236]	@ (8003b1c <UART_SetConfig+0x2d4>)
 8003a2e:	fba3 2301 	umull	r2, r3, r3, r1
 8003a32:	095b      	lsrs	r3, r3, #5
 8003a34:	2264      	movs	r2, #100	@ 0x64
 8003a36:	fb02 f303 	mul.w	r3, r2, r3
 8003a3a:	1acb      	subs	r3, r1, r3
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003a42:	4b36      	ldr	r3, [pc, #216]	@ (8003b1c <UART_SetConfig+0x2d4>)
 8003a44:	fba3 2302 	umull	r2, r3, r3, r2
 8003a48:	095b      	lsrs	r3, r3, #5
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003a50:	441c      	add	r4, r3
 8003a52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a56:	2200      	movs	r2, #0
 8003a58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a5c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003a60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003a64:	4642      	mov	r2, r8
 8003a66:	464b      	mov	r3, r9
 8003a68:	1891      	adds	r1, r2, r2
 8003a6a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003a6c:	415b      	adcs	r3, r3
 8003a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003a74:	4641      	mov	r1, r8
 8003a76:	1851      	adds	r1, r2, r1
 8003a78:	6339      	str	r1, [r7, #48]	@ 0x30
 8003a7a:	4649      	mov	r1, r9
 8003a7c:	414b      	adcs	r3, r1
 8003a7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	f04f 0300 	mov.w	r3, #0
 8003a88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003a8c:	4659      	mov	r1, fp
 8003a8e:	00cb      	lsls	r3, r1, #3
 8003a90:	4651      	mov	r1, sl
 8003a92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a96:	4651      	mov	r1, sl
 8003a98:	00ca      	lsls	r2, r1, #3
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	4642      	mov	r2, r8
 8003aa2:	189b      	adds	r3, r3, r2
 8003aa4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003aa8:	464b      	mov	r3, r9
 8003aaa:	460a      	mov	r2, r1
 8003aac:	eb42 0303 	adc.w	r3, r2, r3
 8003ab0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ac0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003ac4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ac8:	460b      	mov	r3, r1
 8003aca:	18db      	adds	r3, r3, r3
 8003acc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ace:	4613      	mov	r3, r2
 8003ad0:	eb42 0303 	adc.w	r3, r2, r3
 8003ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ad6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ada:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003ade:	f7fc fbcf 	bl	8000280 <__aeabi_uldivmod>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8003b1c <UART_SetConfig+0x2d4>)
 8003ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8003aec:	095b      	lsrs	r3, r3, #5
 8003aee:	2164      	movs	r1, #100	@ 0x64
 8003af0:	fb01 f303 	mul.w	r3, r1, r3
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	3332      	adds	r3, #50	@ 0x32
 8003afa:	4a08      	ldr	r2, [pc, #32]	@ (8003b1c <UART_SetConfig+0x2d4>)
 8003afc:	fba2 2303 	umull	r2, r3, r2, r3
 8003b00:	095b      	lsrs	r3, r3, #5
 8003b02:	f003 0207 	and.w	r2, r3, #7
 8003b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4422      	add	r2, r4
 8003b0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b10:	e106      	b.n	8003d20 <UART_SetConfig+0x4d8>
 8003b12:	bf00      	nop
 8003b14:	40011000 	.word	0x40011000
 8003b18:	40011400 	.word	0x40011400
 8003b1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b24:	2200      	movs	r2, #0
 8003b26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003b2a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003b2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003b32:	4642      	mov	r2, r8
 8003b34:	464b      	mov	r3, r9
 8003b36:	1891      	adds	r1, r2, r2
 8003b38:	6239      	str	r1, [r7, #32]
 8003b3a:	415b      	adcs	r3, r3
 8003b3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b42:	4641      	mov	r1, r8
 8003b44:	1854      	adds	r4, r2, r1
 8003b46:	4649      	mov	r1, r9
 8003b48:	eb43 0501 	adc.w	r5, r3, r1
 8003b4c:	f04f 0200 	mov.w	r2, #0
 8003b50:	f04f 0300 	mov.w	r3, #0
 8003b54:	00eb      	lsls	r3, r5, #3
 8003b56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b5a:	00e2      	lsls	r2, r4, #3
 8003b5c:	4614      	mov	r4, r2
 8003b5e:	461d      	mov	r5, r3
 8003b60:	4643      	mov	r3, r8
 8003b62:	18e3      	adds	r3, r4, r3
 8003b64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b68:	464b      	mov	r3, r9
 8003b6a:	eb45 0303 	adc.w	r3, r5, r3
 8003b6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b7e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b82:	f04f 0200 	mov.w	r2, #0
 8003b86:	f04f 0300 	mov.w	r3, #0
 8003b8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003b8e:	4629      	mov	r1, r5
 8003b90:	008b      	lsls	r3, r1, #2
 8003b92:	4621      	mov	r1, r4
 8003b94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b98:	4621      	mov	r1, r4
 8003b9a:	008a      	lsls	r2, r1, #2
 8003b9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003ba0:	f7fc fb6e 	bl	8000280 <__aeabi_uldivmod>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	4b60      	ldr	r3, [pc, #384]	@ (8003d2c <UART_SetConfig+0x4e4>)
 8003baa:	fba3 2302 	umull	r2, r3, r3, r2
 8003bae:	095b      	lsrs	r3, r3, #5
 8003bb0:	011c      	lsls	r4, r3, #4
 8003bb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003bbc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003bc0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003bc4:	4642      	mov	r2, r8
 8003bc6:	464b      	mov	r3, r9
 8003bc8:	1891      	adds	r1, r2, r2
 8003bca:	61b9      	str	r1, [r7, #24]
 8003bcc:	415b      	adcs	r3, r3
 8003bce:	61fb      	str	r3, [r7, #28]
 8003bd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bd4:	4641      	mov	r1, r8
 8003bd6:	1851      	adds	r1, r2, r1
 8003bd8:	6139      	str	r1, [r7, #16]
 8003bda:	4649      	mov	r1, r9
 8003bdc:	414b      	adcs	r3, r1
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	f04f 0300 	mov.w	r3, #0
 8003be8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bec:	4659      	mov	r1, fp
 8003bee:	00cb      	lsls	r3, r1, #3
 8003bf0:	4651      	mov	r1, sl
 8003bf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bf6:	4651      	mov	r1, sl
 8003bf8:	00ca      	lsls	r2, r1, #3
 8003bfa:	4610      	mov	r0, r2
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4603      	mov	r3, r0
 8003c00:	4642      	mov	r2, r8
 8003c02:	189b      	adds	r3, r3, r2
 8003c04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003c08:	464b      	mov	r3, r9
 8003c0a:	460a      	mov	r2, r1
 8003c0c:	eb42 0303 	adc.w	r3, r2, r3
 8003c10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003c1e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003c20:	f04f 0200 	mov.w	r2, #0
 8003c24:	f04f 0300 	mov.w	r3, #0
 8003c28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003c2c:	4649      	mov	r1, r9
 8003c2e:	008b      	lsls	r3, r1, #2
 8003c30:	4641      	mov	r1, r8
 8003c32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c36:	4641      	mov	r1, r8
 8003c38:	008a      	lsls	r2, r1, #2
 8003c3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003c3e:	f7fc fb1f 	bl	8000280 <__aeabi_uldivmod>
 8003c42:	4602      	mov	r2, r0
 8003c44:	460b      	mov	r3, r1
 8003c46:	4611      	mov	r1, r2
 8003c48:	4b38      	ldr	r3, [pc, #224]	@ (8003d2c <UART_SetConfig+0x4e4>)
 8003c4a:	fba3 2301 	umull	r2, r3, r3, r1
 8003c4e:	095b      	lsrs	r3, r3, #5
 8003c50:	2264      	movs	r2, #100	@ 0x64
 8003c52:	fb02 f303 	mul.w	r3, r2, r3
 8003c56:	1acb      	subs	r3, r1, r3
 8003c58:	011b      	lsls	r3, r3, #4
 8003c5a:	3332      	adds	r3, #50	@ 0x32
 8003c5c:	4a33      	ldr	r2, [pc, #204]	@ (8003d2c <UART_SetConfig+0x4e4>)
 8003c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c62:	095b      	lsrs	r3, r3, #5
 8003c64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c68:	441c      	add	r4, r3
 8003c6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c6e:	2200      	movs	r2, #0
 8003c70:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c72:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c74:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003c78:	4642      	mov	r2, r8
 8003c7a:	464b      	mov	r3, r9
 8003c7c:	1891      	adds	r1, r2, r2
 8003c7e:	60b9      	str	r1, [r7, #8]
 8003c80:	415b      	adcs	r3, r3
 8003c82:	60fb      	str	r3, [r7, #12]
 8003c84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c88:	4641      	mov	r1, r8
 8003c8a:	1851      	adds	r1, r2, r1
 8003c8c:	6039      	str	r1, [r7, #0]
 8003c8e:	4649      	mov	r1, r9
 8003c90:	414b      	adcs	r3, r1
 8003c92:	607b      	str	r3, [r7, #4]
 8003c94:	f04f 0200 	mov.w	r2, #0
 8003c98:	f04f 0300 	mov.w	r3, #0
 8003c9c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ca0:	4659      	mov	r1, fp
 8003ca2:	00cb      	lsls	r3, r1, #3
 8003ca4:	4651      	mov	r1, sl
 8003ca6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003caa:	4651      	mov	r1, sl
 8003cac:	00ca      	lsls	r2, r1, #3
 8003cae:	4610      	mov	r0, r2
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	4642      	mov	r2, r8
 8003cb6:	189b      	adds	r3, r3, r2
 8003cb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003cba:	464b      	mov	r3, r9
 8003cbc:	460a      	mov	r2, r1
 8003cbe:	eb42 0303 	adc.w	r3, r2, r3
 8003cc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	663b      	str	r3, [r7, #96]	@ 0x60
 8003cce:	667a      	str	r2, [r7, #100]	@ 0x64
 8003cd0:	f04f 0200 	mov.w	r2, #0
 8003cd4:	f04f 0300 	mov.w	r3, #0
 8003cd8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003cdc:	4649      	mov	r1, r9
 8003cde:	008b      	lsls	r3, r1, #2
 8003ce0:	4641      	mov	r1, r8
 8003ce2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ce6:	4641      	mov	r1, r8
 8003ce8:	008a      	lsls	r2, r1, #2
 8003cea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003cee:	f7fc fac7 	bl	8000280 <__aeabi_uldivmod>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8003d2c <UART_SetConfig+0x4e4>)
 8003cf8:	fba3 1302 	umull	r1, r3, r3, r2
 8003cfc:	095b      	lsrs	r3, r3, #5
 8003cfe:	2164      	movs	r1, #100	@ 0x64
 8003d00:	fb01 f303 	mul.w	r3, r1, r3
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	011b      	lsls	r3, r3, #4
 8003d08:	3332      	adds	r3, #50	@ 0x32
 8003d0a:	4a08      	ldr	r2, [pc, #32]	@ (8003d2c <UART_SetConfig+0x4e4>)
 8003d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d10:	095b      	lsrs	r3, r3, #5
 8003d12:	f003 020f 	and.w	r2, r3, #15
 8003d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4422      	add	r2, r4
 8003d1e:	609a      	str	r2, [r3, #8]
}
 8003d20:	bf00      	nop
 8003d22:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003d26:	46bd      	mov	sp, r7
 8003d28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d2c:	51eb851f 	.word	0x51eb851f

08003d30 <std>:
 8003d30:	2300      	movs	r3, #0
 8003d32:	b510      	push	{r4, lr}
 8003d34:	4604      	mov	r4, r0
 8003d36:	e9c0 3300 	strd	r3, r3, [r0]
 8003d3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d3e:	6083      	str	r3, [r0, #8]
 8003d40:	8181      	strh	r1, [r0, #12]
 8003d42:	6643      	str	r3, [r0, #100]	@ 0x64
 8003d44:	81c2      	strh	r2, [r0, #14]
 8003d46:	6183      	str	r3, [r0, #24]
 8003d48:	4619      	mov	r1, r3
 8003d4a:	2208      	movs	r2, #8
 8003d4c:	305c      	adds	r0, #92	@ 0x5c
 8003d4e:	f000 f906 	bl	8003f5e <memset>
 8003d52:	4b0d      	ldr	r3, [pc, #52]	@ (8003d88 <std+0x58>)
 8003d54:	6263      	str	r3, [r4, #36]	@ 0x24
 8003d56:	4b0d      	ldr	r3, [pc, #52]	@ (8003d8c <std+0x5c>)
 8003d58:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d90 <std+0x60>)
 8003d5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d94 <std+0x64>)
 8003d60:	6323      	str	r3, [r4, #48]	@ 0x30
 8003d62:	4b0d      	ldr	r3, [pc, #52]	@ (8003d98 <std+0x68>)
 8003d64:	6224      	str	r4, [r4, #32]
 8003d66:	429c      	cmp	r4, r3
 8003d68:	d006      	beq.n	8003d78 <std+0x48>
 8003d6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003d6e:	4294      	cmp	r4, r2
 8003d70:	d002      	beq.n	8003d78 <std+0x48>
 8003d72:	33d0      	adds	r3, #208	@ 0xd0
 8003d74:	429c      	cmp	r4, r3
 8003d76:	d105      	bne.n	8003d84 <std+0x54>
 8003d78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d80:	f000 b966 	b.w	8004050 <__retarget_lock_init_recursive>
 8003d84:	bd10      	pop	{r4, pc}
 8003d86:	bf00      	nop
 8003d88:	08003ed9 	.word	0x08003ed9
 8003d8c:	08003efb 	.word	0x08003efb
 8003d90:	08003f33 	.word	0x08003f33
 8003d94:	08003f57 	.word	0x08003f57
 8003d98:	200001d8 	.word	0x200001d8

08003d9c <stdio_exit_handler>:
 8003d9c:	4a02      	ldr	r2, [pc, #8]	@ (8003da8 <stdio_exit_handler+0xc>)
 8003d9e:	4903      	ldr	r1, [pc, #12]	@ (8003dac <stdio_exit_handler+0x10>)
 8003da0:	4803      	ldr	r0, [pc, #12]	@ (8003db0 <stdio_exit_handler+0x14>)
 8003da2:	f000 b869 	b.w	8003e78 <_fwalk_sglue>
 8003da6:	bf00      	nop
 8003da8:	2000000c 	.word	0x2000000c
 8003dac:	080048f1 	.word	0x080048f1
 8003db0:	2000001c 	.word	0x2000001c

08003db4 <cleanup_stdio>:
 8003db4:	6841      	ldr	r1, [r0, #4]
 8003db6:	4b0c      	ldr	r3, [pc, #48]	@ (8003de8 <cleanup_stdio+0x34>)
 8003db8:	4299      	cmp	r1, r3
 8003dba:	b510      	push	{r4, lr}
 8003dbc:	4604      	mov	r4, r0
 8003dbe:	d001      	beq.n	8003dc4 <cleanup_stdio+0x10>
 8003dc0:	f000 fd96 	bl	80048f0 <_fflush_r>
 8003dc4:	68a1      	ldr	r1, [r4, #8]
 8003dc6:	4b09      	ldr	r3, [pc, #36]	@ (8003dec <cleanup_stdio+0x38>)
 8003dc8:	4299      	cmp	r1, r3
 8003dca:	d002      	beq.n	8003dd2 <cleanup_stdio+0x1e>
 8003dcc:	4620      	mov	r0, r4
 8003dce:	f000 fd8f 	bl	80048f0 <_fflush_r>
 8003dd2:	68e1      	ldr	r1, [r4, #12]
 8003dd4:	4b06      	ldr	r3, [pc, #24]	@ (8003df0 <cleanup_stdio+0x3c>)
 8003dd6:	4299      	cmp	r1, r3
 8003dd8:	d004      	beq.n	8003de4 <cleanup_stdio+0x30>
 8003dda:	4620      	mov	r0, r4
 8003ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003de0:	f000 bd86 	b.w	80048f0 <_fflush_r>
 8003de4:	bd10      	pop	{r4, pc}
 8003de6:	bf00      	nop
 8003de8:	200001d8 	.word	0x200001d8
 8003dec:	20000240 	.word	0x20000240
 8003df0:	200002a8 	.word	0x200002a8

08003df4 <global_stdio_init.part.0>:
 8003df4:	b510      	push	{r4, lr}
 8003df6:	4b0b      	ldr	r3, [pc, #44]	@ (8003e24 <global_stdio_init.part.0+0x30>)
 8003df8:	4c0b      	ldr	r4, [pc, #44]	@ (8003e28 <global_stdio_init.part.0+0x34>)
 8003dfa:	4a0c      	ldr	r2, [pc, #48]	@ (8003e2c <global_stdio_init.part.0+0x38>)
 8003dfc:	601a      	str	r2, [r3, #0]
 8003dfe:	4620      	mov	r0, r4
 8003e00:	2200      	movs	r2, #0
 8003e02:	2104      	movs	r1, #4
 8003e04:	f7ff ff94 	bl	8003d30 <std>
 8003e08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	2109      	movs	r1, #9
 8003e10:	f7ff ff8e 	bl	8003d30 <std>
 8003e14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003e18:	2202      	movs	r2, #2
 8003e1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e1e:	2112      	movs	r1, #18
 8003e20:	f7ff bf86 	b.w	8003d30 <std>
 8003e24:	20000310 	.word	0x20000310
 8003e28:	200001d8 	.word	0x200001d8
 8003e2c:	08003d9d 	.word	0x08003d9d

08003e30 <__sfp_lock_acquire>:
 8003e30:	4801      	ldr	r0, [pc, #4]	@ (8003e38 <__sfp_lock_acquire+0x8>)
 8003e32:	f000 b90e 	b.w	8004052 <__retarget_lock_acquire_recursive>
 8003e36:	bf00      	nop
 8003e38:	20000319 	.word	0x20000319

08003e3c <__sfp_lock_release>:
 8003e3c:	4801      	ldr	r0, [pc, #4]	@ (8003e44 <__sfp_lock_release+0x8>)
 8003e3e:	f000 b909 	b.w	8004054 <__retarget_lock_release_recursive>
 8003e42:	bf00      	nop
 8003e44:	20000319 	.word	0x20000319

08003e48 <__sinit>:
 8003e48:	b510      	push	{r4, lr}
 8003e4a:	4604      	mov	r4, r0
 8003e4c:	f7ff fff0 	bl	8003e30 <__sfp_lock_acquire>
 8003e50:	6a23      	ldr	r3, [r4, #32]
 8003e52:	b11b      	cbz	r3, 8003e5c <__sinit+0x14>
 8003e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e58:	f7ff bff0 	b.w	8003e3c <__sfp_lock_release>
 8003e5c:	4b04      	ldr	r3, [pc, #16]	@ (8003e70 <__sinit+0x28>)
 8003e5e:	6223      	str	r3, [r4, #32]
 8003e60:	4b04      	ldr	r3, [pc, #16]	@ (8003e74 <__sinit+0x2c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1f5      	bne.n	8003e54 <__sinit+0xc>
 8003e68:	f7ff ffc4 	bl	8003df4 <global_stdio_init.part.0>
 8003e6c:	e7f2      	b.n	8003e54 <__sinit+0xc>
 8003e6e:	bf00      	nop
 8003e70:	08003db5 	.word	0x08003db5
 8003e74:	20000310 	.word	0x20000310

08003e78 <_fwalk_sglue>:
 8003e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e7c:	4607      	mov	r7, r0
 8003e7e:	4688      	mov	r8, r1
 8003e80:	4614      	mov	r4, r2
 8003e82:	2600      	movs	r6, #0
 8003e84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e88:	f1b9 0901 	subs.w	r9, r9, #1
 8003e8c:	d505      	bpl.n	8003e9a <_fwalk_sglue+0x22>
 8003e8e:	6824      	ldr	r4, [r4, #0]
 8003e90:	2c00      	cmp	r4, #0
 8003e92:	d1f7      	bne.n	8003e84 <_fwalk_sglue+0xc>
 8003e94:	4630      	mov	r0, r6
 8003e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e9a:	89ab      	ldrh	r3, [r5, #12]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d907      	bls.n	8003eb0 <_fwalk_sglue+0x38>
 8003ea0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	d003      	beq.n	8003eb0 <_fwalk_sglue+0x38>
 8003ea8:	4629      	mov	r1, r5
 8003eaa:	4638      	mov	r0, r7
 8003eac:	47c0      	blx	r8
 8003eae:	4306      	orrs	r6, r0
 8003eb0:	3568      	adds	r5, #104	@ 0x68
 8003eb2:	e7e9      	b.n	8003e88 <_fwalk_sglue+0x10>

08003eb4 <iprintf>:
 8003eb4:	b40f      	push	{r0, r1, r2, r3}
 8003eb6:	b507      	push	{r0, r1, r2, lr}
 8003eb8:	4906      	ldr	r1, [pc, #24]	@ (8003ed4 <iprintf+0x20>)
 8003eba:	ab04      	add	r3, sp, #16
 8003ebc:	6808      	ldr	r0, [r1, #0]
 8003ebe:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ec2:	6881      	ldr	r1, [r0, #8]
 8003ec4:	9301      	str	r3, [sp, #4]
 8003ec6:	f000 f9e9 	bl	800429c <_vfiprintf_r>
 8003eca:	b003      	add	sp, #12
 8003ecc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ed0:	b004      	add	sp, #16
 8003ed2:	4770      	bx	lr
 8003ed4:	20000018 	.word	0x20000018

08003ed8 <__sread>:
 8003ed8:	b510      	push	{r4, lr}
 8003eda:	460c      	mov	r4, r1
 8003edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ee0:	f000 f868 	bl	8003fb4 <_read_r>
 8003ee4:	2800      	cmp	r0, #0
 8003ee6:	bfab      	itete	ge
 8003ee8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003eea:	89a3      	ldrhlt	r3, [r4, #12]
 8003eec:	181b      	addge	r3, r3, r0
 8003eee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003ef2:	bfac      	ite	ge
 8003ef4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003ef6:	81a3      	strhlt	r3, [r4, #12]
 8003ef8:	bd10      	pop	{r4, pc}

08003efa <__swrite>:
 8003efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003efe:	461f      	mov	r7, r3
 8003f00:	898b      	ldrh	r3, [r1, #12]
 8003f02:	05db      	lsls	r3, r3, #23
 8003f04:	4605      	mov	r5, r0
 8003f06:	460c      	mov	r4, r1
 8003f08:	4616      	mov	r6, r2
 8003f0a:	d505      	bpl.n	8003f18 <__swrite+0x1e>
 8003f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f10:	2302      	movs	r3, #2
 8003f12:	2200      	movs	r2, #0
 8003f14:	f000 f83c 	bl	8003f90 <_lseek_r>
 8003f18:	89a3      	ldrh	r3, [r4, #12]
 8003f1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f22:	81a3      	strh	r3, [r4, #12]
 8003f24:	4632      	mov	r2, r6
 8003f26:	463b      	mov	r3, r7
 8003f28:	4628      	mov	r0, r5
 8003f2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f2e:	f000 b853 	b.w	8003fd8 <_write_r>

08003f32 <__sseek>:
 8003f32:	b510      	push	{r4, lr}
 8003f34:	460c      	mov	r4, r1
 8003f36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f3a:	f000 f829 	bl	8003f90 <_lseek_r>
 8003f3e:	1c43      	adds	r3, r0, #1
 8003f40:	89a3      	ldrh	r3, [r4, #12]
 8003f42:	bf15      	itete	ne
 8003f44:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003f46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003f4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003f4e:	81a3      	strheq	r3, [r4, #12]
 8003f50:	bf18      	it	ne
 8003f52:	81a3      	strhne	r3, [r4, #12]
 8003f54:	bd10      	pop	{r4, pc}

08003f56 <__sclose>:
 8003f56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f5a:	f000 b809 	b.w	8003f70 <_close_r>

08003f5e <memset>:
 8003f5e:	4402      	add	r2, r0
 8003f60:	4603      	mov	r3, r0
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d100      	bne.n	8003f68 <memset+0xa>
 8003f66:	4770      	bx	lr
 8003f68:	f803 1b01 	strb.w	r1, [r3], #1
 8003f6c:	e7f9      	b.n	8003f62 <memset+0x4>
	...

08003f70 <_close_r>:
 8003f70:	b538      	push	{r3, r4, r5, lr}
 8003f72:	4d06      	ldr	r5, [pc, #24]	@ (8003f8c <_close_r+0x1c>)
 8003f74:	2300      	movs	r3, #0
 8003f76:	4604      	mov	r4, r0
 8003f78:	4608      	mov	r0, r1
 8003f7a:	602b      	str	r3, [r5, #0]
 8003f7c:	f7fc fe31 	bl	8000be2 <_close>
 8003f80:	1c43      	adds	r3, r0, #1
 8003f82:	d102      	bne.n	8003f8a <_close_r+0x1a>
 8003f84:	682b      	ldr	r3, [r5, #0]
 8003f86:	b103      	cbz	r3, 8003f8a <_close_r+0x1a>
 8003f88:	6023      	str	r3, [r4, #0]
 8003f8a:	bd38      	pop	{r3, r4, r5, pc}
 8003f8c:	20000314 	.word	0x20000314

08003f90 <_lseek_r>:
 8003f90:	b538      	push	{r3, r4, r5, lr}
 8003f92:	4d07      	ldr	r5, [pc, #28]	@ (8003fb0 <_lseek_r+0x20>)
 8003f94:	4604      	mov	r4, r0
 8003f96:	4608      	mov	r0, r1
 8003f98:	4611      	mov	r1, r2
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	602a      	str	r2, [r5, #0]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	f7fc fe46 	bl	8000c30 <_lseek>
 8003fa4:	1c43      	adds	r3, r0, #1
 8003fa6:	d102      	bne.n	8003fae <_lseek_r+0x1e>
 8003fa8:	682b      	ldr	r3, [r5, #0]
 8003faa:	b103      	cbz	r3, 8003fae <_lseek_r+0x1e>
 8003fac:	6023      	str	r3, [r4, #0]
 8003fae:	bd38      	pop	{r3, r4, r5, pc}
 8003fb0:	20000314 	.word	0x20000314

08003fb4 <_read_r>:
 8003fb4:	b538      	push	{r3, r4, r5, lr}
 8003fb6:	4d07      	ldr	r5, [pc, #28]	@ (8003fd4 <_read_r+0x20>)
 8003fb8:	4604      	mov	r4, r0
 8003fba:	4608      	mov	r0, r1
 8003fbc:	4611      	mov	r1, r2
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	602a      	str	r2, [r5, #0]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	f7fc fdf0 	bl	8000ba8 <_read>
 8003fc8:	1c43      	adds	r3, r0, #1
 8003fca:	d102      	bne.n	8003fd2 <_read_r+0x1e>
 8003fcc:	682b      	ldr	r3, [r5, #0]
 8003fce:	b103      	cbz	r3, 8003fd2 <_read_r+0x1e>
 8003fd0:	6023      	str	r3, [r4, #0]
 8003fd2:	bd38      	pop	{r3, r4, r5, pc}
 8003fd4:	20000314 	.word	0x20000314

08003fd8 <_write_r>:
 8003fd8:	b538      	push	{r3, r4, r5, lr}
 8003fda:	4d07      	ldr	r5, [pc, #28]	@ (8003ff8 <_write_r+0x20>)
 8003fdc:	4604      	mov	r4, r0
 8003fde:	4608      	mov	r0, r1
 8003fe0:	4611      	mov	r1, r2
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	602a      	str	r2, [r5, #0]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	f7fc fe78 	bl	8000cdc <_write>
 8003fec:	1c43      	adds	r3, r0, #1
 8003fee:	d102      	bne.n	8003ff6 <_write_r+0x1e>
 8003ff0:	682b      	ldr	r3, [r5, #0]
 8003ff2:	b103      	cbz	r3, 8003ff6 <_write_r+0x1e>
 8003ff4:	6023      	str	r3, [r4, #0]
 8003ff6:	bd38      	pop	{r3, r4, r5, pc}
 8003ff8:	20000314 	.word	0x20000314

08003ffc <__errno>:
 8003ffc:	4b01      	ldr	r3, [pc, #4]	@ (8004004 <__errno+0x8>)
 8003ffe:	6818      	ldr	r0, [r3, #0]
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	20000018 	.word	0x20000018

08004008 <__libc_init_array>:
 8004008:	b570      	push	{r4, r5, r6, lr}
 800400a:	4d0d      	ldr	r5, [pc, #52]	@ (8004040 <__libc_init_array+0x38>)
 800400c:	4c0d      	ldr	r4, [pc, #52]	@ (8004044 <__libc_init_array+0x3c>)
 800400e:	1b64      	subs	r4, r4, r5
 8004010:	10a4      	asrs	r4, r4, #2
 8004012:	2600      	movs	r6, #0
 8004014:	42a6      	cmp	r6, r4
 8004016:	d109      	bne.n	800402c <__libc_init_array+0x24>
 8004018:	4d0b      	ldr	r5, [pc, #44]	@ (8004048 <__libc_init_array+0x40>)
 800401a:	4c0c      	ldr	r4, [pc, #48]	@ (800404c <__libc_init_array+0x44>)
 800401c:	f000 fdb8 	bl	8004b90 <_init>
 8004020:	1b64      	subs	r4, r4, r5
 8004022:	10a4      	asrs	r4, r4, #2
 8004024:	2600      	movs	r6, #0
 8004026:	42a6      	cmp	r6, r4
 8004028:	d105      	bne.n	8004036 <__libc_init_array+0x2e>
 800402a:	bd70      	pop	{r4, r5, r6, pc}
 800402c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004030:	4798      	blx	r3
 8004032:	3601      	adds	r6, #1
 8004034:	e7ee      	b.n	8004014 <__libc_init_array+0xc>
 8004036:	f855 3b04 	ldr.w	r3, [r5], #4
 800403a:	4798      	blx	r3
 800403c:	3601      	adds	r6, #1
 800403e:	e7f2      	b.n	8004026 <__libc_init_array+0x1e>
 8004040:	08004c08 	.word	0x08004c08
 8004044:	08004c08 	.word	0x08004c08
 8004048:	08004c08 	.word	0x08004c08
 800404c:	08004c0c 	.word	0x08004c0c

08004050 <__retarget_lock_init_recursive>:
 8004050:	4770      	bx	lr

08004052 <__retarget_lock_acquire_recursive>:
 8004052:	4770      	bx	lr

08004054 <__retarget_lock_release_recursive>:
 8004054:	4770      	bx	lr
	...

08004058 <_free_r>:
 8004058:	b538      	push	{r3, r4, r5, lr}
 800405a:	4605      	mov	r5, r0
 800405c:	2900      	cmp	r1, #0
 800405e:	d041      	beq.n	80040e4 <_free_r+0x8c>
 8004060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004064:	1f0c      	subs	r4, r1, #4
 8004066:	2b00      	cmp	r3, #0
 8004068:	bfb8      	it	lt
 800406a:	18e4      	addlt	r4, r4, r3
 800406c:	f000 f8e0 	bl	8004230 <__malloc_lock>
 8004070:	4a1d      	ldr	r2, [pc, #116]	@ (80040e8 <_free_r+0x90>)
 8004072:	6813      	ldr	r3, [r2, #0]
 8004074:	b933      	cbnz	r3, 8004084 <_free_r+0x2c>
 8004076:	6063      	str	r3, [r4, #4]
 8004078:	6014      	str	r4, [r2, #0]
 800407a:	4628      	mov	r0, r5
 800407c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004080:	f000 b8dc 	b.w	800423c <__malloc_unlock>
 8004084:	42a3      	cmp	r3, r4
 8004086:	d908      	bls.n	800409a <_free_r+0x42>
 8004088:	6820      	ldr	r0, [r4, #0]
 800408a:	1821      	adds	r1, r4, r0
 800408c:	428b      	cmp	r3, r1
 800408e:	bf01      	itttt	eq
 8004090:	6819      	ldreq	r1, [r3, #0]
 8004092:	685b      	ldreq	r3, [r3, #4]
 8004094:	1809      	addeq	r1, r1, r0
 8004096:	6021      	streq	r1, [r4, #0]
 8004098:	e7ed      	b.n	8004076 <_free_r+0x1e>
 800409a:	461a      	mov	r2, r3
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	b10b      	cbz	r3, 80040a4 <_free_r+0x4c>
 80040a0:	42a3      	cmp	r3, r4
 80040a2:	d9fa      	bls.n	800409a <_free_r+0x42>
 80040a4:	6811      	ldr	r1, [r2, #0]
 80040a6:	1850      	adds	r0, r2, r1
 80040a8:	42a0      	cmp	r0, r4
 80040aa:	d10b      	bne.n	80040c4 <_free_r+0x6c>
 80040ac:	6820      	ldr	r0, [r4, #0]
 80040ae:	4401      	add	r1, r0
 80040b0:	1850      	adds	r0, r2, r1
 80040b2:	4283      	cmp	r3, r0
 80040b4:	6011      	str	r1, [r2, #0]
 80040b6:	d1e0      	bne.n	800407a <_free_r+0x22>
 80040b8:	6818      	ldr	r0, [r3, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	6053      	str	r3, [r2, #4]
 80040be:	4408      	add	r0, r1
 80040c0:	6010      	str	r0, [r2, #0]
 80040c2:	e7da      	b.n	800407a <_free_r+0x22>
 80040c4:	d902      	bls.n	80040cc <_free_r+0x74>
 80040c6:	230c      	movs	r3, #12
 80040c8:	602b      	str	r3, [r5, #0]
 80040ca:	e7d6      	b.n	800407a <_free_r+0x22>
 80040cc:	6820      	ldr	r0, [r4, #0]
 80040ce:	1821      	adds	r1, r4, r0
 80040d0:	428b      	cmp	r3, r1
 80040d2:	bf04      	itt	eq
 80040d4:	6819      	ldreq	r1, [r3, #0]
 80040d6:	685b      	ldreq	r3, [r3, #4]
 80040d8:	6063      	str	r3, [r4, #4]
 80040da:	bf04      	itt	eq
 80040dc:	1809      	addeq	r1, r1, r0
 80040de:	6021      	streq	r1, [r4, #0]
 80040e0:	6054      	str	r4, [r2, #4]
 80040e2:	e7ca      	b.n	800407a <_free_r+0x22>
 80040e4:	bd38      	pop	{r3, r4, r5, pc}
 80040e6:	bf00      	nop
 80040e8:	20000320 	.word	0x20000320

080040ec <sbrk_aligned>:
 80040ec:	b570      	push	{r4, r5, r6, lr}
 80040ee:	4e0f      	ldr	r6, [pc, #60]	@ (800412c <sbrk_aligned+0x40>)
 80040f0:	460c      	mov	r4, r1
 80040f2:	6831      	ldr	r1, [r6, #0]
 80040f4:	4605      	mov	r5, r0
 80040f6:	b911      	cbnz	r1, 80040fe <sbrk_aligned+0x12>
 80040f8:	f000 fcb6 	bl	8004a68 <_sbrk_r>
 80040fc:	6030      	str	r0, [r6, #0]
 80040fe:	4621      	mov	r1, r4
 8004100:	4628      	mov	r0, r5
 8004102:	f000 fcb1 	bl	8004a68 <_sbrk_r>
 8004106:	1c43      	adds	r3, r0, #1
 8004108:	d103      	bne.n	8004112 <sbrk_aligned+0x26>
 800410a:	f04f 34ff 	mov.w	r4, #4294967295
 800410e:	4620      	mov	r0, r4
 8004110:	bd70      	pop	{r4, r5, r6, pc}
 8004112:	1cc4      	adds	r4, r0, #3
 8004114:	f024 0403 	bic.w	r4, r4, #3
 8004118:	42a0      	cmp	r0, r4
 800411a:	d0f8      	beq.n	800410e <sbrk_aligned+0x22>
 800411c:	1a21      	subs	r1, r4, r0
 800411e:	4628      	mov	r0, r5
 8004120:	f000 fca2 	bl	8004a68 <_sbrk_r>
 8004124:	3001      	adds	r0, #1
 8004126:	d1f2      	bne.n	800410e <sbrk_aligned+0x22>
 8004128:	e7ef      	b.n	800410a <sbrk_aligned+0x1e>
 800412a:	bf00      	nop
 800412c:	2000031c 	.word	0x2000031c

08004130 <_malloc_r>:
 8004130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004134:	1ccd      	adds	r5, r1, #3
 8004136:	f025 0503 	bic.w	r5, r5, #3
 800413a:	3508      	adds	r5, #8
 800413c:	2d0c      	cmp	r5, #12
 800413e:	bf38      	it	cc
 8004140:	250c      	movcc	r5, #12
 8004142:	2d00      	cmp	r5, #0
 8004144:	4606      	mov	r6, r0
 8004146:	db01      	blt.n	800414c <_malloc_r+0x1c>
 8004148:	42a9      	cmp	r1, r5
 800414a:	d904      	bls.n	8004156 <_malloc_r+0x26>
 800414c:	230c      	movs	r3, #12
 800414e:	6033      	str	r3, [r6, #0]
 8004150:	2000      	movs	r0, #0
 8004152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004156:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800422c <_malloc_r+0xfc>
 800415a:	f000 f869 	bl	8004230 <__malloc_lock>
 800415e:	f8d8 3000 	ldr.w	r3, [r8]
 8004162:	461c      	mov	r4, r3
 8004164:	bb44      	cbnz	r4, 80041b8 <_malloc_r+0x88>
 8004166:	4629      	mov	r1, r5
 8004168:	4630      	mov	r0, r6
 800416a:	f7ff ffbf 	bl	80040ec <sbrk_aligned>
 800416e:	1c43      	adds	r3, r0, #1
 8004170:	4604      	mov	r4, r0
 8004172:	d158      	bne.n	8004226 <_malloc_r+0xf6>
 8004174:	f8d8 4000 	ldr.w	r4, [r8]
 8004178:	4627      	mov	r7, r4
 800417a:	2f00      	cmp	r7, #0
 800417c:	d143      	bne.n	8004206 <_malloc_r+0xd6>
 800417e:	2c00      	cmp	r4, #0
 8004180:	d04b      	beq.n	800421a <_malloc_r+0xea>
 8004182:	6823      	ldr	r3, [r4, #0]
 8004184:	4639      	mov	r1, r7
 8004186:	4630      	mov	r0, r6
 8004188:	eb04 0903 	add.w	r9, r4, r3
 800418c:	f000 fc6c 	bl	8004a68 <_sbrk_r>
 8004190:	4581      	cmp	r9, r0
 8004192:	d142      	bne.n	800421a <_malloc_r+0xea>
 8004194:	6821      	ldr	r1, [r4, #0]
 8004196:	1a6d      	subs	r5, r5, r1
 8004198:	4629      	mov	r1, r5
 800419a:	4630      	mov	r0, r6
 800419c:	f7ff ffa6 	bl	80040ec <sbrk_aligned>
 80041a0:	3001      	adds	r0, #1
 80041a2:	d03a      	beq.n	800421a <_malloc_r+0xea>
 80041a4:	6823      	ldr	r3, [r4, #0]
 80041a6:	442b      	add	r3, r5
 80041a8:	6023      	str	r3, [r4, #0]
 80041aa:	f8d8 3000 	ldr.w	r3, [r8]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	bb62      	cbnz	r2, 800420c <_malloc_r+0xdc>
 80041b2:	f8c8 7000 	str.w	r7, [r8]
 80041b6:	e00f      	b.n	80041d8 <_malloc_r+0xa8>
 80041b8:	6822      	ldr	r2, [r4, #0]
 80041ba:	1b52      	subs	r2, r2, r5
 80041bc:	d420      	bmi.n	8004200 <_malloc_r+0xd0>
 80041be:	2a0b      	cmp	r2, #11
 80041c0:	d917      	bls.n	80041f2 <_malloc_r+0xc2>
 80041c2:	1961      	adds	r1, r4, r5
 80041c4:	42a3      	cmp	r3, r4
 80041c6:	6025      	str	r5, [r4, #0]
 80041c8:	bf18      	it	ne
 80041ca:	6059      	strne	r1, [r3, #4]
 80041cc:	6863      	ldr	r3, [r4, #4]
 80041ce:	bf08      	it	eq
 80041d0:	f8c8 1000 	streq.w	r1, [r8]
 80041d4:	5162      	str	r2, [r4, r5]
 80041d6:	604b      	str	r3, [r1, #4]
 80041d8:	4630      	mov	r0, r6
 80041da:	f000 f82f 	bl	800423c <__malloc_unlock>
 80041de:	f104 000b 	add.w	r0, r4, #11
 80041e2:	1d23      	adds	r3, r4, #4
 80041e4:	f020 0007 	bic.w	r0, r0, #7
 80041e8:	1ac2      	subs	r2, r0, r3
 80041ea:	bf1c      	itt	ne
 80041ec:	1a1b      	subne	r3, r3, r0
 80041ee:	50a3      	strne	r3, [r4, r2]
 80041f0:	e7af      	b.n	8004152 <_malloc_r+0x22>
 80041f2:	6862      	ldr	r2, [r4, #4]
 80041f4:	42a3      	cmp	r3, r4
 80041f6:	bf0c      	ite	eq
 80041f8:	f8c8 2000 	streq.w	r2, [r8]
 80041fc:	605a      	strne	r2, [r3, #4]
 80041fe:	e7eb      	b.n	80041d8 <_malloc_r+0xa8>
 8004200:	4623      	mov	r3, r4
 8004202:	6864      	ldr	r4, [r4, #4]
 8004204:	e7ae      	b.n	8004164 <_malloc_r+0x34>
 8004206:	463c      	mov	r4, r7
 8004208:	687f      	ldr	r7, [r7, #4]
 800420a:	e7b6      	b.n	800417a <_malloc_r+0x4a>
 800420c:	461a      	mov	r2, r3
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	42a3      	cmp	r3, r4
 8004212:	d1fb      	bne.n	800420c <_malloc_r+0xdc>
 8004214:	2300      	movs	r3, #0
 8004216:	6053      	str	r3, [r2, #4]
 8004218:	e7de      	b.n	80041d8 <_malloc_r+0xa8>
 800421a:	230c      	movs	r3, #12
 800421c:	6033      	str	r3, [r6, #0]
 800421e:	4630      	mov	r0, r6
 8004220:	f000 f80c 	bl	800423c <__malloc_unlock>
 8004224:	e794      	b.n	8004150 <_malloc_r+0x20>
 8004226:	6005      	str	r5, [r0, #0]
 8004228:	e7d6      	b.n	80041d8 <_malloc_r+0xa8>
 800422a:	bf00      	nop
 800422c:	20000320 	.word	0x20000320

08004230 <__malloc_lock>:
 8004230:	4801      	ldr	r0, [pc, #4]	@ (8004238 <__malloc_lock+0x8>)
 8004232:	f7ff bf0e 	b.w	8004052 <__retarget_lock_acquire_recursive>
 8004236:	bf00      	nop
 8004238:	20000318 	.word	0x20000318

0800423c <__malloc_unlock>:
 800423c:	4801      	ldr	r0, [pc, #4]	@ (8004244 <__malloc_unlock+0x8>)
 800423e:	f7ff bf09 	b.w	8004054 <__retarget_lock_release_recursive>
 8004242:	bf00      	nop
 8004244:	20000318 	.word	0x20000318

08004248 <__sfputc_r>:
 8004248:	6893      	ldr	r3, [r2, #8]
 800424a:	3b01      	subs	r3, #1
 800424c:	2b00      	cmp	r3, #0
 800424e:	b410      	push	{r4}
 8004250:	6093      	str	r3, [r2, #8]
 8004252:	da08      	bge.n	8004266 <__sfputc_r+0x1e>
 8004254:	6994      	ldr	r4, [r2, #24]
 8004256:	42a3      	cmp	r3, r4
 8004258:	db01      	blt.n	800425e <__sfputc_r+0x16>
 800425a:	290a      	cmp	r1, #10
 800425c:	d103      	bne.n	8004266 <__sfputc_r+0x1e>
 800425e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004262:	f000 bb6d 	b.w	8004940 <__swbuf_r>
 8004266:	6813      	ldr	r3, [r2, #0]
 8004268:	1c58      	adds	r0, r3, #1
 800426a:	6010      	str	r0, [r2, #0]
 800426c:	7019      	strb	r1, [r3, #0]
 800426e:	4608      	mov	r0, r1
 8004270:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004274:	4770      	bx	lr

08004276 <__sfputs_r>:
 8004276:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004278:	4606      	mov	r6, r0
 800427a:	460f      	mov	r7, r1
 800427c:	4614      	mov	r4, r2
 800427e:	18d5      	adds	r5, r2, r3
 8004280:	42ac      	cmp	r4, r5
 8004282:	d101      	bne.n	8004288 <__sfputs_r+0x12>
 8004284:	2000      	movs	r0, #0
 8004286:	e007      	b.n	8004298 <__sfputs_r+0x22>
 8004288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800428c:	463a      	mov	r2, r7
 800428e:	4630      	mov	r0, r6
 8004290:	f7ff ffda 	bl	8004248 <__sfputc_r>
 8004294:	1c43      	adds	r3, r0, #1
 8004296:	d1f3      	bne.n	8004280 <__sfputs_r+0xa>
 8004298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800429c <_vfiprintf_r>:
 800429c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042a0:	460d      	mov	r5, r1
 80042a2:	b09d      	sub	sp, #116	@ 0x74
 80042a4:	4614      	mov	r4, r2
 80042a6:	4698      	mov	r8, r3
 80042a8:	4606      	mov	r6, r0
 80042aa:	b118      	cbz	r0, 80042b4 <_vfiprintf_r+0x18>
 80042ac:	6a03      	ldr	r3, [r0, #32]
 80042ae:	b90b      	cbnz	r3, 80042b4 <_vfiprintf_r+0x18>
 80042b0:	f7ff fdca 	bl	8003e48 <__sinit>
 80042b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80042b6:	07d9      	lsls	r1, r3, #31
 80042b8:	d405      	bmi.n	80042c6 <_vfiprintf_r+0x2a>
 80042ba:	89ab      	ldrh	r3, [r5, #12]
 80042bc:	059a      	lsls	r2, r3, #22
 80042be:	d402      	bmi.n	80042c6 <_vfiprintf_r+0x2a>
 80042c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80042c2:	f7ff fec6 	bl	8004052 <__retarget_lock_acquire_recursive>
 80042c6:	89ab      	ldrh	r3, [r5, #12]
 80042c8:	071b      	lsls	r3, r3, #28
 80042ca:	d501      	bpl.n	80042d0 <_vfiprintf_r+0x34>
 80042cc:	692b      	ldr	r3, [r5, #16]
 80042ce:	b99b      	cbnz	r3, 80042f8 <_vfiprintf_r+0x5c>
 80042d0:	4629      	mov	r1, r5
 80042d2:	4630      	mov	r0, r6
 80042d4:	f000 fb72 	bl	80049bc <__swsetup_r>
 80042d8:	b170      	cbz	r0, 80042f8 <_vfiprintf_r+0x5c>
 80042da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80042dc:	07dc      	lsls	r4, r3, #31
 80042de:	d504      	bpl.n	80042ea <_vfiprintf_r+0x4e>
 80042e0:	f04f 30ff 	mov.w	r0, #4294967295
 80042e4:	b01d      	add	sp, #116	@ 0x74
 80042e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042ea:	89ab      	ldrh	r3, [r5, #12]
 80042ec:	0598      	lsls	r0, r3, #22
 80042ee:	d4f7      	bmi.n	80042e0 <_vfiprintf_r+0x44>
 80042f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80042f2:	f7ff feaf 	bl	8004054 <__retarget_lock_release_recursive>
 80042f6:	e7f3      	b.n	80042e0 <_vfiprintf_r+0x44>
 80042f8:	2300      	movs	r3, #0
 80042fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80042fc:	2320      	movs	r3, #32
 80042fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004302:	f8cd 800c 	str.w	r8, [sp, #12]
 8004306:	2330      	movs	r3, #48	@ 0x30
 8004308:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80044b8 <_vfiprintf_r+0x21c>
 800430c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004310:	f04f 0901 	mov.w	r9, #1
 8004314:	4623      	mov	r3, r4
 8004316:	469a      	mov	sl, r3
 8004318:	f813 2b01 	ldrb.w	r2, [r3], #1
 800431c:	b10a      	cbz	r2, 8004322 <_vfiprintf_r+0x86>
 800431e:	2a25      	cmp	r2, #37	@ 0x25
 8004320:	d1f9      	bne.n	8004316 <_vfiprintf_r+0x7a>
 8004322:	ebba 0b04 	subs.w	fp, sl, r4
 8004326:	d00b      	beq.n	8004340 <_vfiprintf_r+0xa4>
 8004328:	465b      	mov	r3, fp
 800432a:	4622      	mov	r2, r4
 800432c:	4629      	mov	r1, r5
 800432e:	4630      	mov	r0, r6
 8004330:	f7ff ffa1 	bl	8004276 <__sfputs_r>
 8004334:	3001      	adds	r0, #1
 8004336:	f000 80a7 	beq.w	8004488 <_vfiprintf_r+0x1ec>
 800433a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800433c:	445a      	add	r2, fp
 800433e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004340:	f89a 3000 	ldrb.w	r3, [sl]
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 809f 	beq.w	8004488 <_vfiprintf_r+0x1ec>
 800434a:	2300      	movs	r3, #0
 800434c:	f04f 32ff 	mov.w	r2, #4294967295
 8004350:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004354:	f10a 0a01 	add.w	sl, sl, #1
 8004358:	9304      	str	r3, [sp, #16]
 800435a:	9307      	str	r3, [sp, #28]
 800435c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004360:	931a      	str	r3, [sp, #104]	@ 0x68
 8004362:	4654      	mov	r4, sl
 8004364:	2205      	movs	r2, #5
 8004366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800436a:	4853      	ldr	r0, [pc, #332]	@ (80044b8 <_vfiprintf_r+0x21c>)
 800436c:	f7fb ff38 	bl	80001e0 <memchr>
 8004370:	9a04      	ldr	r2, [sp, #16]
 8004372:	b9d8      	cbnz	r0, 80043ac <_vfiprintf_r+0x110>
 8004374:	06d1      	lsls	r1, r2, #27
 8004376:	bf44      	itt	mi
 8004378:	2320      	movmi	r3, #32
 800437a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800437e:	0713      	lsls	r3, r2, #28
 8004380:	bf44      	itt	mi
 8004382:	232b      	movmi	r3, #43	@ 0x2b
 8004384:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004388:	f89a 3000 	ldrb.w	r3, [sl]
 800438c:	2b2a      	cmp	r3, #42	@ 0x2a
 800438e:	d015      	beq.n	80043bc <_vfiprintf_r+0x120>
 8004390:	9a07      	ldr	r2, [sp, #28]
 8004392:	4654      	mov	r4, sl
 8004394:	2000      	movs	r0, #0
 8004396:	f04f 0c0a 	mov.w	ip, #10
 800439a:	4621      	mov	r1, r4
 800439c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043a0:	3b30      	subs	r3, #48	@ 0x30
 80043a2:	2b09      	cmp	r3, #9
 80043a4:	d94b      	bls.n	800443e <_vfiprintf_r+0x1a2>
 80043a6:	b1b0      	cbz	r0, 80043d6 <_vfiprintf_r+0x13a>
 80043a8:	9207      	str	r2, [sp, #28]
 80043aa:	e014      	b.n	80043d6 <_vfiprintf_r+0x13a>
 80043ac:	eba0 0308 	sub.w	r3, r0, r8
 80043b0:	fa09 f303 	lsl.w	r3, r9, r3
 80043b4:	4313      	orrs	r3, r2
 80043b6:	9304      	str	r3, [sp, #16]
 80043b8:	46a2      	mov	sl, r4
 80043ba:	e7d2      	b.n	8004362 <_vfiprintf_r+0xc6>
 80043bc:	9b03      	ldr	r3, [sp, #12]
 80043be:	1d19      	adds	r1, r3, #4
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	9103      	str	r1, [sp, #12]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	bfbb      	ittet	lt
 80043c8:	425b      	neglt	r3, r3
 80043ca:	f042 0202 	orrlt.w	r2, r2, #2
 80043ce:	9307      	strge	r3, [sp, #28]
 80043d0:	9307      	strlt	r3, [sp, #28]
 80043d2:	bfb8      	it	lt
 80043d4:	9204      	strlt	r2, [sp, #16]
 80043d6:	7823      	ldrb	r3, [r4, #0]
 80043d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80043da:	d10a      	bne.n	80043f2 <_vfiprintf_r+0x156>
 80043dc:	7863      	ldrb	r3, [r4, #1]
 80043de:	2b2a      	cmp	r3, #42	@ 0x2a
 80043e0:	d132      	bne.n	8004448 <_vfiprintf_r+0x1ac>
 80043e2:	9b03      	ldr	r3, [sp, #12]
 80043e4:	1d1a      	adds	r2, r3, #4
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	9203      	str	r2, [sp, #12]
 80043ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80043ee:	3402      	adds	r4, #2
 80043f0:	9305      	str	r3, [sp, #20]
 80043f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80044c8 <_vfiprintf_r+0x22c>
 80043f6:	7821      	ldrb	r1, [r4, #0]
 80043f8:	2203      	movs	r2, #3
 80043fa:	4650      	mov	r0, sl
 80043fc:	f7fb fef0 	bl	80001e0 <memchr>
 8004400:	b138      	cbz	r0, 8004412 <_vfiprintf_r+0x176>
 8004402:	9b04      	ldr	r3, [sp, #16]
 8004404:	eba0 000a 	sub.w	r0, r0, sl
 8004408:	2240      	movs	r2, #64	@ 0x40
 800440a:	4082      	lsls	r2, r0
 800440c:	4313      	orrs	r3, r2
 800440e:	3401      	adds	r4, #1
 8004410:	9304      	str	r3, [sp, #16]
 8004412:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004416:	4829      	ldr	r0, [pc, #164]	@ (80044bc <_vfiprintf_r+0x220>)
 8004418:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800441c:	2206      	movs	r2, #6
 800441e:	f7fb fedf 	bl	80001e0 <memchr>
 8004422:	2800      	cmp	r0, #0
 8004424:	d03f      	beq.n	80044a6 <_vfiprintf_r+0x20a>
 8004426:	4b26      	ldr	r3, [pc, #152]	@ (80044c0 <_vfiprintf_r+0x224>)
 8004428:	bb1b      	cbnz	r3, 8004472 <_vfiprintf_r+0x1d6>
 800442a:	9b03      	ldr	r3, [sp, #12]
 800442c:	3307      	adds	r3, #7
 800442e:	f023 0307 	bic.w	r3, r3, #7
 8004432:	3308      	adds	r3, #8
 8004434:	9303      	str	r3, [sp, #12]
 8004436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004438:	443b      	add	r3, r7
 800443a:	9309      	str	r3, [sp, #36]	@ 0x24
 800443c:	e76a      	b.n	8004314 <_vfiprintf_r+0x78>
 800443e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004442:	460c      	mov	r4, r1
 8004444:	2001      	movs	r0, #1
 8004446:	e7a8      	b.n	800439a <_vfiprintf_r+0xfe>
 8004448:	2300      	movs	r3, #0
 800444a:	3401      	adds	r4, #1
 800444c:	9305      	str	r3, [sp, #20]
 800444e:	4619      	mov	r1, r3
 8004450:	f04f 0c0a 	mov.w	ip, #10
 8004454:	4620      	mov	r0, r4
 8004456:	f810 2b01 	ldrb.w	r2, [r0], #1
 800445a:	3a30      	subs	r2, #48	@ 0x30
 800445c:	2a09      	cmp	r2, #9
 800445e:	d903      	bls.n	8004468 <_vfiprintf_r+0x1cc>
 8004460:	2b00      	cmp	r3, #0
 8004462:	d0c6      	beq.n	80043f2 <_vfiprintf_r+0x156>
 8004464:	9105      	str	r1, [sp, #20]
 8004466:	e7c4      	b.n	80043f2 <_vfiprintf_r+0x156>
 8004468:	fb0c 2101 	mla	r1, ip, r1, r2
 800446c:	4604      	mov	r4, r0
 800446e:	2301      	movs	r3, #1
 8004470:	e7f0      	b.n	8004454 <_vfiprintf_r+0x1b8>
 8004472:	ab03      	add	r3, sp, #12
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	462a      	mov	r2, r5
 8004478:	4b12      	ldr	r3, [pc, #72]	@ (80044c4 <_vfiprintf_r+0x228>)
 800447a:	a904      	add	r1, sp, #16
 800447c:	4630      	mov	r0, r6
 800447e:	f3af 8000 	nop.w
 8004482:	4607      	mov	r7, r0
 8004484:	1c78      	adds	r0, r7, #1
 8004486:	d1d6      	bne.n	8004436 <_vfiprintf_r+0x19a>
 8004488:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800448a:	07d9      	lsls	r1, r3, #31
 800448c:	d405      	bmi.n	800449a <_vfiprintf_r+0x1fe>
 800448e:	89ab      	ldrh	r3, [r5, #12]
 8004490:	059a      	lsls	r2, r3, #22
 8004492:	d402      	bmi.n	800449a <_vfiprintf_r+0x1fe>
 8004494:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004496:	f7ff fddd 	bl	8004054 <__retarget_lock_release_recursive>
 800449a:	89ab      	ldrh	r3, [r5, #12]
 800449c:	065b      	lsls	r3, r3, #25
 800449e:	f53f af1f 	bmi.w	80042e0 <_vfiprintf_r+0x44>
 80044a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80044a4:	e71e      	b.n	80042e4 <_vfiprintf_r+0x48>
 80044a6:	ab03      	add	r3, sp, #12
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	462a      	mov	r2, r5
 80044ac:	4b05      	ldr	r3, [pc, #20]	@ (80044c4 <_vfiprintf_r+0x228>)
 80044ae:	a904      	add	r1, sp, #16
 80044b0:	4630      	mov	r0, r6
 80044b2:	f000 f879 	bl	80045a8 <_printf_i>
 80044b6:	e7e4      	b.n	8004482 <_vfiprintf_r+0x1e6>
 80044b8:	08004bcc 	.word	0x08004bcc
 80044bc:	08004bd6 	.word	0x08004bd6
 80044c0:	00000000 	.word	0x00000000
 80044c4:	08004277 	.word	0x08004277
 80044c8:	08004bd2 	.word	0x08004bd2

080044cc <_printf_common>:
 80044cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044d0:	4616      	mov	r6, r2
 80044d2:	4698      	mov	r8, r3
 80044d4:	688a      	ldr	r2, [r1, #8]
 80044d6:	690b      	ldr	r3, [r1, #16]
 80044d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80044dc:	4293      	cmp	r3, r2
 80044de:	bfb8      	it	lt
 80044e0:	4613      	movlt	r3, r2
 80044e2:	6033      	str	r3, [r6, #0]
 80044e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80044e8:	4607      	mov	r7, r0
 80044ea:	460c      	mov	r4, r1
 80044ec:	b10a      	cbz	r2, 80044f2 <_printf_common+0x26>
 80044ee:	3301      	adds	r3, #1
 80044f0:	6033      	str	r3, [r6, #0]
 80044f2:	6823      	ldr	r3, [r4, #0]
 80044f4:	0699      	lsls	r1, r3, #26
 80044f6:	bf42      	ittt	mi
 80044f8:	6833      	ldrmi	r3, [r6, #0]
 80044fa:	3302      	addmi	r3, #2
 80044fc:	6033      	strmi	r3, [r6, #0]
 80044fe:	6825      	ldr	r5, [r4, #0]
 8004500:	f015 0506 	ands.w	r5, r5, #6
 8004504:	d106      	bne.n	8004514 <_printf_common+0x48>
 8004506:	f104 0a19 	add.w	sl, r4, #25
 800450a:	68e3      	ldr	r3, [r4, #12]
 800450c:	6832      	ldr	r2, [r6, #0]
 800450e:	1a9b      	subs	r3, r3, r2
 8004510:	42ab      	cmp	r3, r5
 8004512:	dc26      	bgt.n	8004562 <_printf_common+0x96>
 8004514:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004518:	6822      	ldr	r2, [r4, #0]
 800451a:	3b00      	subs	r3, #0
 800451c:	bf18      	it	ne
 800451e:	2301      	movne	r3, #1
 8004520:	0692      	lsls	r2, r2, #26
 8004522:	d42b      	bmi.n	800457c <_printf_common+0xb0>
 8004524:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004528:	4641      	mov	r1, r8
 800452a:	4638      	mov	r0, r7
 800452c:	47c8      	blx	r9
 800452e:	3001      	adds	r0, #1
 8004530:	d01e      	beq.n	8004570 <_printf_common+0xa4>
 8004532:	6823      	ldr	r3, [r4, #0]
 8004534:	6922      	ldr	r2, [r4, #16]
 8004536:	f003 0306 	and.w	r3, r3, #6
 800453a:	2b04      	cmp	r3, #4
 800453c:	bf02      	ittt	eq
 800453e:	68e5      	ldreq	r5, [r4, #12]
 8004540:	6833      	ldreq	r3, [r6, #0]
 8004542:	1aed      	subeq	r5, r5, r3
 8004544:	68a3      	ldr	r3, [r4, #8]
 8004546:	bf0c      	ite	eq
 8004548:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800454c:	2500      	movne	r5, #0
 800454e:	4293      	cmp	r3, r2
 8004550:	bfc4      	itt	gt
 8004552:	1a9b      	subgt	r3, r3, r2
 8004554:	18ed      	addgt	r5, r5, r3
 8004556:	2600      	movs	r6, #0
 8004558:	341a      	adds	r4, #26
 800455a:	42b5      	cmp	r5, r6
 800455c:	d11a      	bne.n	8004594 <_printf_common+0xc8>
 800455e:	2000      	movs	r0, #0
 8004560:	e008      	b.n	8004574 <_printf_common+0xa8>
 8004562:	2301      	movs	r3, #1
 8004564:	4652      	mov	r2, sl
 8004566:	4641      	mov	r1, r8
 8004568:	4638      	mov	r0, r7
 800456a:	47c8      	blx	r9
 800456c:	3001      	adds	r0, #1
 800456e:	d103      	bne.n	8004578 <_printf_common+0xac>
 8004570:	f04f 30ff 	mov.w	r0, #4294967295
 8004574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004578:	3501      	adds	r5, #1
 800457a:	e7c6      	b.n	800450a <_printf_common+0x3e>
 800457c:	18e1      	adds	r1, r4, r3
 800457e:	1c5a      	adds	r2, r3, #1
 8004580:	2030      	movs	r0, #48	@ 0x30
 8004582:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004586:	4422      	add	r2, r4
 8004588:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800458c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004590:	3302      	adds	r3, #2
 8004592:	e7c7      	b.n	8004524 <_printf_common+0x58>
 8004594:	2301      	movs	r3, #1
 8004596:	4622      	mov	r2, r4
 8004598:	4641      	mov	r1, r8
 800459a:	4638      	mov	r0, r7
 800459c:	47c8      	blx	r9
 800459e:	3001      	adds	r0, #1
 80045a0:	d0e6      	beq.n	8004570 <_printf_common+0xa4>
 80045a2:	3601      	adds	r6, #1
 80045a4:	e7d9      	b.n	800455a <_printf_common+0x8e>
	...

080045a8 <_printf_i>:
 80045a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045ac:	7e0f      	ldrb	r7, [r1, #24]
 80045ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80045b0:	2f78      	cmp	r7, #120	@ 0x78
 80045b2:	4691      	mov	r9, r2
 80045b4:	4680      	mov	r8, r0
 80045b6:	460c      	mov	r4, r1
 80045b8:	469a      	mov	sl, r3
 80045ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80045be:	d807      	bhi.n	80045d0 <_printf_i+0x28>
 80045c0:	2f62      	cmp	r7, #98	@ 0x62
 80045c2:	d80a      	bhi.n	80045da <_printf_i+0x32>
 80045c4:	2f00      	cmp	r7, #0
 80045c6:	f000 80d2 	beq.w	800476e <_printf_i+0x1c6>
 80045ca:	2f58      	cmp	r7, #88	@ 0x58
 80045cc:	f000 80b9 	beq.w	8004742 <_printf_i+0x19a>
 80045d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80045d8:	e03a      	b.n	8004650 <_printf_i+0xa8>
 80045da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80045de:	2b15      	cmp	r3, #21
 80045e0:	d8f6      	bhi.n	80045d0 <_printf_i+0x28>
 80045e2:	a101      	add	r1, pc, #4	@ (adr r1, 80045e8 <_printf_i+0x40>)
 80045e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045e8:	08004641 	.word	0x08004641
 80045ec:	08004655 	.word	0x08004655
 80045f0:	080045d1 	.word	0x080045d1
 80045f4:	080045d1 	.word	0x080045d1
 80045f8:	080045d1 	.word	0x080045d1
 80045fc:	080045d1 	.word	0x080045d1
 8004600:	08004655 	.word	0x08004655
 8004604:	080045d1 	.word	0x080045d1
 8004608:	080045d1 	.word	0x080045d1
 800460c:	080045d1 	.word	0x080045d1
 8004610:	080045d1 	.word	0x080045d1
 8004614:	08004755 	.word	0x08004755
 8004618:	0800467f 	.word	0x0800467f
 800461c:	0800470f 	.word	0x0800470f
 8004620:	080045d1 	.word	0x080045d1
 8004624:	080045d1 	.word	0x080045d1
 8004628:	08004777 	.word	0x08004777
 800462c:	080045d1 	.word	0x080045d1
 8004630:	0800467f 	.word	0x0800467f
 8004634:	080045d1 	.word	0x080045d1
 8004638:	080045d1 	.word	0x080045d1
 800463c:	08004717 	.word	0x08004717
 8004640:	6833      	ldr	r3, [r6, #0]
 8004642:	1d1a      	adds	r2, r3, #4
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6032      	str	r2, [r6, #0]
 8004648:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800464c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004650:	2301      	movs	r3, #1
 8004652:	e09d      	b.n	8004790 <_printf_i+0x1e8>
 8004654:	6833      	ldr	r3, [r6, #0]
 8004656:	6820      	ldr	r0, [r4, #0]
 8004658:	1d19      	adds	r1, r3, #4
 800465a:	6031      	str	r1, [r6, #0]
 800465c:	0606      	lsls	r6, r0, #24
 800465e:	d501      	bpl.n	8004664 <_printf_i+0xbc>
 8004660:	681d      	ldr	r5, [r3, #0]
 8004662:	e003      	b.n	800466c <_printf_i+0xc4>
 8004664:	0645      	lsls	r5, r0, #25
 8004666:	d5fb      	bpl.n	8004660 <_printf_i+0xb8>
 8004668:	f9b3 5000 	ldrsh.w	r5, [r3]
 800466c:	2d00      	cmp	r5, #0
 800466e:	da03      	bge.n	8004678 <_printf_i+0xd0>
 8004670:	232d      	movs	r3, #45	@ 0x2d
 8004672:	426d      	negs	r5, r5
 8004674:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004678:	4859      	ldr	r0, [pc, #356]	@ (80047e0 <_printf_i+0x238>)
 800467a:	230a      	movs	r3, #10
 800467c:	e011      	b.n	80046a2 <_printf_i+0xfa>
 800467e:	6821      	ldr	r1, [r4, #0]
 8004680:	6833      	ldr	r3, [r6, #0]
 8004682:	0608      	lsls	r0, r1, #24
 8004684:	f853 5b04 	ldr.w	r5, [r3], #4
 8004688:	d402      	bmi.n	8004690 <_printf_i+0xe8>
 800468a:	0649      	lsls	r1, r1, #25
 800468c:	bf48      	it	mi
 800468e:	b2ad      	uxthmi	r5, r5
 8004690:	2f6f      	cmp	r7, #111	@ 0x6f
 8004692:	4853      	ldr	r0, [pc, #332]	@ (80047e0 <_printf_i+0x238>)
 8004694:	6033      	str	r3, [r6, #0]
 8004696:	bf14      	ite	ne
 8004698:	230a      	movne	r3, #10
 800469a:	2308      	moveq	r3, #8
 800469c:	2100      	movs	r1, #0
 800469e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80046a2:	6866      	ldr	r6, [r4, #4]
 80046a4:	60a6      	str	r6, [r4, #8]
 80046a6:	2e00      	cmp	r6, #0
 80046a8:	bfa2      	ittt	ge
 80046aa:	6821      	ldrge	r1, [r4, #0]
 80046ac:	f021 0104 	bicge.w	r1, r1, #4
 80046b0:	6021      	strge	r1, [r4, #0]
 80046b2:	b90d      	cbnz	r5, 80046b8 <_printf_i+0x110>
 80046b4:	2e00      	cmp	r6, #0
 80046b6:	d04b      	beq.n	8004750 <_printf_i+0x1a8>
 80046b8:	4616      	mov	r6, r2
 80046ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80046be:	fb03 5711 	mls	r7, r3, r1, r5
 80046c2:	5dc7      	ldrb	r7, [r0, r7]
 80046c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80046c8:	462f      	mov	r7, r5
 80046ca:	42bb      	cmp	r3, r7
 80046cc:	460d      	mov	r5, r1
 80046ce:	d9f4      	bls.n	80046ba <_printf_i+0x112>
 80046d0:	2b08      	cmp	r3, #8
 80046d2:	d10b      	bne.n	80046ec <_printf_i+0x144>
 80046d4:	6823      	ldr	r3, [r4, #0]
 80046d6:	07df      	lsls	r7, r3, #31
 80046d8:	d508      	bpl.n	80046ec <_printf_i+0x144>
 80046da:	6923      	ldr	r3, [r4, #16]
 80046dc:	6861      	ldr	r1, [r4, #4]
 80046de:	4299      	cmp	r1, r3
 80046e0:	bfde      	ittt	le
 80046e2:	2330      	movle	r3, #48	@ 0x30
 80046e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80046ec:	1b92      	subs	r2, r2, r6
 80046ee:	6122      	str	r2, [r4, #16]
 80046f0:	f8cd a000 	str.w	sl, [sp]
 80046f4:	464b      	mov	r3, r9
 80046f6:	aa03      	add	r2, sp, #12
 80046f8:	4621      	mov	r1, r4
 80046fa:	4640      	mov	r0, r8
 80046fc:	f7ff fee6 	bl	80044cc <_printf_common>
 8004700:	3001      	adds	r0, #1
 8004702:	d14a      	bne.n	800479a <_printf_i+0x1f2>
 8004704:	f04f 30ff 	mov.w	r0, #4294967295
 8004708:	b004      	add	sp, #16
 800470a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800470e:	6823      	ldr	r3, [r4, #0]
 8004710:	f043 0320 	orr.w	r3, r3, #32
 8004714:	6023      	str	r3, [r4, #0]
 8004716:	4833      	ldr	r0, [pc, #204]	@ (80047e4 <_printf_i+0x23c>)
 8004718:	2778      	movs	r7, #120	@ 0x78
 800471a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800471e:	6823      	ldr	r3, [r4, #0]
 8004720:	6831      	ldr	r1, [r6, #0]
 8004722:	061f      	lsls	r7, r3, #24
 8004724:	f851 5b04 	ldr.w	r5, [r1], #4
 8004728:	d402      	bmi.n	8004730 <_printf_i+0x188>
 800472a:	065f      	lsls	r7, r3, #25
 800472c:	bf48      	it	mi
 800472e:	b2ad      	uxthmi	r5, r5
 8004730:	6031      	str	r1, [r6, #0]
 8004732:	07d9      	lsls	r1, r3, #31
 8004734:	bf44      	itt	mi
 8004736:	f043 0320 	orrmi.w	r3, r3, #32
 800473a:	6023      	strmi	r3, [r4, #0]
 800473c:	b11d      	cbz	r5, 8004746 <_printf_i+0x19e>
 800473e:	2310      	movs	r3, #16
 8004740:	e7ac      	b.n	800469c <_printf_i+0xf4>
 8004742:	4827      	ldr	r0, [pc, #156]	@ (80047e0 <_printf_i+0x238>)
 8004744:	e7e9      	b.n	800471a <_printf_i+0x172>
 8004746:	6823      	ldr	r3, [r4, #0]
 8004748:	f023 0320 	bic.w	r3, r3, #32
 800474c:	6023      	str	r3, [r4, #0]
 800474e:	e7f6      	b.n	800473e <_printf_i+0x196>
 8004750:	4616      	mov	r6, r2
 8004752:	e7bd      	b.n	80046d0 <_printf_i+0x128>
 8004754:	6833      	ldr	r3, [r6, #0]
 8004756:	6825      	ldr	r5, [r4, #0]
 8004758:	6961      	ldr	r1, [r4, #20]
 800475a:	1d18      	adds	r0, r3, #4
 800475c:	6030      	str	r0, [r6, #0]
 800475e:	062e      	lsls	r6, r5, #24
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	d501      	bpl.n	8004768 <_printf_i+0x1c0>
 8004764:	6019      	str	r1, [r3, #0]
 8004766:	e002      	b.n	800476e <_printf_i+0x1c6>
 8004768:	0668      	lsls	r0, r5, #25
 800476a:	d5fb      	bpl.n	8004764 <_printf_i+0x1bc>
 800476c:	8019      	strh	r1, [r3, #0]
 800476e:	2300      	movs	r3, #0
 8004770:	6123      	str	r3, [r4, #16]
 8004772:	4616      	mov	r6, r2
 8004774:	e7bc      	b.n	80046f0 <_printf_i+0x148>
 8004776:	6833      	ldr	r3, [r6, #0]
 8004778:	1d1a      	adds	r2, r3, #4
 800477a:	6032      	str	r2, [r6, #0]
 800477c:	681e      	ldr	r6, [r3, #0]
 800477e:	6862      	ldr	r2, [r4, #4]
 8004780:	2100      	movs	r1, #0
 8004782:	4630      	mov	r0, r6
 8004784:	f7fb fd2c 	bl	80001e0 <memchr>
 8004788:	b108      	cbz	r0, 800478e <_printf_i+0x1e6>
 800478a:	1b80      	subs	r0, r0, r6
 800478c:	6060      	str	r0, [r4, #4]
 800478e:	6863      	ldr	r3, [r4, #4]
 8004790:	6123      	str	r3, [r4, #16]
 8004792:	2300      	movs	r3, #0
 8004794:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004798:	e7aa      	b.n	80046f0 <_printf_i+0x148>
 800479a:	6923      	ldr	r3, [r4, #16]
 800479c:	4632      	mov	r2, r6
 800479e:	4649      	mov	r1, r9
 80047a0:	4640      	mov	r0, r8
 80047a2:	47d0      	blx	sl
 80047a4:	3001      	adds	r0, #1
 80047a6:	d0ad      	beq.n	8004704 <_printf_i+0x15c>
 80047a8:	6823      	ldr	r3, [r4, #0]
 80047aa:	079b      	lsls	r3, r3, #30
 80047ac:	d413      	bmi.n	80047d6 <_printf_i+0x22e>
 80047ae:	68e0      	ldr	r0, [r4, #12]
 80047b0:	9b03      	ldr	r3, [sp, #12]
 80047b2:	4298      	cmp	r0, r3
 80047b4:	bfb8      	it	lt
 80047b6:	4618      	movlt	r0, r3
 80047b8:	e7a6      	b.n	8004708 <_printf_i+0x160>
 80047ba:	2301      	movs	r3, #1
 80047bc:	4632      	mov	r2, r6
 80047be:	4649      	mov	r1, r9
 80047c0:	4640      	mov	r0, r8
 80047c2:	47d0      	blx	sl
 80047c4:	3001      	adds	r0, #1
 80047c6:	d09d      	beq.n	8004704 <_printf_i+0x15c>
 80047c8:	3501      	adds	r5, #1
 80047ca:	68e3      	ldr	r3, [r4, #12]
 80047cc:	9903      	ldr	r1, [sp, #12]
 80047ce:	1a5b      	subs	r3, r3, r1
 80047d0:	42ab      	cmp	r3, r5
 80047d2:	dcf2      	bgt.n	80047ba <_printf_i+0x212>
 80047d4:	e7eb      	b.n	80047ae <_printf_i+0x206>
 80047d6:	2500      	movs	r5, #0
 80047d8:	f104 0619 	add.w	r6, r4, #25
 80047dc:	e7f5      	b.n	80047ca <_printf_i+0x222>
 80047de:	bf00      	nop
 80047e0:	08004bdd 	.word	0x08004bdd
 80047e4:	08004bee 	.word	0x08004bee

080047e8 <__sflush_r>:
 80047e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80047ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047f0:	0716      	lsls	r6, r2, #28
 80047f2:	4605      	mov	r5, r0
 80047f4:	460c      	mov	r4, r1
 80047f6:	d454      	bmi.n	80048a2 <__sflush_r+0xba>
 80047f8:	684b      	ldr	r3, [r1, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	dc02      	bgt.n	8004804 <__sflush_r+0x1c>
 80047fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004800:	2b00      	cmp	r3, #0
 8004802:	dd48      	ble.n	8004896 <__sflush_r+0xae>
 8004804:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004806:	2e00      	cmp	r6, #0
 8004808:	d045      	beq.n	8004896 <__sflush_r+0xae>
 800480a:	2300      	movs	r3, #0
 800480c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004810:	682f      	ldr	r7, [r5, #0]
 8004812:	6a21      	ldr	r1, [r4, #32]
 8004814:	602b      	str	r3, [r5, #0]
 8004816:	d030      	beq.n	800487a <__sflush_r+0x92>
 8004818:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800481a:	89a3      	ldrh	r3, [r4, #12]
 800481c:	0759      	lsls	r1, r3, #29
 800481e:	d505      	bpl.n	800482c <__sflush_r+0x44>
 8004820:	6863      	ldr	r3, [r4, #4]
 8004822:	1ad2      	subs	r2, r2, r3
 8004824:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004826:	b10b      	cbz	r3, 800482c <__sflush_r+0x44>
 8004828:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800482a:	1ad2      	subs	r2, r2, r3
 800482c:	2300      	movs	r3, #0
 800482e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004830:	6a21      	ldr	r1, [r4, #32]
 8004832:	4628      	mov	r0, r5
 8004834:	47b0      	blx	r6
 8004836:	1c43      	adds	r3, r0, #1
 8004838:	89a3      	ldrh	r3, [r4, #12]
 800483a:	d106      	bne.n	800484a <__sflush_r+0x62>
 800483c:	6829      	ldr	r1, [r5, #0]
 800483e:	291d      	cmp	r1, #29
 8004840:	d82b      	bhi.n	800489a <__sflush_r+0xb2>
 8004842:	4a2a      	ldr	r2, [pc, #168]	@ (80048ec <__sflush_r+0x104>)
 8004844:	410a      	asrs	r2, r1
 8004846:	07d6      	lsls	r6, r2, #31
 8004848:	d427      	bmi.n	800489a <__sflush_r+0xb2>
 800484a:	2200      	movs	r2, #0
 800484c:	6062      	str	r2, [r4, #4]
 800484e:	04d9      	lsls	r1, r3, #19
 8004850:	6922      	ldr	r2, [r4, #16]
 8004852:	6022      	str	r2, [r4, #0]
 8004854:	d504      	bpl.n	8004860 <__sflush_r+0x78>
 8004856:	1c42      	adds	r2, r0, #1
 8004858:	d101      	bne.n	800485e <__sflush_r+0x76>
 800485a:	682b      	ldr	r3, [r5, #0]
 800485c:	b903      	cbnz	r3, 8004860 <__sflush_r+0x78>
 800485e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004860:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004862:	602f      	str	r7, [r5, #0]
 8004864:	b1b9      	cbz	r1, 8004896 <__sflush_r+0xae>
 8004866:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800486a:	4299      	cmp	r1, r3
 800486c:	d002      	beq.n	8004874 <__sflush_r+0x8c>
 800486e:	4628      	mov	r0, r5
 8004870:	f7ff fbf2 	bl	8004058 <_free_r>
 8004874:	2300      	movs	r3, #0
 8004876:	6363      	str	r3, [r4, #52]	@ 0x34
 8004878:	e00d      	b.n	8004896 <__sflush_r+0xae>
 800487a:	2301      	movs	r3, #1
 800487c:	4628      	mov	r0, r5
 800487e:	47b0      	blx	r6
 8004880:	4602      	mov	r2, r0
 8004882:	1c50      	adds	r0, r2, #1
 8004884:	d1c9      	bne.n	800481a <__sflush_r+0x32>
 8004886:	682b      	ldr	r3, [r5, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d0c6      	beq.n	800481a <__sflush_r+0x32>
 800488c:	2b1d      	cmp	r3, #29
 800488e:	d001      	beq.n	8004894 <__sflush_r+0xac>
 8004890:	2b16      	cmp	r3, #22
 8004892:	d11e      	bne.n	80048d2 <__sflush_r+0xea>
 8004894:	602f      	str	r7, [r5, #0]
 8004896:	2000      	movs	r0, #0
 8004898:	e022      	b.n	80048e0 <__sflush_r+0xf8>
 800489a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800489e:	b21b      	sxth	r3, r3
 80048a0:	e01b      	b.n	80048da <__sflush_r+0xf2>
 80048a2:	690f      	ldr	r7, [r1, #16]
 80048a4:	2f00      	cmp	r7, #0
 80048a6:	d0f6      	beq.n	8004896 <__sflush_r+0xae>
 80048a8:	0793      	lsls	r3, r2, #30
 80048aa:	680e      	ldr	r6, [r1, #0]
 80048ac:	bf08      	it	eq
 80048ae:	694b      	ldreq	r3, [r1, #20]
 80048b0:	600f      	str	r7, [r1, #0]
 80048b2:	bf18      	it	ne
 80048b4:	2300      	movne	r3, #0
 80048b6:	eba6 0807 	sub.w	r8, r6, r7
 80048ba:	608b      	str	r3, [r1, #8]
 80048bc:	f1b8 0f00 	cmp.w	r8, #0
 80048c0:	dde9      	ble.n	8004896 <__sflush_r+0xae>
 80048c2:	6a21      	ldr	r1, [r4, #32]
 80048c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80048c6:	4643      	mov	r3, r8
 80048c8:	463a      	mov	r2, r7
 80048ca:	4628      	mov	r0, r5
 80048cc:	47b0      	blx	r6
 80048ce:	2800      	cmp	r0, #0
 80048d0:	dc08      	bgt.n	80048e4 <__sflush_r+0xfc>
 80048d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048da:	81a3      	strh	r3, [r4, #12]
 80048dc:	f04f 30ff 	mov.w	r0, #4294967295
 80048e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048e4:	4407      	add	r7, r0
 80048e6:	eba8 0800 	sub.w	r8, r8, r0
 80048ea:	e7e7      	b.n	80048bc <__sflush_r+0xd4>
 80048ec:	dfbffffe 	.word	0xdfbffffe

080048f0 <_fflush_r>:
 80048f0:	b538      	push	{r3, r4, r5, lr}
 80048f2:	690b      	ldr	r3, [r1, #16]
 80048f4:	4605      	mov	r5, r0
 80048f6:	460c      	mov	r4, r1
 80048f8:	b913      	cbnz	r3, 8004900 <_fflush_r+0x10>
 80048fa:	2500      	movs	r5, #0
 80048fc:	4628      	mov	r0, r5
 80048fe:	bd38      	pop	{r3, r4, r5, pc}
 8004900:	b118      	cbz	r0, 800490a <_fflush_r+0x1a>
 8004902:	6a03      	ldr	r3, [r0, #32]
 8004904:	b90b      	cbnz	r3, 800490a <_fflush_r+0x1a>
 8004906:	f7ff fa9f 	bl	8003e48 <__sinit>
 800490a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0f3      	beq.n	80048fa <_fflush_r+0xa>
 8004912:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004914:	07d0      	lsls	r0, r2, #31
 8004916:	d404      	bmi.n	8004922 <_fflush_r+0x32>
 8004918:	0599      	lsls	r1, r3, #22
 800491a:	d402      	bmi.n	8004922 <_fflush_r+0x32>
 800491c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800491e:	f7ff fb98 	bl	8004052 <__retarget_lock_acquire_recursive>
 8004922:	4628      	mov	r0, r5
 8004924:	4621      	mov	r1, r4
 8004926:	f7ff ff5f 	bl	80047e8 <__sflush_r>
 800492a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800492c:	07da      	lsls	r2, r3, #31
 800492e:	4605      	mov	r5, r0
 8004930:	d4e4      	bmi.n	80048fc <_fflush_r+0xc>
 8004932:	89a3      	ldrh	r3, [r4, #12]
 8004934:	059b      	lsls	r3, r3, #22
 8004936:	d4e1      	bmi.n	80048fc <_fflush_r+0xc>
 8004938:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800493a:	f7ff fb8b 	bl	8004054 <__retarget_lock_release_recursive>
 800493e:	e7dd      	b.n	80048fc <_fflush_r+0xc>

08004940 <__swbuf_r>:
 8004940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004942:	460e      	mov	r6, r1
 8004944:	4614      	mov	r4, r2
 8004946:	4605      	mov	r5, r0
 8004948:	b118      	cbz	r0, 8004952 <__swbuf_r+0x12>
 800494a:	6a03      	ldr	r3, [r0, #32]
 800494c:	b90b      	cbnz	r3, 8004952 <__swbuf_r+0x12>
 800494e:	f7ff fa7b 	bl	8003e48 <__sinit>
 8004952:	69a3      	ldr	r3, [r4, #24]
 8004954:	60a3      	str	r3, [r4, #8]
 8004956:	89a3      	ldrh	r3, [r4, #12]
 8004958:	071a      	lsls	r2, r3, #28
 800495a:	d501      	bpl.n	8004960 <__swbuf_r+0x20>
 800495c:	6923      	ldr	r3, [r4, #16]
 800495e:	b943      	cbnz	r3, 8004972 <__swbuf_r+0x32>
 8004960:	4621      	mov	r1, r4
 8004962:	4628      	mov	r0, r5
 8004964:	f000 f82a 	bl	80049bc <__swsetup_r>
 8004968:	b118      	cbz	r0, 8004972 <__swbuf_r+0x32>
 800496a:	f04f 37ff 	mov.w	r7, #4294967295
 800496e:	4638      	mov	r0, r7
 8004970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004972:	6823      	ldr	r3, [r4, #0]
 8004974:	6922      	ldr	r2, [r4, #16]
 8004976:	1a98      	subs	r0, r3, r2
 8004978:	6963      	ldr	r3, [r4, #20]
 800497a:	b2f6      	uxtb	r6, r6
 800497c:	4283      	cmp	r3, r0
 800497e:	4637      	mov	r7, r6
 8004980:	dc05      	bgt.n	800498e <__swbuf_r+0x4e>
 8004982:	4621      	mov	r1, r4
 8004984:	4628      	mov	r0, r5
 8004986:	f7ff ffb3 	bl	80048f0 <_fflush_r>
 800498a:	2800      	cmp	r0, #0
 800498c:	d1ed      	bne.n	800496a <__swbuf_r+0x2a>
 800498e:	68a3      	ldr	r3, [r4, #8]
 8004990:	3b01      	subs	r3, #1
 8004992:	60a3      	str	r3, [r4, #8]
 8004994:	6823      	ldr	r3, [r4, #0]
 8004996:	1c5a      	adds	r2, r3, #1
 8004998:	6022      	str	r2, [r4, #0]
 800499a:	701e      	strb	r6, [r3, #0]
 800499c:	6962      	ldr	r2, [r4, #20]
 800499e:	1c43      	adds	r3, r0, #1
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d004      	beq.n	80049ae <__swbuf_r+0x6e>
 80049a4:	89a3      	ldrh	r3, [r4, #12]
 80049a6:	07db      	lsls	r3, r3, #31
 80049a8:	d5e1      	bpl.n	800496e <__swbuf_r+0x2e>
 80049aa:	2e0a      	cmp	r6, #10
 80049ac:	d1df      	bne.n	800496e <__swbuf_r+0x2e>
 80049ae:	4621      	mov	r1, r4
 80049b0:	4628      	mov	r0, r5
 80049b2:	f7ff ff9d 	bl	80048f0 <_fflush_r>
 80049b6:	2800      	cmp	r0, #0
 80049b8:	d0d9      	beq.n	800496e <__swbuf_r+0x2e>
 80049ba:	e7d6      	b.n	800496a <__swbuf_r+0x2a>

080049bc <__swsetup_r>:
 80049bc:	b538      	push	{r3, r4, r5, lr}
 80049be:	4b29      	ldr	r3, [pc, #164]	@ (8004a64 <__swsetup_r+0xa8>)
 80049c0:	4605      	mov	r5, r0
 80049c2:	6818      	ldr	r0, [r3, #0]
 80049c4:	460c      	mov	r4, r1
 80049c6:	b118      	cbz	r0, 80049d0 <__swsetup_r+0x14>
 80049c8:	6a03      	ldr	r3, [r0, #32]
 80049ca:	b90b      	cbnz	r3, 80049d0 <__swsetup_r+0x14>
 80049cc:	f7ff fa3c 	bl	8003e48 <__sinit>
 80049d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049d4:	0719      	lsls	r1, r3, #28
 80049d6:	d422      	bmi.n	8004a1e <__swsetup_r+0x62>
 80049d8:	06da      	lsls	r2, r3, #27
 80049da:	d407      	bmi.n	80049ec <__swsetup_r+0x30>
 80049dc:	2209      	movs	r2, #9
 80049de:	602a      	str	r2, [r5, #0]
 80049e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049e4:	81a3      	strh	r3, [r4, #12]
 80049e6:	f04f 30ff 	mov.w	r0, #4294967295
 80049ea:	e033      	b.n	8004a54 <__swsetup_r+0x98>
 80049ec:	0758      	lsls	r0, r3, #29
 80049ee:	d512      	bpl.n	8004a16 <__swsetup_r+0x5a>
 80049f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80049f2:	b141      	cbz	r1, 8004a06 <__swsetup_r+0x4a>
 80049f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80049f8:	4299      	cmp	r1, r3
 80049fa:	d002      	beq.n	8004a02 <__swsetup_r+0x46>
 80049fc:	4628      	mov	r0, r5
 80049fe:	f7ff fb2b 	bl	8004058 <_free_r>
 8004a02:	2300      	movs	r3, #0
 8004a04:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a06:	89a3      	ldrh	r3, [r4, #12]
 8004a08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004a0c:	81a3      	strh	r3, [r4, #12]
 8004a0e:	2300      	movs	r3, #0
 8004a10:	6063      	str	r3, [r4, #4]
 8004a12:	6923      	ldr	r3, [r4, #16]
 8004a14:	6023      	str	r3, [r4, #0]
 8004a16:	89a3      	ldrh	r3, [r4, #12]
 8004a18:	f043 0308 	orr.w	r3, r3, #8
 8004a1c:	81a3      	strh	r3, [r4, #12]
 8004a1e:	6923      	ldr	r3, [r4, #16]
 8004a20:	b94b      	cbnz	r3, 8004a36 <__swsetup_r+0x7a>
 8004a22:	89a3      	ldrh	r3, [r4, #12]
 8004a24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004a28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a2c:	d003      	beq.n	8004a36 <__swsetup_r+0x7a>
 8004a2e:	4621      	mov	r1, r4
 8004a30:	4628      	mov	r0, r5
 8004a32:	f000 f84f 	bl	8004ad4 <__smakebuf_r>
 8004a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a3a:	f013 0201 	ands.w	r2, r3, #1
 8004a3e:	d00a      	beq.n	8004a56 <__swsetup_r+0x9a>
 8004a40:	2200      	movs	r2, #0
 8004a42:	60a2      	str	r2, [r4, #8]
 8004a44:	6962      	ldr	r2, [r4, #20]
 8004a46:	4252      	negs	r2, r2
 8004a48:	61a2      	str	r2, [r4, #24]
 8004a4a:	6922      	ldr	r2, [r4, #16]
 8004a4c:	b942      	cbnz	r2, 8004a60 <__swsetup_r+0xa4>
 8004a4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004a52:	d1c5      	bne.n	80049e0 <__swsetup_r+0x24>
 8004a54:	bd38      	pop	{r3, r4, r5, pc}
 8004a56:	0799      	lsls	r1, r3, #30
 8004a58:	bf58      	it	pl
 8004a5a:	6962      	ldrpl	r2, [r4, #20]
 8004a5c:	60a2      	str	r2, [r4, #8]
 8004a5e:	e7f4      	b.n	8004a4a <__swsetup_r+0x8e>
 8004a60:	2000      	movs	r0, #0
 8004a62:	e7f7      	b.n	8004a54 <__swsetup_r+0x98>
 8004a64:	20000018 	.word	0x20000018

08004a68 <_sbrk_r>:
 8004a68:	b538      	push	{r3, r4, r5, lr}
 8004a6a:	4d06      	ldr	r5, [pc, #24]	@ (8004a84 <_sbrk_r+0x1c>)
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	4604      	mov	r4, r0
 8004a70:	4608      	mov	r0, r1
 8004a72:	602b      	str	r3, [r5, #0]
 8004a74:	f7fc f8ea 	bl	8000c4c <_sbrk>
 8004a78:	1c43      	adds	r3, r0, #1
 8004a7a:	d102      	bne.n	8004a82 <_sbrk_r+0x1a>
 8004a7c:	682b      	ldr	r3, [r5, #0]
 8004a7e:	b103      	cbz	r3, 8004a82 <_sbrk_r+0x1a>
 8004a80:	6023      	str	r3, [r4, #0]
 8004a82:	bd38      	pop	{r3, r4, r5, pc}
 8004a84:	20000314 	.word	0x20000314

08004a88 <__swhatbuf_r>:
 8004a88:	b570      	push	{r4, r5, r6, lr}
 8004a8a:	460c      	mov	r4, r1
 8004a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a90:	2900      	cmp	r1, #0
 8004a92:	b096      	sub	sp, #88	@ 0x58
 8004a94:	4615      	mov	r5, r2
 8004a96:	461e      	mov	r6, r3
 8004a98:	da0d      	bge.n	8004ab6 <__swhatbuf_r+0x2e>
 8004a9a:	89a3      	ldrh	r3, [r4, #12]
 8004a9c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004aa0:	f04f 0100 	mov.w	r1, #0
 8004aa4:	bf14      	ite	ne
 8004aa6:	2340      	movne	r3, #64	@ 0x40
 8004aa8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004aac:	2000      	movs	r0, #0
 8004aae:	6031      	str	r1, [r6, #0]
 8004ab0:	602b      	str	r3, [r5, #0]
 8004ab2:	b016      	add	sp, #88	@ 0x58
 8004ab4:	bd70      	pop	{r4, r5, r6, pc}
 8004ab6:	466a      	mov	r2, sp
 8004ab8:	f000 f848 	bl	8004b4c <_fstat_r>
 8004abc:	2800      	cmp	r0, #0
 8004abe:	dbec      	blt.n	8004a9a <__swhatbuf_r+0x12>
 8004ac0:	9901      	ldr	r1, [sp, #4]
 8004ac2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004ac6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004aca:	4259      	negs	r1, r3
 8004acc:	4159      	adcs	r1, r3
 8004ace:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ad2:	e7eb      	b.n	8004aac <__swhatbuf_r+0x24>

08004ad4 <__smakebuf_r>:
 8004ad4:	898b      	ldrh	r3, [r1, #12]
 8004ad6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ad8:	079d      	lsls	r5, r3, #30
 8004ada:	4606      	mov	r6, r0
 8004adc:	460c      	mov	r4, r1
 8004ade:	d507      	bpl.n	8004af0 <__smakebuf_r+0x1c>
 8004ae0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004ae4:	6023      	str	r3, [r4, #0]
 8004ae6:	6123      	str	r3, [r4, #16]
 8004ae8:	2301      	movs	r3, #1
 8004aea:	6163      	str	r3, [r4, #20]
 8004aec:	b003      	add	sp, #12
 8004aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004af0:	ab01      	add	r3, sp, #4
 8004af2:	466a      	mov	r2, sp
 8004af4:	f7ff ffc8 	bl	8004a88 <__swhatbuf_r>
 8004af8:	9f00      	ldr	r7, [sp, #0]
 8004afa:	4605      	mov	r5, r0
 8004afc:	4639      	mov	r1, r7
 8004afe:	4630      	mov	r0, r6
 8004b00:	f7ff fb16 	bl	8004130 <_malloc_r>
 8004b04:	b948      	cbnz	r0, 8004b1a <__smakebuf_r+0x46>
 8004b06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b0a:	059a      	lsls	r2, r3, #22
 8004b0c:	d4ee      	bmi.n	8004aec <__smakebuf_r+0x18>
 8004b0e:	f023 0303 	bic.w	r3, r3, #3
 8004b12:	f043 0302 	orr.w	r3, r3, #2
 8004b16:	81a3      	strh	r3, [r4, #12]
 8004b18:	e7e2      	b.n	8004ae0 <__smakebuf_r+0xc>
 8004b1a:	89a3      	ldrh	r3, [r4, #12]
 8004b1c:	6020      	str	r0, [r4, #0]
 8004b1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b22:	81a3      	strh	r3, [r4, #12]
 8004b24:	9b01      	ldr	r3, [sp, #4]
 8004b26:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004b2a:	b15b      	cbz	r3, 8004b44 <__smakebuf_r+0x70>
 8004b2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b30:	4630      	mov	r0, r6
 8004b32:	f000 f81d 	bl	8004b70 <_isatty_r>
 8004b36:	b128      	cbz	r0, 8004b44 <__smakebuf_r+0x70>
 8004b38:	89a3      	ldrh	r3, [r4, #12]
 8004b3a:	f023 0303 	bic.w	r3, r3, #3
 8004b3e:	f043 0301 	orr.w	r3, r3, #1
 8004b42:	81a3      	strh	r3, [r4, #12]
 8004b44:	89a3      	ldrh	r3, [r4, #12]
 8004b46:	431d      	orrs	r5, r3
 8004b48:	81a5      	strh	r5, [r4, #12]
 8004b4a:	e7cf      	b.n	8004aec <__smakebuf_r+0x18>

08004b4c <_fstat_r>:
 8004b4c:	b538      	push	{r3, r4, r5, lr}
 8004b4e:	4d07      	ldr	r5, [pc, #28]	@ (8004b6c <_fstat_r+0x20>)
 8004b50:	2300      	movs	r3, #0
 8004b52:	4604      	mov	r4, r0
 8004b54:	4608      	mov	r0, r1
 8004b56:	4611      	mov	r1, r2
 8004b58:	602b      	str	r3, [r5, #0]
 8004b5a:	f7fc f84e 	bl	8000bfa <_fstat>
 8004b5e:	1c43      	adds	r3, r0, #1
 8004b60:	d102      	bne.n	8004b68 <_fstat_r+0x1c>
 8004b62:	682b      	ldr	r3, [r5, #0]
 8004b64:	b103      	cbz	r3, 8004b68 <_fstat_r+0x1c>
 8004b66:	6023      	str	r3, [r4, #0]
 8004b68:	bd38      	pop	{r3, r4, r5, pc}
 8004b6a:	bf00      	nop
 8004b6c:	20000314 	.word	0x20000314

08004b70 <_isatty_r>:
 8004b70:	b538      	push	{r3, r4, r5, lr}
 8004b72:	4d06      	ldr	r5, [pc, #24]	@ (8004b8c <_isatty_r+0x1c>)
 8004b74:	2300      	movs	r3, #0
 8004b76:	4604      	mov	r4, r0
 8004b78:	4608      	mov	r0, r1
 8004b7a:	602b      	str	r3, [r5, #0]
 8004b7c:	f7fc f84d 	bl	8000c1a <_isatty>
 8004b80:	1c43      	adds	r3, r0, #1
 8004b82:	d102      	bne.n	8004b8a <_isatty_r+0x1a>
 8004b84:	682b      	ldr	r3, [r5, #0]
 8004b86:	b103      	cbz	r3, 8004b8a <_isatty_r+0x1a>
 8004b88:	6023      	str	r3, [r4, #0]
 8004b8a:	bd38      	pop	{r3, r4, r5, pc}
 8004b8c:	20000314 	.word	0x20000314

08004b90 <_init>:
 8004b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b92:	bf00      	nop
 8004b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b96:	bc08      	pop	{r3}
 8004b98:	469e      	mov	lr, r3
 8004b9a:	4770      	bx	lr

08004b9c <_fini>:
 8004b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b9e:	bf00      	nop
 8004ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ba2:	bc08      	pop	{r3}
 8004ba4:	469e      	mov	lr, r3
 8004ba6:	4770      	bx	lr
