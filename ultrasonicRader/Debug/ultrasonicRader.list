
ultrasonicRader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  0800618c  0800618c  0000718c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062e0  080062e0  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  080062e0  080062e0  000072e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062e8  080062e8  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062e8  080062e8  000072e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080062ec  080062ec  000072ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080062f0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  20000068  08006358  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  08006358  000083b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f02e  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024ba  00000000  00000000  000170c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  00019580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a90  00000000  00000000  0001a320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e3e  00000000  00000000  0001adb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a8b  00000000  00000000  00032bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000901db  00000000  00000000  00043679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d3854  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004184  00000000  00000000  000d3898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000d7a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006174 	.word	0x08006174

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08006174 	.word	0x08006174

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b96a 	b.w	8000d58 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	460c      	mov	r4, r1
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d14e      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aa8:	4694      	mov	ip, r2
 8000aaa:	458c      	cmp	ip, r1
 8000aac:	4686      	mov	lr, r0
 8000aae:	fab2 f282 	clz	r2, r2
 8000ab2:	d962      	bls.n	8000b7a <__udivmoddi4+0xde>
 8000ab4:	b14a      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab6:	f1c2 0320 	rsb	r3, r2, #32
 8000aba:	4091      	lsls	r1, r2
 8000abc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ac0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac4:	4319      	orrs	r1, r3
 8000ac6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ace:	fa1f f68c 	uxth.w	r6, ip
 8000ad2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ad6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ada:	fb07 1114 	mls	r1, r7, r4, r1
 8000ade:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae2:	fb04 f106 	mul.w	r1, r4, r6
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f104 30ff 	add.w	r0, r4, #4294967295
 8000af2:	f080 8112 	bcs.w	8000d1a <__udivmoddi4+0x27e>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 810f 	bls.w	8000d1a <__udivmoddi4+0x27e>
 8000afc:	3c02      	subs	r4, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a59      	subs	r1, r3, r1
 8000b02:	fa1f f38e 	uxth.w	r3, lr
 8000b06:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b0a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b12:	fb00 f606 	mul.w	r6, r0, r6
 8000b16:	429e      	cmp	r6, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x94>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b22:	f080 80fc 	bcs.w	8000d1e <__udivmoddi4+0x282>
 8000b26:	429e      	cmp	r6, r3
 8000b28:	f240 80f9 	bls.w	8000d1e <__udivmoddi4+0x282>
 8000b2c:	4463      	add	r3, ip
 8000b2e:	3802      	subs	r0, #2
 8000b30:	1b9b      	subs	r3, r3, r6
 8000b32:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b36:	2100      	movs	r1, #0
 8000b38:	b11d      	cbz	r5, 8000b42 <__udivmoddi4+0xa6>
 8000b3a:	40d3      	lsrs	r3, r2
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d905      	bls.n	8000b56 <__udivmoddi4+0xba>
 8000b4a:	b10d      	cbz	r5, 8000b50 <__udivmoddi4+0xb4>
 8000b4c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b50:	2100      	movs	r1, #0
 8000b52:	4608      	mov	r0, r1
 8000b54:	e7f5      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000b56:	fab3 f183 	clz	r1, r3
 8000b5a:	2900      	cmp	r1, #0
 8000b5c:	d146      	bne.n	8000bec <__udivmoddi4+0x150>
 8000b5e:	42a3      	cmp	r3, r4
 8000b60:	d302      	bcc.n	8000b68 <__udivmoddi4+0xcc>
 8000b62:	4290      	cmp	r0, r2
 8000b64:	f0c0 80f0 	bcc.w	8000d48 <__udivmoddi4+0x2ac>
 8000b68:	1a86      	subs	r6, r0, r2
 8000b6a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b6e:	2001      	movs	r0, #1
 8000b70:	2d00      	cmp	r5, #0
 8000b72:	d0e6      	beq.n	8000b42 <__udivmoddi4+0xa6>
 8000b74:	e9c5 6300 	strd	r6, r3, [r5]
 8000b78:	e7e3      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000b7a:	2a00      	cmp	r2, #0
 8000b7c:	f040 8090 	bne.w	8000ca0 <__udivmoddi4+0x204>
 8000b80:	eba1 040c 	sub.w	r4, r1, ip
 8000b84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b88:	fa1f f78c 	uxth.w	r7, ip
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b96:	fb08 4416 	mls	r4, r8, r6, r4
 8000b9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b9e:	fb07 f006 	mul.w	r0, r7, r6
 8000ba2:	4298      	cmp	r0, r3
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x11c>
 8000ba6:	eb1c 0303 	adds.w	r3, ip, r3
 8000baa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x11a>
 8000bb0:	4298      	cmp	r0, r3
 8000bb2:	f200 80cd 	bhi.w	8000d50 <__udivmoddi4+0x2b4>
 8000bb6:	4626      	mov	r6, r4
 8000bb8:	1a1c      	subs	r4, r3, r0
 8000bba:	fa1f f38e 	uxth.w	r3, lr
 8000bbe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bc2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bca:	fb00 f707 	mul.w	r7, r0, r7
 8000bce:	429f      	cmp	r7, r3
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x148>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bda:	d202      	bcs.n	8000be2 <__udivmoddi4+0x146>
 8000bdc:	429f      	cmp	r7, r3
 8000bde:	f200 80b0 	bhi.w	8000d42 <__udivmoddi4+0x2a6>
 8000be2:	4620      	mov	r0, r4
 8000be4:	1bdb      	subs	r3, r3, r7
 8000be6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bea:	e7a5      	b.n	8000b38 <__udivmoddi4+0x9c>
 8000bec:	f1c1 0620 	rsb	r6, r1, #32
 8000bf0:	408b      	lsls	r3, r1
 8000bf2:	fa22 f706 	lsr.w	r7, r2, r6
 8000bf6:	431f      	orrs	r7, r3
 8000bf8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bfc:	fa04 f301 	lsl.w	r3, r4, r1
 8000c00:	ea43 030c 	orr.w	r3, r3, ip
 8000c04:	40f4      	lsrs	r4, r6
 8000c06:	fa00 f801 	lsl.w	r8, r0, r1
 8000c0a:	0c38      	lsrs	r0, r7, #16
 8000c0c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c10:	fbb4 fef0 	udiv	lr, r4, r0
 8000c14:	fa1f fc87 	uxth.w	ip, r7
 8000c18:	fb00 441e 	mls	r4, r0, lr, r4
 8000c1c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c20:	fb0e f90c 	mul.w	r9, lr, ip
 8000c24:	45a1      	cmp	r9, r4
 8000c26:	fa02 f201 	lsl.w	r2, r2, r1
 8000c2a:	d90a      	bls.n	8000c42 <__udivmoddi4+0x1a6>
 8000c2c:	193c      	adds	r4, r7, r4
 8000c2e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c32:	f080 8084 	bcs.w	8000d3e <__udivmoddi4+0x2a2>
 8000c36:	45a1      	cmp	r9, r4
 8000c38:	f240 8081 	bls.w	8000d3e <__udivmoddi4+0x2a2>
 8000c3c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c40:	443c      	add	r4, r7
 8000c42:	eba4 0409 	sub.w	r4, r4, r9
 8000c46:	fa1f f983 	uxth.w	r9, r3
 8000c4a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c4e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c52:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c56:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	d907      	bls.n	8000c6e <__udivmoddi4+0x1d2>
 8000c5e:	193c      	adds	r4, r7, r4
 8000c60:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c64:	d267      	bcs.n	8000d36 <__udivmoddi4+0x29a>
 8000c66:	45a4      	cmp	ip, r4
 8000c68:	d965      	bls.n	8000d36 <__udivmoddi4+0x29a>
 8000c6a:	3b02      	subs	r3, #2
 8000c6c:	443c      	add	r4, r7
 8000c6e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c72:	fba0 9302 	umull	r9, r3, r0, r2
 8000c76:	eba4 040c 	sub.w	r4, r4, ip
 8000c7a:	429c      	cmp	r4, r3
 8000c7c:	46ce      	mov	lr, r9
 8000c7e:	469c      	mov	ip, r3
 8000c80:	d351      	bcc.n	8000d26 <__udivmoddi4+0x28a>
 8000c82:	d04e      	beq.n	8000d22 <__udivmoddi4+0x286>
 8000c84:	b155      	cbz	r5, 8000c9c <__udivmoddi4+0x200>
 8000c86:	ebb8 030e 	subs.w	r3, r8, lr
 8000c8a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c8e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c92:	40cb      	lsrs	r3, r1
 8000c94:	431e      	orrs	r6, r3
 8000c96:	40cc      	lsrs	r4, r1
 8000c98:	e9c5 6400 	strd	r6, r4, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e750      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000ca0:	f1c2 0320 	rsb	r3, r2, #32
 8000ca4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ca8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cac:	fa24 f303 	lsr.w	r3, r4, r3
 8000cb0:	4094      	lsls	r4, r2
 8000cb2:	430c      	orrs	r4, r1
 8000cb4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cb8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cbc:	fa1f f78c 	uxth.w	r7, ip
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cc8:	0c23      	lsrs	r3, r4, #16
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb00 f107 	mul.w	r1, r0, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0x24c>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cde:	d22c      	bcs.n	8000d3a <__udivmoddi4+0x29e>
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d92a      	bls.n	8000d3a <__udivmoddi4+0x29e>
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cf0:	fb08 3311 	mls	r3, r8, r1, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb01 f307 	mul.w	r3, r1, r7
 8000cfc:	42a3      	cmp	r3, r4
 8000cfe:	d908      	bls.n	8000d12 <__udivmoddi4+0x276>
 8000d00:	eb1c 0404 	adds.w	r4, ip, r4
 8000d04:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d08:	d213      	bcs.n	8000d32 <__udivmoddi4+0x296>
 8000d0a:	42a3      	cmp	r3, r4
 8000d0c:	d911      	bls.n	8000d32 <__udivmoddi4+0x296>
 8000d0e:	3902      	subs	r1, #2
 8000d10:	4464      	add	r4, ip
 8000d12:	1ae4      	subs	r4, r4, r3
 8000d14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d18:	e739      	b.n	8000b8e <__udivmoddi4+0xf2>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	e6f0      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e706      	b.n	8000b30 <__udivmoddi4+0x94>
 8000d22:	45c8      	cmp	r8, r9
 8000d24:	d2ae      	bcs.n	8000c84 <__udivmoddi4+0x1e8>
 8000d26:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d2a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d2e:	3801      	subs	r0, #1
 8000d30:	e7a8      	b.n	8000c84 <__udivmoddi4+0x1e8>
 8000d32:	4631      	mov	r1, r6
 8000d34:	e7ed      	b.n	8000d12 <__udivmoddi4+0x276>
 8000d36:	4603      	mov	r3, r0
 8000d38:	e799      	b.n	8000c6e <__udivmoddi4+0x1d2>
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	e7d4      	b.n	8000ce8 <__udivmoddi4+0x24c>
 8000d3e:	46d6      	mov	lr, sl
 8000d40:	e77f      	b.n	8000c42 <__udivmoddi4+0x1a6>
 8000d42:	4463      	add	r3, ip
 8000d44:	3802      	subs	r0, #2
 8000d46:	e74d      	b.n	8000be4 <__udivmoddi4+0x148>
 8000d48:	4606      	mov	r6, r0
 8000d4a:	4623      	mov	r3, r4
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e70f      	b.n	8000b70 <__udivmoddi4+0xd4>
 8000d50:	3e02      	subs	r6, #2
 8000d52:	4463      	add	r3, ip
 8000d54:	e730      	b.n	8000bb8 <__udivmoddi4+0x11c>
 8000d56:	bf00      	nop

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <delay_us>:
extern TIM_HandleTypeDef htim1; // for Servo
extern TIM_HandleTypeDef htim3; // for Ultrasonic
extern TIM_HandleTypeDef htim11; // for delay_us
extern UART_HandleTypeDef huart2;

void delay_us(uint16_t time){
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	80fb      	strh	r3, [r7, #6]
	htim11.Instance->CNT =0;
 8000d66:	4b09      	ldr	r3, [pc, #36]	@ (8000d8c <delay_us+0x30>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	625a      	str	r2, [r3, #36]	@ 0x24
	while(htim11.Instance->CNT<time);
 8000d6e:	bf00      	nop
 8000d70:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <delay_us+0x30>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d76:	88fb      	ldrh	r3, [r7, #6]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d3f9      	bcc.n	8000d70 <delay_us+0x14>
}
 8000d7c:	bf00      	nop
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	20000114 	.word	0x20000114

08000d90 <map>:

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
 8000d9c:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	69b9      	ldr	r1, [r7, #24]
 8000da6:	683a      	ldr	r2, [r7, #0]
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	fb03 f202 	mul.w	r2, r3, r2
 8000dae:	6879      	ldr	r1, [r7, #4]
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	1acb      	subs	r3, r1, r3
 8000db4:	fb92 f2f3 	sdiv	r2, r2, r3
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	4413      	add	r3, r2
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <setServo>:

void setServo(uint16_t angle){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af02      	add	r7, sp, #8
 8000dce:	4603      	mov	r3, r0
 8000dd0:	80fb      	strh	r3, [r7, #6]
	htim1.Instance->CCR1 = map(angle,0,180,800,2400); //각도는 0~180, pwm은 800~2400
 8000dd2:	88f8      	ldrh	r0, [r7, #6]
 8000dd4:	f44f 6316 	mov.w	r3, #2400	@ 0x960
 8000dd8:	9300      	str	r3, [sp, #0]
 8000dda:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000dde:	22b4      	movs	r2, #180	@ 0xb4
 8000de0:	2100      	movs	r1, #0
 8000de2:	f7ff ffd5 	bl	8000d90 <map>
 8000de6:	4602      	mov	r2, r0
 8000de8:	4b03      	ldr	r3, [pc, #12]	@ (8000df8 <setServo+0x30>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000084 	.word	0x20000084

08000dfc <app>:

void app(){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
	// 초기화
	initUart(&huart2);
 8000e02:	4818      	ldr	r0, [pc, #96]	@ (8000e64 <app+0x68>)
 8000e04:	f000 fc92 	bl	800172c <initUart>
	initUltrasonic(&htim3);
 8000e08:	4817      	ldr	r0, [pc, #92]	@ (8000e68 <app+0x6c>)
 8000e0a:	f000 fd9f 	bl	800194c <initUltrasonic>
	HAL_TIM_Base_Start(&htim11);
 8000e0e:	4817      	ldr	r0, [pc, #92]	@ (8000e6c <app+0x70>)
 8000e10:	f001 fe7e 	bl	8002b10 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000e14:	2100      	movs	r1, #0
 8000e16:	4816      	ldr	r0, [pc, #88]	@ (8000e70 <app+0x74>)
 8000e18:	f001 ff2e 	bl	8002c78 <HAL_TIM_PWM_Start>
	while(1){
		// 각도 수신 (AXXX\n) (ack:aXXX\n)
		char *msg = getMessage();
 8000e1c:	f000 fccc 	bl	80017b8 <getMessage>
 8000e20:	60f8      	str	r0, [r7, #12]
		if(strlen(msg)>3){
 8000e22:	68f8      	ldr	r0, [r7, #12]
 8000e24:	f7ff f9dc 	bl	80001e0 <strlen>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b03      	cmp	r3, #3
 8000e2c:	d9f6      	bls.n	8000e1c <app+0x20>
			if(msg[0]=='A'){
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b41      	cmp	r3, #65	@ 0x41
 8000e34:	d1f2      	bne.n	8000e1c <app+0x20>
				// parse
				int angle = atoi(&msg[1]);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f004 f9e2 	bl	8005204 <atoi>
 8000e40:	60b8      	str	r0, [r7, #8]
				//서보를 수신 각도로 이동
				setServo(angle);
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff ffbe 	bl	8000dc8 <setServo>
				// 서보의 움직임을 고려한 시간 지연
				HAL_Delay(200);
 8000e4c:	20c8      	movs	r0, #200	@ 0xc8
 8000e4e:	f000 fe51 	bl	8001af4 <HAL_Delay>
				// 거리 측정
				int distance = getDistance();
 8000e52:	f000 fd8d 	bl	8001970 <getDistance>
 8000e56:	4603      	mov	r3, r0
 8000e58:	607b      	str	r3, [r7, #4]
				// 측정 데이터 송신 (DXXX\n) (ack:dXXX\n)
				printf("D%03d\n",distance);
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	4805      	ldr	r0, [pc, #20]	@ (8000e74 <app+0x78>)
 8000e5e:	f004 fb1b 	bl	8005498 <iprintf>
	while(1){
 8000e62:	e7db      	b.n	8000e1c <app+0x20>
 8000e64:	2000015c 	.word	0x2000015c
 8000e68:	200000cc 	.word	0x200000cc
 8000e6c:	20000114 	.word	0x20000114
 8000e70:	20000084 	.word	0x20000084
 8000e74:	0800618c 	.word	0x0800618c

08000e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e7c:	f000 fdc8 	bl	8001a10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e80:	f000 f80e 	bl	8000ea0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e84:	f000 f9c8 	bl	8001218 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000e88:	f000 f868 	bl	8000f5c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000e8c:	f000 f906 	bl	800109c <MX_TIM3_Init>
  MX_TIM11_Init();
 8000e90:	f000 f974 	bl	800117c <MX_TIM11_Init>
  MX_USART2_UART_Init();
 8000e94:	f000 f996 	bl	80011c4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  app();
 8000e98:	f7ff ffb0 	bl	8000dfc <app>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <main+0x24>

08000ea0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b094      	sub	sp, #80	@ 0x50
 8000ea4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea6:	f107 0320 	add.w	r3, r7, #32
 8000eaa:	2230      	movs	r2, #48	@ 0x30
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f004 fb47 	bl	8005542 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb4:	f107 030c 	add.w	r3, r7, #12
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	4b22      	ldr	r3, [pc, #136]	@ (8000f54 <SystemClock_Config+0xb4>)
 8000eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ecc:	4a21      	ldr	r2, [pc, #132]	@ (8000f54 <SystemClock_Config+0xb4>)
 8000ece:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ed2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ed4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f54 <SystemClock_Config+0xb4>)
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f58 <SystemClock_Config+0xb8>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a1b      	ldr	r2, [pc, #108]	@ (8000f58 <SystemClock_Config+0xb8>)
 8000eea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000eee:	6013      	str	r3, [r2, #0]
 8000ef0:	4b19      	ldr	r3, [pc, #100]	@ (8000f58 <SystemClock_Config+0xb8>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ef8:	607b      	str	r3, [r7, #4]
 8000efa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000efc:	2302      	movs	r3, #2
 8000efe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f00:	2301      	movs	r3, #1
 8000f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f04:	2310      	movs	r3, #16
 8000f06:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0c:	f107 0320 	add.w	r3, r7, #32
 8000f10:	4618      	mov	r0, r3
 8000f12:	f001 f955 	bl	80021c0 <HAL_RCC_OscConfig>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000f1c:	f000 f9ae 	bl	800127c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f20:	230f      	movs	r3, #15
 8000f22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f24:	2300      	movs	r3, #0
 8000f26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f001 fbb8 	bl	80026b0 <HAL_RCC_ClockConfig>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000f46:	f000 f999 	bl	800127c <Error_Handler>
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	3750      	adds	r7, #80	@ 0x50
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40007000 	.word	0x40007000

08000f5c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b096      	sub	sp, #88	@ 0x58
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f62:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f70:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
 8000f88:	611a      	str	r2, [r3, #16]
 8000f8a:	615a      	str	r2, [r3, #20]
 8000f8c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	2220      	movs	r2, #32
 8000f92:	2100      	movs	r1, #0
 8000f94:	4618      	mov	r0, r3
 8000f96:	f004 fad4 	bl	8005542 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f9a:	4b3e      	ldr	r3, [pc, #248]	@ (8001094 <MX_TIM1_Init+0x138>)
 8000f9c:	4a3e      	ldr	r2, [pc, #248]	@ (8001098 <MX_TIM1_Init+0x13c>)
 8000f9e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8000fa0:	4b3c      	ldr	r3, [pc, #240]	@ (8001094 <MX_TIM1_Init+0x138>)
 8000fa2:	220f      	movs	r2, #15
 8000fa4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa6:	4b3b      	ldr	r3, [pc, #236]	@ (8001094 <MX_TIM1_Init+0x138>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8000fac:	4b39      	ldr	r3, [pc, #228]	@ (8001094 <MX_TIM1_Init+0x138>)
 8000fae:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000fb2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb4:	4b37      	ldr	r3, [pc, #220]	@ (8001094 <MX_TIM1_Init+0x138>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fba:	4b36      	ldr	r3, [pc, #216]	@ (8001094 <MX_TIM1_Init+0x138>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc0:	4b34      	ldr	r3, [pc, #208]	@ (8001094 <MX_TIM1_Init+0x138>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fc6:	4833      	ldr	r0, [pc, #204]	@ (8001094 <MX_TIM1_Init+0x138>)
 8000fc8:	f001 fd52 	bl	8002a70 <HAL_TIM_Base_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000fd2:	f000 f953 	bl	800127c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fda:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fdc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	482c      	ldr	r0, [pc, #176]	@ (8001094 <MX_TIM1_Init+0x138>)
 8000fe4:	f002 faba 	bl	800355c <HAL_TIM_ConfigClockSource>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000fee:	f000 f945 	bl	800127c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ff2:	4828      	ldr	r0, [pc, #160]	@ (8001094 <MX_TIM1_Init+0x138>)
 8000ff4:	f001 fde6 	bl	8002bc4 <HAL_TIM_PWM_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000ffe:	f000 f93d 	bl	800127c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001002:	2300      	movs	r3, #0
 8001004:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001006:	2300      	movs	r3, #0
 8001008:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800100a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800100e:	4619      	mov	r1, r3
 8001010:	4820      	ldr	r0, [pc, #128]	@ (8001094 <MX_TIM1_Init+0x138>)
 8001012:	f002 ffcd 	bl	8003fb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800101c:	f000 f92e 	bl	800127c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001020:	2360      	movs	r3, #96	@ 0x60
 8001022:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001028:	2300      	movs	r3, #0
 800102a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800102c:	2300      	movs	r3, #0
 800102e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001030:	2300      	movs	r3, #0
 8001032:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001034:	2300      	movs	r3, #0
 8001036:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001038:	2300      	movs	r3, #0
 800103a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800103c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001040:	2200      	movs	r2, #0
 8001042:	4619      	mov	r1, r3
 8001044:	4813      	ldr	r0, [pc, #76]	@ (8001094 <MX_TIM1_Init+0x138>)
 8001046:	f002 f9c7 	bl	80033d8 <HAL_TIM_PWM_ConfigChannel>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001050:	f000 f914 	bl	800127c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001054:	2300      	movs	r3, #0
 8001056:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001058:	2300      	movs	r3, #0
 800105a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001068:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800106c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800106e:	2300      	movs	r3, #0
 8001070:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	4619      	mov	r1, r3
 8001076:	4807      	ldr	r0, [pc, #28]	@ (8001094 <MX_TIM1_Init+0x138>)
 8001078:	f003 f808 	bl	800408c <HAL_TIMEx_ConfigBreakDeadTime>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001082:	f000 f8fb 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001086:	4803      	ldr	r0, [pc, #12]	@ (8001094 <MX_TIM1_Init+0x138>)
 8001088:	f000 f9a2 	bl	80013d0 <HAL_TIM_MspPostInit>

}
 800108c:	bf00      	nop
 800108e:	3758      	adds	r7, #88	@ 0x58
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000084 	.word	0x20000084
 8001098:	40010000 	.word	0x40010000

0800109c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	@ 0x28
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010a2:	f107 0318 	add.w	r3, r7, #24
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b0:	f107 0310 	add.w	r3, r7, #16
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010ba:	463b      	mov	r3, r7
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001174 <MX_TIM3_Init+0xd8>)
 80010c8:	4a2b      	ldr	r2, [pc, #172]	@ (8001178 <MX_TIM3_Init+0xdc>)
 80010ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 80010cc:	4b29      	ldr	r3, [pc, #164]	@ (8001174 <MX_TIM3_Init+0xd8>)
 80010ce:	220f      	movs	r2, #15
 80010d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d2:	4b28      	ldr	r3, [pc, #160]	@ (8001174 <MX_TIM3_Init+0xd8>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010d8:	4b26      	ldr	r3, [pc, #152]	@ (8001174 <MX_TIM3_Init+0xd8>)
 80010da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e0:	4b24      	ldr	r3, [pc, #144]	@ (8001174 <MX_TIM3_Init+0xd8>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e6:	4b23      	ldr	r3, [pc, #140]	@ (8001174 <MX_TIM3_Init+0xd8>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010ec:	4821      	ldr	r0, [pc, #132]	@ (8001174 <MX_TIM3_Init+0xd8>)
 80010ee:	f001 fcbf 	bl	8002a70 <HAL_TIM_Base_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80010f8:	f000 f8c0 	bl	800127c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001100:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001102:	f107 0318 	add.w	r3, r7, #24
 8001106:	4619      	mov	r1, r3
 8001108:	481a      	ldr	r0, [pc, #104]	@ (8001174 <MX_TIM3_Init+0xd8>)
 800110a:	f002 fa27 	bl	800355c <HAL_TIM_ConfigClockSource>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001114:	f000 f8b2 	bl	800127c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001118:	4816      	ldr	r0, [pc, #88]	@ (8001174 <MX_TIM3_Init+0xd8>)
 800111a:	f001 fe5d 	bl	8002dd8 <HAL_TIM_IC_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001124:	f000 f8aa 	bl	800127c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001128:	2300      	movs	r3, #0
 800112a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001130:	f107 0310 	add.w	r3, r7, #16
 8001134:	4619      	mov	r1, r3
 8001136:	480f      	ldr	r0, [pc, #60]	@ (8001174 <MX_TIM3_Init+0xd8>)
 8001138:	f002 ff3a 	bl	8003fb0 <HAL_TIMEx_MasterConfigSynchronization>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8001142:	f000 f89b 	bl	800127c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001146:	2300      	movs	r3, #0
 8001148:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800114a:	2301      	movs	r3, #1
 800114c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001156:	463b      	mov	r3, r7
 8001158:	2200      	movs	r2, #0
 800115a:	4619      	mov	r1, r3
 800115c:	4805      	ldr	r0, [pc, #20]	@ (8001174 <MX_TIM3_Init+0xd8>)
 800115e:	f002 f89f 	bl	80032a0 <HAL_TIM_IC_ConfigChannel>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001168:	f000 f888 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	3728      	adds	r7, #40	@ 0x28
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	200000cc 	.word	0x200000cc
 8001178:	40000400 	.word	0x40000400

0800117c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001180:	4b0e      	ldr	r3, [pc, #56]	@ (80011bc <MX_TIM11_Init+0x40>)
 8001182:	4a0f      	ldr	r2, [pc, #60]	@ (80011c0 <MX_TIM11_Init+0x44>)
 8001184:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16-1;
 8001186:	4b0d      	ldr	r3, [pc, #52]	@ (80011bc <MX_TIM11_Init+0x40>)
 8001188:	220f      	movs	r2, #15
 800118a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118c:	4b0b      	ldr	r3, [pc, #44]	@ (80011bc <MX_TIM11_Init+0x40>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001192:	4b0a      	ldr	r3, [pc, #40]	@ (80011bc <MX_TIM11_Init+0x40>)
 8001194:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001198:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119a:	4b08      	ldr	r3, [pc, #32]	@ (80011bc <MX_TIM11_Init+0x40>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a0:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <MX_TIM11_Init+0x40>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80011a6:	4805      	ldr	r0, [pc, #20]	@ (80011bc <MX_TIM11_Init+0x40>)
 80011a8:	f001 fc62 	bl	8002a70 <HAL_TIM_Base_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80011b2:	f000 f863 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000114 	.word	0x20000114
 80011c0:	40014800 	.word	0x40014800

080011c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011c8:	4b11      	ldr	r3, [pc, #68]	@ (8001210 <MX_USART2_UART_Init+0x4c>)
 80011ca:	4a12      	ldr	r2, [pc, #72]	@ (8001214 <MX_USART2_UART_Init+0x50>)
 80011cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011ce:	4b10      	ldr	r3, [pc, #64]	@ (8001210 <MX_USART2_UART_Init+0x4c>)
 80011d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001210 <MX_USART2_UART_Init+0x4c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001210 <MX_USART2_UART_Init+0x4c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001210 <MX_USART2_UART_Init+0x4c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011e8:	4b09      	ldr	r3, [pc, #36]	@ (8001210 <MX_USART2_UART_Init+0x4c>)
 80011ea:	220c      	movs	r2, #12
 80011ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ee:	4b08      	ldr	r3, [pc, #32]	@ (8001210 <MX_USART2_UART_Init+0x4c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f4:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <MX_USART2_UART_Init+0x4c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011fa:	4805      	ldr	r0, [pc, #20]	@ (8001210 <MX_USART2_UART_Init+0x4c>)
 80011fc:	f002 ffac 	bl	8004158 <HAL_UART_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001206:	f000 f839 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	2000015c 	.word	0x2000015c
 8001214:	40004400 	.word	0x40004400

08001218 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122c:	2300      	movs	r3, #0
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	4b10      	ldr	r3, [pc, #64]	@ (8001274 <MX_GPIO_Init+0x5c>)
 8001232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001234:	4a0f      	ldr	r2, [pc, #60]	@ (8001274 <MX_GPIO_Init+0x5c>)
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	6313      	str	r3, [r2, #48]	@ 0x30
 800123c:	4b0d      	ldr	r3, [pc, #52]	@ (8001274 <MX_GPIO_Init+0x5c>)
 800123e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	603b      	str	r3, [r7, #0]
 8001246:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);
 8001248:	2200      	movs	r2, #0
 800124a:	2120      	movs	r1, #32
 800124c:	480a      	ldr	r0, [pc, #40]	@ (8001278 <MX_GPIO_Init+0x60>)
 800124e:	f000 ff9d 	bl	800218c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TRIGGER_Pin */
  GPIO_InitStruct.Pin = TRIGGER_Pin;
 8001252:	2320      	movs	r3, #32
 8001254:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001256:	2301      	movs	r3, #1
 8001258:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	4619      	mov	r1, r3
 8001266:	4804      	ldr	r0, [pc, #16]	@ (8001278 <MX_GPIO_Init+0x60>)
 8001268:	f000 fe0c 	bl	8001e84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800126c:	bf00      	nop
 800126e:	3718      	adds	r7, #24
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40023800 	.word	0x40023800
 8001278:	40020000 	.word	0x40020000

0800127c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001280:	b672      	cpsid	i
}
 8001282:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <Error_Handler+0x8>

08001288 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <HAL_MspInit+0x4c>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001296:	4a0f      	ldr	r2, [pc, #60]	@ (80012d4 <HAL_MspInit+0x4c>)
 8001298:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800129c:	6453      	str	r3, [r2, #68]	@ 0x44
 800129e:	4b0d      	ldr	r3, [pc, #52]	@ (80012d4 <HAL_MspInit+0x4c>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	603b      	str	r3, [r7, #0]
 80012ae:	4b09      	ldr	r3, [pc, #36]	@ (80012d4 <HAL_MspInit+0x4c>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b2:	4a08      	ldr	r2, [pc, #32]	@ (80012d4 <HAL_MspInit+0x4c>)
 80012b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ba:	4b06      	ldr	r3, [pc, #24]	@ (80012d4 <HAL_MspInit+0x4c>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c2:	603b      	str	r3, [r7, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800

080012d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08c      	sub	sp, #48	@ 0x30
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 031c 	add.w	r3, r7, #28
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a31      	ldr	r2, [pc, #196]	@ (80013bc <HAL_TIM_Base_MspInit+0xe4>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d10e      	bne.n	8001318 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
 80012fe:	4b30      	ldr	r3, [pc, #192]	@ (80013c0 <HAL_TIM_Base_MspInit+0xe8>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001302:	4a2f      	ldr	r2, [pc, #188]	@ (80013c0 <HAL_TIM_Base_MspInit+0xe8>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6453      	str	r3, [r2, #68]	@ 0x44
 800130a:	4b2d      	ldr	r3, [pc, #180]	@ (80013c0 <HAL_TIM_Base_MspInit+0xe8>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	61bb      	str	r3, [r7, #24]
 8001314:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001316:	e04c      	b.n	80013b2 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM3)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a29      	ldr	r2, [pc, #164]	@ (80013c4 <HAL_TIM_Base_MspInit+0xec>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d134      	bne.n	800138c <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	4b26      	ldr	r3, [pc, #152]	@ (80013c0 <HAL_TIM_Base_MspInit+0xe8>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132a:	4a25      	ldr	r2, [pc, #148]	@ (80013c0 <HAL_TIM_Base_MspInit+0xe8>)
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	6413      	str	r3, [r2, #64]	@ 0x40
 8001332:	4b23      	ldr	r3, [pc, #140]	@ (80013c0 <HAL_TIM_Base_MspInit+0xe8>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	617b      	str	r3, [r7, #20]
 800133c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	4b1f      	ldr	r3, [pc, #124]	@ (80013c0 <HAL_TIM_Base_MspInit+0xe8>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	4a1e      	ldr	r2, [pc, #120]	@ (80013c0 <HAL_TIM_Base_MspInit+0xe8>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6313      	str	r3, [r2, #48]	@ 0x30
 800134e:	4b1c      	ldr	r3, [pc, #112]	@ (80013c0 <HAL_TIM_Base_MspInit+0xe8>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ECHO_Pin;
 800135a:	2340      	movs	r3, #64	@ 0x40
 800135c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2300      	movs	r3, #0
 8001368:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800136a:	2302      	movs	r3, #2
 800136c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 800136e:	f107 031c 	add.w	r3, r7, #28
 8001372:	4619      	mov	r1, r3
 8001374:	4814      	ldr	r0, [pc, #80]	@ (80013c8 <HAL_TIM_Base_MspInit+0xf0>)
 8001376:	f000 fd85 	bl	8001e84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	2100      	movs	r1, #0
 800137e:	201d      	movs	r0, #29
 8001380:	f000 fcb7 	bl	8001cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001384:	201d      	movs	r0, #29
 8001386:	f000 fcd0 	bl	8001d2a <HAL_NVIC_EnableIRQ>
}
 800138a:	e012      	b.n	80013b2 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM11)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a0e      	ldr	r2, [pc, #56]	@ (80013cc <HAL_TIM_Base_MspInit+0xf4>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d10d      	bne.n	80013b2 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	4b09      	ldr	r3, [pc, #36]	@ (80013c0 <HAL_TIM_Base_MspInit+0xe8>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139e:	4a08      	ldr	r2, [pc, #32]	@ (80013c0 <HAL_TIM_Base_MspInit+0xe8>)
 80013a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013a6:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <HAL_TIM_Base_MspInit+0xe8>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
}
 80013b2:	bf00      	nop
 80013b4:	3730      	adds	r7, #48	@ 0x30
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40010000 	.word	0x40010000
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40000400 	.word	0x40000400
 80013c8:	40020000 	.word	0x40020000
 80013cc:	40014800 	.word	0x40014800

080013d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b088      	sub	sp, #32
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 030c 	add.w	r3, r7, #12
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a12      	ldr	r2, [pc, #72]	@ (8001438 <HAL_TIM_MspPostInit+0x68>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d11e      	bne.n	8001430 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	4b11      	ldr	r3, [pc, #68]	@ (800143c <HAL_TIM_MspPostInit+0x6c>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	4a10      	ldr	r2, [pc, #64]	@ (800143c <HAL_TIM_MspPostInit+0x6c>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6313      	str	r3, [r2, #48]	@ 0x30
 8001402:	4b0e      	ldr	r3, [pc, #56]	@ (800143c <HAL_TIM_MspPostInit+0x6c>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = SERVO_Pin;
 800140e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001412:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001420:	2301      	movs	r3, #1
 8001422:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	4619      	mov	r1, r3
 800142a:	4805      	ldr	r0, [pc, #20]	@ (8001440 <HAL_TIM_MspPostInit+0x70>)
 800142c:	f000 fd2a 	bl	8001e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001430:	bf00      	nop
 8001432:	3720      	adds	r7, #32
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40010000 	.word	0x40010000
 800143c:	40023800 	.word	0x40023800
 8001440:	40020000 	.word	0x40020000

08001444 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	@ 0x28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a1d      	ldr	r2, [pc, #116]	@ (80014d8 <HAL_UART_MspInit+0x94>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d133      	bne.n	80014ce <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	4b1c      	ldr	r3, [pc, #112]	@ (80014dc <HAL_UART_MspInit+0x98>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146e:	4a1b      	ldr	r2, [pc, #108]	@ (80014dc <HAL_UART_MspInit+0x98>)
 8001470:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001474:	6413      	str	r3, [r2, #64]	@ 0x40
 8001476:	4b19      	ldr	r3, [pc, #100]	@ (80014dc <HAL_UART_MspInit+0x98>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	4b15      	ldr	r3, [pc, #84]	@ (80014dc <HAL_UART_MspInit+0x98>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	4a14      	ldr	r2, [pc, #80]	@ (80014dc <HAL_UART_MspInit+0x98>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6313      	str	r3, [r2, #48]	@ 0x30
 8001492:	4b12      	ldr	r3, [pc, #72]	@ (80014dc <HAL_UART_MspInit+0x98>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800149e:	230c      	movs	r3, #12
 80014a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a2:	2302      	movs	r3, #2
 80014a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014aa:	2303      	movs	r3, #3
 80014ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014ae:	2307      	movs	r3, #7
 80014b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b2:	f107 0314 	add.w	r3, r7, #20
 80014b6:	4619      	mov	r1, r3
 80014b8:	4809      	ldr	r0, [pc, #36]	@ (80014e0 <HAL_UART_MspInit+0x9c>)
 80014ba:	f000 fce3 	bl	8001e84 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2100      	movs	r1, #0
 80014c2:	2026      	movs	r0, #38	@ 0x26
 80014c4:	f000 fc15 	bl	8001cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014c8:	2026      	movs	r0, #38	@ 0x26
 80014ca:	f000 fc2e 	bl	8001d2a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80014ce:	bf00      	nop
 80014d0:	3728      	adds	r7, #40	@ 0x28
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40004400 	.word	0x40004400
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40020000 	.word	0x40020000

080014e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <NMI_Handler+0x4>

080014ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <HardFault_Handler+0x4>

080014f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f8:	bf00      	nop
 80014fa:	e7fd      	b.n	80014f8 <MemManage_Handler+0x4>

080014fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <BusFault_Handler+0x4>

08001504 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <UsageFault_Handler+0x4>

0800150c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800153a:	f000 fabb 	bl	8001ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001548:	4802      	ldr	r0, [pc, #8]	@ (8001554 <TIM3_IRQHandler+0x10>)
 800154a:	f001 fdb9 	bl	80030c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200000cc 	.word	0x200000cc

08001558 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800155c:	4802      	ldr	r0, [pc, #8]	@ (8001568 <USART2_IRQHandler+0x10>)
 800155e:	f002 fefb 	bl	8004358 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	2000015c 	.word	0x2000015c

0800156c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
 800157c:	e00a      	b.n	8001594 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800157e:	f3af 8000 	nop.w
 8001582:	4601      	mov	r1, r0
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	1c5a      	adds	r2, r3, #1
 8001588:	60ba      	str	r2, [r7, #8]
 800158a:	b2ca      	uxtb	r2, r1
 800158c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	3301      	adds	r3, #1
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	697a      	ldr	r2, [r7, #20]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	429a      	cmp	r2, r3
 800159a:	dbf0      	blt.n	800157e <_read+0x12>
  }

  return len;
 800159c:	687b      	ldr	r3, [r7, #4]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
 80015c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015ce:	605a      	str	r2, [r3, #4]
  return 0;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <_isatty>:

int _isatty(int file)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015e6:	2301      	movs	r3, #1
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
	...

08001610 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001618:	4a14      	ldr	r2, [pc, #80]	@ (800166c <_sbrk+0x5c>)
 800161a:	4b15      	ldr	r3, [pc, #84]	@ (8001670 <_sbrk+0x60>)
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001624:	4b13      	ldr	r3, [pc, #76]	@ (8001674 <_sbrk+0x64>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d102      	bne.n	8001632 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800162c:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <_sbrk+0x64>)
 800162e:	4a12      	ldr	r2, [pc, #72]	@ (8001678 <_sbrk+0x68>)
 8001630:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001632:	4b10      	ldr	r3, [pc, #64]	@ (8001674 <_sbrk+0x64>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	429a      	cmp	r2, r3
 800163e:	d207      	bcs.n	8001650 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001640:	f003 ffce 	bl	80055e0 <__errno>
 8001644:	4603      	mov	r3, r0
 8001646:	220c      	movs	r2, #12
 8001648:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800164a:	f04f 33ff 	mov.w	r3, #4294967295
 800164e:	e009      	b.n	8001664 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001650:	4b08      	ldr	r3, [pc, #32]	@ (8001674 <_sbrk+0x64>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001656:	4b07      	ldr	r3, [pc, #28]	@ (8001674 <_sbrk+0x64>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4413      	add	r3, r2
 800165e:	4a05      	ldr	r2, [pc, #20]	@ (8001674 <_sbrk+0x64>)
 8001660:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001662:	68fb      	ldr	r3, [r7, #12]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20020000 	.word	0x20020000
 8001670:	00000400 	.word	0x00000400
 8001674:	200001a4 	.word	0x200001a4
 8001678:	200003b0 	.word	0x200003b0

0800167c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001680:	4b06      	ldr	r3, [pc, #24]	@ (800169c <SystemInit+0x20>)
 8001682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001686:	4a05      	ldr	r2, [pc, #20]	@ (800169c <SystemInit+0x20>)
 8001688:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800168c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <_write>:
uint8_t rxBuffer[rxBufferMax];  //circle buffer = ring buffer
int rxBufferReadIndex; //읽기 위치
int rxBufferWriteIndex;


int _write(int file, char *p, int len){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(myHuart, (uint8_t *)p, len, 10);
 80016ac:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <_write+0x28>)
 80016ae:	6818      	ldr	r0, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	230a      	movs	r3, #10
 80016b6:	68b9      	ldr	r1, [r7, #8]
 80016b8:	f002 fd9e 	bl	80041f8 <HAL_UART_Transmit>
	return len;
 80016bc:	687b      	ldr	r3, [r7, #4]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200001a8 	.word	0x200001a8

080016cc <HAL_UART_RxCpltCallback>:

// 수신 인터럽트(interrupt = event) 콜백(listner, isr)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	//수신된 문자 저장
	rxBuffer[rxBufferWriteIndex++] = rxCharacter;
 80016d4:	4b10      	ldr	r3, [pc, #64]	@ (8001718 <HAL_UART_RxCpltCallback+0x4c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	1c5a      	adds	r2, r3, #1
 80016da:	490f      	ldr	r1, [pc, #60]	@ (8001718 <HAL_UART_RxCpltCallback+0x4c>)
 80016dc:	600a      	str	r2, [r1, #0]
 80016de:	4a0f      	ldr	r2, [pc, #60]	@ (800171c <HAL_UART_RxCpltCallback+0x50>)
 80016e0:	7811      	ldrb	r1, [r2, #0]
 80016e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001720 <HAL_UART_RxCpltCallback+0x54>)
 80016e4:	54d1      	strb	r1, [r2, r3]
	//최대값 도달시 처음으로
	rxBufferWriteIndex %=rxBufferMax;
 80016e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001718 <HAL_UART_RxCpltCallback+0x4c>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001724 <HAL_UART_RxCpltCallback+0x58>)
 80016ec:	fb83 1302 	smull	r1, r3, r3, r2
 80016f0:	1159      	asrs	r1, r3, #5
 80016f2:	17d3      	asrs	r3, r2, #31
 80016f4:	1acb      	subs	r3, r1, r3
 80016f6:	2164      	movs	r1, #100	@ 0x64
 80016f8:	fb01 f303 	mul.w	r3, r1, r3
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	4a06      	ldr	r2, [pc, #24]	@ (8001718 <HAL_UART_RxCpltCallback+0x4c>)
 8001700:	6013      	str	r3, [r2, #0]
	//인터럽트 재 장전
	HAL_UART_Receive_IT(myHuart, &rxCharacter, 1);
 8001702:	4b09      	ldr	r3, [pc, #36]	@ (8001728 <HAL_UART_RxCpltCallback+0x5c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2201      	movs	r2, #1
 8001708:	4904      	ldr	r1, [pc, #16]	@ (800171c <HAL_UART_RxCpltCallback+0x50>)
 800170a:	4618      	mov	r0, r3
 800170c:	f002 fdff 	bl	800430e <HAL_UART_Receive_IT>
}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000218 	.word	0x20000218
 800171c:	200001ac 	.word	0x200001ac
 8001720:	200001b0 	.word	0x200001b0
 8001724:	51eb851f 	.word	0x51eb851f
 8001728:	200001a8 	.word	0x200001a8

0800172c <initUart>:

//uart 장치 초기화
void initUart(UART_HandleTypeDef *inHuart){
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	//uart 장치 주소 백업
	myHuart = inHuart;
 8001734:	4a06      	ldr	r2, [pc, #24]	@ (8001750 <initUart+0x24>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6013      	str	r3, [r2, #0]
	//인터럽트 장전
	HAL_UART_Receive_IT(myHuart, &rxCharacter, 1);
 800173a:	4b05      	ldr	r3, [pc, #20]	@ (8001750 <initUart+0x24>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2201      	movs	r2, #1
 8001740:	4904      	ldr	r1, [pc, #16]	@ (8001754 <initUart+0x28>)
 8001742:	4618      	mov	r0, r3
 8001744:	f002 fde3 	bl	800430e <HAL_UART_Receive_IT>
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	200001a8 	.word	0x200001a8
 8001754:	200001ac 	.word	0x200001ac

08001758 <getUart>:

char getUart(){
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
	char result;
	if(rxBufferReadIndex == rxBufferWriteIndex) return 0;
 800175e:	4b12      	ldr	r3, [pc, #72]	@ (80017a8 <getUart+0x50>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	4b12      	ldr	r3, [pc, #72]	@ (80017ac <getUart+0x54>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	429a      	cmp	r2, r3
 8001768:	d101      	bne.n	800176e <getUart+0x16>
 800176a:	2300      	movs	r3, #0
 800176c:	e016      	b.n	800179c <getUart+0x44>
	result = rxBuffer[rxBufferReadIndex++];
 800176e:	4b0e      	ldr	r3, [pc, #56]	@ (80017a8 <getUart+0x50>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	1c5a      	adds	r2, r3, #1
 8001774:	490c      	ldr	r1, [pc, #48]	@ (80017a8 <getUart+0x50>)
 8001776:	600a      	str	r2, [r1, #0]
 8001778:	4a0d      	ldr	r2, [pc, #52]	@ (80017b0 <getUart+0x58>)
 800177a:	5cd3      	ldrb	r3, [r2, r3]
 800177c:	71fb      	strb	r3, [r7, #7]
	rxBufferReadIndex %= rxBufferMax;
 800177e:	4b0a      	ldr	r3, [pc, #40]	@ (80017a8 <getUart+0x50>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	4b0c      	ldr	r3, [pc, #48]	@ (80017b4 <getUart+0x5c>)
 8001784:	fb83 1302 	smull	r1, r3, r3, r2
 8001788:	1159      	asrs	r1, r3, #5
 800178a:	17d3      	asrs	r3, r2, #31
 800178c:	1acb      	subs	r3, r1, r3
 800178e:	2164      	movs	r1, #100	@ 0x64
 8001790:	fb01 f303 	mul.w	r3, r1, r3
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	4a04      	ldr	r2, [pc, #16]	@ (80017a8 <getUart+0x50>)
 8001798:	6013      	str	r3, [r2, #0]
	return result;
 800179a:	79fb      	ldrb	r3, [r7, #7]
}
 800179c:	4618      	mov	r0, r3
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	20000214 	.word	0x20000214
 80017ac:	20000218 	.word	0x20000218
 80017b0:	200001b0 	.word	0x200001b0
 80017b4:	51eb851f 	.word	0x51eb851f

080017b8 <getMessage>:

char*getMessage(){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
	static char message[50];
	static uint8_t messageCount = 0;
	char ch=getUart();
 80017be:	f7ff ffcb 	bl	8001758 <getUart>
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
	if(ch!=0){
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d01b      	beq.n	8001804 <getMessage+0x4c>
		if(ch=='\n'||ch=='\r'){
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	2b0a      	cmp	r3, #10
 80017d0:	d002      	beq.n	80017d8 <getMessage+0x20>
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	2b0d      	cmp	r3, #13
 80017d6:	d108      	bne.n	80017ea <getMessage+0x32>
			messageCount=0;
 80017d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001810 <getMessage+0x58>)
 80017da:	2200      	movs	r2, #0
 80017dc:	701a      	strb	r2, [r3, #0]
			memset(message,0,50);
 80017de:	2232      	movs	r2, #50	@ 0x32
 80017e0:	2100      	movs	r1, #0
 80017e2:	480c      	ldr	r0, [pc, #48]	@ (8001814 <getMessage+0x5c>)
 80017e4:	f003 fead 	bl	8005542 <memset>
 80017e8:	e00c      	b.n	8001804 <getMessage+0x4c>
		}
		else if(ch>=0x20){
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	2b1f      	cmp	r3, #31
 80017ee:	d909      	bls.n	8001804 <getMessage+0x4c>
			message[messageCount++] = ch;
 80017f0:	4b07      	ldr	r3, [pc, #28]	@ (8001810 <getMessage+0x58>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	1c5a      	adds	r2, r3, #1
 80017f6:	b2d1      	uxtb	r1, r2
 80017f8:	4a05      	ldr	r2, [pc, #20]	@ (8001810 <getMessage+0x58>)
 80017fa:	7011      	strb	r1, [r2, #0]
 80017fc:	4619      	mov	r1, r3
 80017fe:	4a05      	ldr	r2, [pc, #20]	@ (8001814 <getMessage+0x5c>)
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	5453      	strb	r3, [r2, r1]
		}
	}
	return message;
 8001804:	4b03      	ldr	r3, [pc, #12]	@ (8001814 <getMessage+0x5c>)
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	2000021c 	.word	0x2000021c
 8001814:	20000220 	.word	0x20000220

08001818 <HAL_TIM_IC_CaptureCallback>:
bool isFirstCapture;

TIM_HandleTypeDef *myHtim;

// tim3의 interrupt callback
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	7f1b      	ldrb	r3, [r3, #28]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d17c      	bne.n	8001922 <HAL_TIM_IC_CaptureCallback+0x10a>
		if(isFirstCapture == true){
 8001828:	4b43      	ldr	r3, [pc, #268]	@ (8001938 <HAL_TIM_IC_CaptureCallback+0x120>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d01b      	beq.n	8001868 <HAL_TIM_IC_CaptureCallback+0x50>
			// IC_VAL1에 상승 엣지 시간 저장
			IC_VAL1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001830:	2100      	movs	r1, #0
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f001 ff5a 	bl	80036ec <HAL_TIM_ReadCapturedValue>
 8001838:	4603      	mov	r3, r0
 800183a:	b29a      	uxth	r2, r3
 800183c:	4b3f      	ldr	r3, [pc, #252]	@ (800193c <HAL_TIM_IC_CaptureCallback+0x124>)
 800183e:	801a      	strh	r2, [r3, #0]
			// 하강 엣지 검출 설정
			isFirstCapture = false;
 8001840:	4b3d      	ldr	r3, [pc, #244]	@ (8001938 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001842:	2200      	movs	r2, #0
 8001844:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_FALLING);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6a1a      	ldr	r2, [r3, #32]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 020a 	bic.w	r2, r2, #10
 8001854:	621a      	str	r2, [r3, #32]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6a1a      	ldr	r2, [r3, #32]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f042 0202 	orr.w	r2, r2, #2
 8001864:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_RISING);
			//인터럽트 끄기
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
		}
	}
}
 8001866:	e05c      	b.n	8001922 <HAL_TIM_IC_CaptureCallback+0x10a>
			IC_VAL2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001868:	2100      	movs	r1, #0
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f001 ff3e 	bl	80036ec <HAL_TIM_ReadCapturedValue>
 8001870:	4603      	mov	r3, r0
 8001872:	b29a      	uxth	r2, r3
 8001874:	4b32      	ldr	r3, [pc, #200]	@ (8001940 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001876:	801a      	strh	r2, [r3, #0]
			if(IC_VAL2>IC_VAL1){
 8001878:	4b31      	ldr	r3, [pc, #196]	@ (8001940 <HAL_TIM_IC_CaptureCallback+0x128>)
 800187a:	881a      	ldrh	r2, [r3, #0]
 800187c:	4b2f      	ldr	r3, [pc, #188]	@ (800193c <HAL_TIM_IC_CaptureCallback+0x124>)
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d908      	bls.n	8001896 <HAL_TIM_IC_CaptureCallback+0x7e>
				difference = IC_VAL2 - IC_VAL1;
 8001884:	4b2e      	ldr	r3, [pc, #184]	@ (8001940 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001886:	881a      	ldrh	r2, [r3, #0]
 8001888:	4b2c      	ldr	r3, [pc, #176]	@ (800193c <HAL_TIM_IC_CaptureCallback+0x124>)
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	b29a      	uxth	r2, r3
 8001890:	4b2c      	ldr	r3, [pc, #176]	@ (8001944 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001892:	801a      	strh	r2, [r3, #0]
 8001894:	e009      	b.n	80018aa <HAL_TIM_IC_CaptureCallback+0x92>
				difference = (65535-IC_VAL1)+IC_VAL2;//V1이 V2보다 클 때(cnt가 최대를 넘어간 경우)
 8001896:	4b2a      	ldr	r3, [pc, #168]	@ (8001940 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001898:	881a      	ldrh	r2, [r3, #0]
 800189a:	4b28      	ldr	r3, [pc, #160]	@ (800193c <HAL_TIM_IC_CaptureCallback+0x124>)
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	3b01      	subs	r3, #1
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	4b27      	ldr	r3, [pc, #156]	@ (8001944 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80018a8:	801a      	strh	r2, [r3, #0]
			distance = (uint16_t)((float)difference*0.034/2);
 80018aa:	4b26      	ldr	r3, [pc, #152]	@ (8001944 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	ee07 3a90 	vmov	s15, r3
 80018b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018b6:	ee17 0a90 	vmov	r0, s15
 80018ba:	f7fe fe4d 	bl	8000558 <__aeabi_f2d>
 80018be:	a31c      	add	r3, pc, #112	@ (adr r3, 8001930 <HAL_TIM_IC_CaptureCallback+0x118>)
 80018c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c4:	f7fe fea0 	bl	8000608 <__aeabi_dmul>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4610      	mov	r0, r2
 80018ce:	4619      	mov	r1, r3
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80018d8:	f7fe ffc0 	bl	800085c <__aeabi_ddiv>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4610      	mov	r0, r2
 80018e2:	4619      	mov	r1, r3
 80018e4:	f7ff f8a2 	bl	8000a2c <__aeabi_d2uiz>
 80018e8:	4603      	mov	r3, r0
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	4b16      	ldr	r3, [pc, #88]	@ (8001948 <HAL_TIM_IC_CaptureCallback+0x130>)
 80018ee:	801a      	strh	r2, [r3, #0]
			isFirstCapture = true;
 80018f0:	4b11      	ldr	r3, [pc, #68]	@ (8001938 <HAL_TIM_IC_CaptureCallback+0x120>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,TIM_INPUTCHANNELPOLARITY_RISING);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6a1a      	ldr	r2, [r3, #32]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 020a 	bic.w	r2, r2, #10
 8001904:	621a      	str	r2, [r3, #32]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6a12      	ldr	r2, [r2, #32]
 8001910:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68da      	ldr	r2, [r3, #12]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f022 0202 	bic.w	r2, r2, #2
 8001920:	60da      	str	r2, [r3, #12]
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	f3af 8000 	nop.w
 8001930:	b020c49c 	.word	0xb020c49c
 8001934:	3fa16872 	.word	0x3fa16872
 8001938:	2000025a 	.word	0x2000025a
 800193c:	20000252 	.word	0x20000252
 8001940:	20000254 	.word	0x20000254
 8001944:	20000256 	.word	0x20000256
 8001948:	20000258 	.word	0x20000258

0800194c <initUltrasonic>:
void initUltrasonic(TIM_HandleTypeDef *inHtim){
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
	myHtim = inHtim;
 8001954:	4a05      	ldr	r2, [pc, #20]	@ (800196c <initUltrasonic+0x20>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6013      	str	r3, [r2, #0]
	HAL_TIM_IC_Start_IT(inHtim, TIM_CHANNEL_1);
 800195a:	2100      	movs	r1, #0
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f001 fa95 	bl	8002e8c <HAL_TIM_IC_Start_IT>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	2000025c 	.word	0x2000025c

08001970 <getDistance>:

uint16_t getDistance(){
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
	// 10us펄스 발생
	HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, 1);
 8001974:	2201      	movs	r2, #1
 8001976:	2120      	movs	r1, #32
 8001978:	480d      	ldr	r0, [pc, #52]	@ (80019b0 <getDistance+0x40>)
 800197a:	f000 fc07 	bl	800218c <HAL_GPIO_WritePin>
	delay_us(10);
 800197e:	200a      	movs	r0, #10
 8001980:	f7ff f9ec 	bl	8000d5c <delay_us>
	HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, 0);
 8001984:	2200      	movs	r2, #0
 8001986:	2120      	movs	r1, #32
 8001988:	4809      	ldr	r0, [pc, #36]	@ (80019b0 <getDistance+0x40>)
 800198a:	f000 fbff 	bl	800218c <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(myHtim, TIM_IT_CC1);
 800198e:	4b09      	ldr	r3, [pc, #36]	@ (80019b4 <getDistance+0x44>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68da      	ldr	r2, [r3, #12]
 8001996:	4b07      	ldr	r3, [pc, #28]	@ (80019b4 <getDistance+0x44>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f042 0202 	orr.w	r2, r2, #2
 80019a0:	60da      	str	r2, [r3, #12]
	HAL_Delay(66);
 80019a2:	2042      	movs	r0, #66	@ 0x42
 80019a4:	f000 f8a6 	bl	8001af4 <HAL_Delay>
	return distance;
 80019a8:	4b03      	ldr	r3, [pc, #12]	@ (80019b8 <getDistance+0x48>)
 80019aa:	881b      	ldrh	r3, [r3, #0]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40020000 	.word	0x40020000
 80019b4:	2000025c 	.word	0x2000025c
 80019b8:	20000258 	.word	0x20000258

080019bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019c0:	f7ff fe5c 	bl	800167c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019c4:	480c      	ldr	r0, [pc, #48]	@ (80019f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019c6:	490d      	ldr	r1, [pc, #52]	@ (80019fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019cc:	e002      	b.n	80019d4 <LoopCopyDataInit>

080019ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d2:	3304      	adds	r3, #4

080019d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d8:	d3f9      	bcc.n	80019ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019da:	4a0a      	ldr	r2, [pc, #40]	@ (8001a04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001a08 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e0:	e001      	b.n	80019e6 <LoopFillZerobss>

080019e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e4:	3204      	adds	r2, #4

080019e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e8:	d3fb      	bcc.n	80019e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ea:	f003 fdff 	bl	80055ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ee:	f7ff fa43 	bl	8000e78 <main>
  bx  lr    
 80019f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019fc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001a00:	080062f0 	.word	0x080062f0
  ldr r2, =_sbss
 8001a04:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001a08:	200003b0 	.word	0x200003b0

08001a0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a0c:	e7fe      	b.n	8001a0c <ADC_IRQHandler>
	...

08001a10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a14:	4b0e      	ldr	r3, [pc, #56]	@ (8001a50 <HAL_Init+0x40>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a0d      	ldr	r2, [pc, #52]	@ (8001a50 <HAL_Init+0x40>)
 8001a1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a20:	4b0b      	ldr	r3, [pc, #44]	@ (8001a50 <HAL_Init+0x40>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a0a      	ldr	r2, [pc, #40]	@ (8001a50 <HAL_Init+0x40>)
 8001a26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a2c:	4b08      	ldr	r3, [pc, #32]	@ (8001a50 <HAL_Init+0x40>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a07      	ldr	r2, [pc, #28]	@ (8001a50 <HAL_Init+0x40>)
 8001a32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a38:	2003      	movs	r0, #3
 8001a3a:	f000 f94f 	bl	8001cdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a3e:	200f      	movs	r0, #15
 8001a40:	f000 f808 	bl	8001a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a44:	f7ff fc20 	bl	8001288 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40023c00 	.word	0x40023c00

08001a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a5c:	4b12      	ldr	r3, [pc, #72]	@ (8001aa8 <HAL_InitTick+0x54>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4b12      	ldr	r3, [pc, #72]	@ (8001aac <HAL_InitTick+0x58>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	4619      	mov	r1, r3
 8001a66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 f967 	bl	8001d46 <HAL_SYSTICK_Config>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e00e      	b.n	8001aa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b0f      	cmp	r3, #15
 8001a86:	d80a      	bhi.n	8001a9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a90:	f000 f92f 	bl	8001cf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a94:	4a06      	ldr	r2, [pc, #24]	@ (8001ab0 <HAL_InitTick+0x5c>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	e000      	b.n	8001aa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	20000008 	.word	0x20000008
 8001ab0:	20000004 	.word	0x20000004

08001ab4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab8:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <HAL_IncTick+0x20>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	461a      	mov	r2, r3
 8001abe:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <HAL_IncTick+0x24>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	4a04      	ldr	r2, [pc, #16]	@ (8001ad8 <HAL_IncTick+0x24>)
 8001ac6:	6013      	str	r3, [r2, #0]
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	20000008 	.word	0x20000008
 8001ad8:	20000260 	.word	0x20000260

08001adc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae0:	4b03      	ldr	r3, [pc, #12]	@ (8001af0 <HAL_GetTick+0x14>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	20000260 	.word	0x20000260

08001af4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001afc:	f7ff ffee 	bl	8001adc <HAL_GetTick>
 8001b00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b0c:	d005      	beq.n	8001b1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b38 <HAL_Delay+0x44>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	461a      	mov	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4413      	add	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b1a:	bf00      	nop
 8001b1c:	f7ff ffde 	bl	8001adc <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d8f7      	bhi.n	8001b1c <HAL_Delay+0x28>
  {
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	bf00      	nop
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000008 	.word	0x20000008

08001b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b80 <__NVIC_SetPriorityGrouping+0x44>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b58:	4013      	ands	r3, r2
 8001b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b6e:	4a04      	ldr	r2, [pc, #16]	@ (8001b80 <__NVIC_SetPriorityGrouping+0x44>)
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	60d3      	str	r3, [r2, #12]
}
 8001b74:	bf00      	nop
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b88:	4b04      	ldr	r3, [pc, #16]	@ (8001b9c <__NVIC_GetPriorityGrouping+0x18>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	0a1b      	lsrs	r3, r3, #8
 8001b8e:	f003 0307 	and.w	r3, r3, #7
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	db0b      	blt.n	8001bca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	f003 021f 	and.w	r2, r3, #31
 8001bb8:	4907      	ldr	r1, [pc, #28]	@ (8001bd8 <__NVIC_EnableIRQ+0x38>)
 8001bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbe:	095b      	lsrs	r3, r3, #5
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	e000e100 	.word	0xe000e100

08001bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	6039      	str	r1, [r7, #0]
 8001be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	db0a      	blt.n	8001c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	490c      	ldr	r1, [pc, #48]	@ (8001c28 <__NVIC_SetPriority+0x4c>)
 8001bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfa:	0112      	lsls	r2, r2, #4
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	440b      	add	r3, r1
 8001c00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c04:	e00a      	b.n	8001c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	4908      	ldr	r1, [pc, #32]	@ (8001c2c <__NVIC_SetPriority+0x50>)
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	3b04      	subs	r3, #4
 8001c14:	0112      	lsls	r2, r2, #4
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	440b      	add	r3, r1
 8001c1a:	761a      	strb	r2, [r3, #24]
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	e000e100 	.word	0xe000e100
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b089      	sub	sp, #36	@ 0x24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	f1c3 0307 	rsb	r3, r3, #7
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	bf28      	it	cs
 8001c4e:	2304      	movcs	r3, #4
 8001c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3304      	adds	r3, #4
 8001c56:	2b06      	cmp	r3, #6
 8001c58:	d902      	bls.n	8001c60 <NVIC_EncodePriority+0x30>
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	3b03      	subs	r3, #3
 8001c5e:	e000      	b.n	8001c62 <NVIC_EncodePriority+0x32>
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c64:	f04f 32ff 	mov.w	r2, #4294967295
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43da      	mvns	r2, r3
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	401a      	ands	r2, r3
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c78:	f04f 31ff 	mov.w	r1, #4294967295
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c82:	43d9      	mvns	r1, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c88:	4313      	orrs	r3, r2
         );
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3724      	adds	r7, #36	@ 0x24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
	...

08001c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ca8:	d301      	bcc.n	8001cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001caa:	2301      	movs	r3, #1
 8001cac:	e00f      	b.n	8001cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cae:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd8 <SysTick_Config+0x40>)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cb6:	210f      	movs	r1, #15
 8001cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cbc:	f7ff ff8e 	bl	8001bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cc0:	4b05      	ldr	r3, [pc, #20]	@ (8001cd8 <SysTick_Config+0x40>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cc6:	4b04      	ldr	r3, [pc, #16]	@ (8001cd8 <SysTick_Config+0x40>)
 8001cc8:	2207      	movs	r2, #7
 8001cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	e000e010 	.word	0xe000e010

08001cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff ff29 	bl	8001b3c <__NVIC_SetPriorityGrouping>
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b086      	sub	sp, #24
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	60b9      	str	r1, [r7, #8]
 8001cfc:	607a      	str	r2, [r7, #4]
 8001cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d04:	f7ff ff3e 	bl	8001b84 <__NVIC_GetPriorityGrouping>
 8001d08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	68b9      	ldr	r1, [r7, #8]
 8001d0e:	6978      	ldr	r0, [r7, #20]
 8001d10:	f7ff ff8e 	bl	8001c30 <NVIC_EncodePriority>
 8001d14:	4602      	mov	r2, r0
 8001d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff5d 	bl	8001bdc <__NVIC_SetPriority>
}
 8001d22:	bf00      	nop
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	4603      	mov	r3, r0
 8001d32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff ff31 	bl	8001ba0 <__NVIC_EnableIRQ>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff ffa2 	bl	8001c98 <SysTick_Config>
 8001d54:	4603      	mov	r3, r0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b084      	sub	sp, #16
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d6a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d6c:	f7ff feb6 	bl	8001adc <HAL_GetTick>
 8001d70:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d008      	beq.n	8001d90 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2280      	movs	r2, #128	@ 0x80
 8001d82:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e052      	b.n	8001e36 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 0216 	bic.w	r2, r2, #22
 8001d9e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	695a      	ldr	r2, [r3, #20]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001dae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d103      	bne.n	8001dc0 <HAL_DMA_Abort+0x62>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d007      	beq.n	8001dd0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 0208 	bic.w	r2, r2, #8
 8001dce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0201 	bic.w	r2, r2, #1
 8001dde:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001de0:	e013      	b.n	8001e0a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001de2:	f7ff fe7b 	bl	8001adc <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b05      	cmp	r3, #5
 8001dee:	d90c      	bls.n	8001e0a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2220      	movs	r2, #32
 8001df4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2203      	movs	r2, #3
 8001dfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e015      	b.n	8001e36 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1e4      	bne.n	8001de2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e1c:	223f      	movs	r2, #63	@ 0x3f
 8001e1e:	409a      	lsls	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d004      	beq.n	8001e5c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2280      	movs	r2, #128	@ 0x80
 8001e56:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e00c      	b.n	8001e76 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2205      	movs	r2, #5
 8001e60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0201 	bic.w	r2, r2, #1
 8001e72:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
	...

08001e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b089      	sub	sp, #36	@ 0x24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
 8001e9e:	e159      	b.n	8002154 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	f040 8148 	bne.w	800214e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d005      	beq.n	8001ed6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d130      	bne.n	8001f38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4013      	ands	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	68da      	ldr	r2, [r3, #12]
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	091b      	lsrs	r3, r3, #4
 8001f22:	f003 0201 	and.w	r2, r3, #1
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	2b03      	cmp	r3, #3
 8001f42:	d017      	beq.n	8001f74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	2203      	movs	r2, #3
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d123      	bne.n	8001fc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	08da      	lsrs	r2, r3, #3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3208      	adds	r2, #8
 8001f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	220f      	movs	r2, #15
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	691a      	ldr	r2, [r3, #16]
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	08da      	lsrs	r2, r3, #3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3208      	adds	r2, #8
 8001fc2:	69b9      	ldr	r1, [r7, #24]
 8001fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	2203      	movs	r2, #3
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0203 	and.w	r2, r3, #3
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 80a2 	beq.w	800214e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	4b57      	ldr	r3, [pc, #348]	@ (800216c <HAL_GPIO_Init+0x2e8>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002012:	4a56      	ldr	r2, [pc, #344]	@ (800216c <HAL_GPIO_Init+0x2e8>)
 8002014:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002018:	6453      	str	r3, [r2, #68]	@ 0x44
 800201a:	4b54      	ldr	r3, [pc, #336]	@ (800216c <HAL_GPIO_Init+0x2e8>)
 800201c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002026:	4a52      	ldr	r2, [pc, #328]	@ (8002170 <HAL_GPIO_Init+0x2ec>)
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	089b      	lsrs	r3, r3, #2
 800202c:	3302      	adds	r3, #2
 800202e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002032:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	220f      	movs	r2, #15
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a49      	ldr	r2, [pc, #292]	@ (8002174 <HAL_GPIO_Init+0x2f0>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d019      	beq.n	8002086 <HAL_GPIO_Init+0x202>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a48      	ldr	r2, [pc, #288]	@ (8002178 <HAL_GPIO_Init+0x2f4>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d013      	beq.n	8002082 <HAL_GPIO_Init+0x1fe>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a47      	ldr	r2, [pc, #284]	@ (800217c <HAL_GPIO_Init+0x2f8>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d00d      	beq.n	800207e <HAL_GPIO_Init+0x1fa>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a46      	ldr	r2, [pc, #280]	@ (8002180 <HAL_GPIO_Init+0x2fc>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d007      	beq.n	800207a <HAL_GPIO_Init+0x1f6>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a45      	ldr	r2, [pc, #276]	@ (8002184 <HAL_GPIO_Init+0x300>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d101      	bne.n	8002076 <HAL_GPIO_Init+0x1f2>
 8002072:	2304      	movs	r3, #4
 8002074:	e008      	b.n	8002088 <HAL_GPIO_Init+0x204>
 8002076:	2307      	movs	r3, #7
 8002078:	e006      	b.n	8002088 <HAL_GPIO_Init+0x204>
 800207a:	2303      	movs	r3, #3
 800207c:	e004      	b.n	8002088 <HAL_GPIO_Init+0x204>
 800207e:	2302      	movs	r3, #2
 8002080:	e002      	b.n	8002088 <HAL_GPIO_Init+0x204>
 8002082:	2301      	movs	r3, #1
 8002084:	e000      	b.n	8002088 <HAL_GPIO_Init+0x204>
 8002086:	2300      	movs	r3, #0
 8002088:	69fa      	ldr	r2, [r7, #28]
 800208a:	f002 0203 	and.w	r2, r2, #3
 800208e:	0092      	lsls	r2, r2, #2
 8002090:	4093      	lsls	r3, r2
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4313      	orrs	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002098:	4935      	ldr	r1, [pc, #212]	@ (8002170 <HAL_GPIO_Init+0x2ec>)
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	089b      	lsrs	r3, r3, #2
 800209e:	3302      	adds	r3, #2
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020a6:	4b38      	ldr	r3, [pc, #224]	@ (8002188 <HAL_GPIO_Init+0x304>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	43db      	mvns	r3, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4013      	ands	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020ca:	4a2f      	ldr	r2, [pc, #188]	@ (8002188 <HAL_GPIO_Init+0x304>)
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002188 <HAL_GPIO_Init+0x304>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	43db      	mvns	r3, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020f4:	4a24      	ldr	r2, [pc, #144]	@ (8002188 <HAL_GPIO_Init+0x304>)
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020fa:	4b23      	ldr	r3, [pc, #140]	@ (8002188 <HAL_GPIO_Init+0x304>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	43db      	mvns	r3, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4013      	ands	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800211e:	4a1a      	ldr	r2, [pc, #104]	@ (8002188 <HAL_GPIO_Init+0x304>)
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002124:	4b18      	ldr	r3, [pc, #96]	@ (8002188 <HAL_GPIO_Init+0x304>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002148:	4a0f      	ldr	r2, [pc, #60]	@ (8002188 <HAL_GPIO_Init+0x304>)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	3301      	adds	r3, #1
 8002152:	61fb      	str	r3, [r7, #28]
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	2b0f      	cmp	r3, #15
 8002158:	f67f aea2 	bls.w	8001ea0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800215c:	bf00      	nop
 800215e:	bf00      	nop
 8002160:	3724      	adds	r7, #36	@ 0x24
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40023800 	.word	0x40023800
 8002170:	40013800 	.word	0x40013800
 8002174:	40020000 	.word	0x40020000
 8002178:	40020400 	.word	0x40020400
 800217c:	40020800 	.word	0x40020800
 8002180:	40020c00 	.word	0x40020c00
 8002184:	40021000 	.word	0x40021000
 8002188:	40013c00 	.word	0x40013c00

0800218c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	807b      	strh	r3, [r7, #2]
 8002198:	4613      	mov	r3, r2
 800219a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800219c:	787b      	ldrb	r3, [r7, #1]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021a2:	887a      	ldrh	r2, [r7, #2]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021a8:	e003      	b.n	80021b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021aa:	887b      	ldrh	r3, [r7, #2]
 80021ac:	041a      	lsls	r2, r3, #16
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	619a      	str	r2, [r3, #24]
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
	...

080021c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e267      	b.n	80026a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d075      	beq.n	80022ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80021de:	4b88      	ldr	r3, [pc, #544]	@ (8002400 <HAL_RCC_OscConfig+0x240>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 030c 	and.w	r3, r3, #12
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	d00c      	beq.n	8002204 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ea:	4b85      	ldr	r3, [pc, #532]	@ (8002400 <HAL_RCC_OscConfig+0x240>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80021f2:	2b08      	cmp	r3, #8
 80021f4:	d112      	bne.n	800221c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021f6:	4b82      	ldr	r3, [pc, #520]	@ (8002400 <HAL_RCC_OscConfig+0x240>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002202:	d10b      	bne.n	800221c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002204:	4b7e      	ldr	r3, [pc, #504]	@ (8002400 <HAL_RCC_OscConfig+0x240>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d05b      	beq.n	80022c8 <HAL_RCC_OscConfig+0x108>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d157      	bne.n	80022c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e242      	b.n	80026a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002224:	d106      	bne.n	8002234 <HAL_RCC_OscConfig+0x74>
 8002226:	4b76      	ldr	r3, [pc, #472]	@ (8002400 <HAL_RCC_OscConfig+0x240>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a75      	ldr	r2, [pc, #468]	@ (8002400 <HAL_RCC_OscConfig+0x240>)
 800222c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	e01d      	b.n	8002270 <HAL_RCC_OscConfig+0xb0>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800223c:	d10c      	bne.n	8002258 <HAL_RCC_OscConfig+0x98>
 800223e:	4b70      	ldr	r3, [pc, #448]	@ (8002400 <HAL_RCC_OscConfig+0x240>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a6f      	ldr	r2, [pc, #444]	@ (8002400 <HAL_RCC_OscConfig+0x240>)
 8002244:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	4b6d      	ldr	r3, [pc, #436]	@ (8002400 <HAL_RCC_OscConfig+0x240>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a6c      	ldr	r2, [pc, #432]	@ (8002400 <HAL_RCC_OscConfig+0x240>)
 8002250:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	e00b      	b.n	8002270 <HAL_RCC_OscConfig+0xb0>
 8002258:	4b69      	ldr	r3, [pc, #420]	@ (8002400 <HAL_RCC_OscConfig+0x240>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a68      	ldr	r2, [pc, #416]	@ (8002400 <HAL_RCC_OscConfig+0x240>)
 800225e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002262:	6013      	str	r3, [r2, #0]
 8002264:	4b66      	ldr	r3, [pc, #408]	@ (8002400 <HAL_RCC_OscConfig+0x240>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a65      	ldr	r2, [pc, #404]	@ (8002400 <HAL_RCC_OscConfig+0x240>)
 800226a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800226e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d013      	beq.n	80022a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002278:	f7ff fc30 	bl	8001adc <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002280:	f7ff fc2c 	bl	8001adc <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b64      	cmp	r3, #100	@ 0x64
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e207      	b.n	80026a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002292:	4b5b      	ldr	r3, [pc, #364]	@ (8002400 <HAL_RCC_OscConfig+0x240>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0f0      	beq.n	8002280 <HAL_RCC_OscConfig+0xc0>
 800229e:	e014      	b.n	80022ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a0:	f7ff fc1c 	bl	8001adc <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a8:	f7ff fc18 	bl	8001adc <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b64      	cmp	r3, #100	@ 0x64
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e1f3      	b.n	80026a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ba:	4b51      	ldr	r3, [pc, #324]	@ (8002400 <HAL_RCC_OscConfig+0x240>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0xe8>
 80022c6:	e000      	b.n	80022ca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d063      	beq.n	800239e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80022d6:	4b4a      	ldr	r3, [pc, #296]	@ (8002400 <HAL_RCC_OscConfig+0x240>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 030c 	and.w	r3, r3, #12
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00b      	beq.n	80022fa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022e2:	4b47      	ldr	r3, [pc, #284]	@ (8002400 <HAL_RCC_OscConfig+0x240>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80022ea:	2b08      	cmp	r3, #8
 80022ec:	d11c      	bne.n	8002328 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ee:	4b44      	ldr	r3, [pc, #272]	@ (8002400 <HAL_RCC_OscConfig+0x240>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d116      	bne.n	8002328 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022fa:	4b41      	ldr	r3, [pc, #260]	@ (8002400 <HAL_RCC_OscConfig+0x240>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d005      	beq.n	8002312 <HAL_RCC_OscConfig+0x152>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d001      	beq.n	8002312 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e1c7      	b.n	80026a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002312:	4b3b      	ldr	r3, [pc, #236]	@ (8002400 <HAL_RCC_OscConfig+0x240>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	4937      	ldr	r1, [pc, #220]	@ (8002400 <HAL_RCC_OscConfig+0x240>)
 8002322:	4313      	orrs	r3, r2
 8002324:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002326:	e03a      	b.n	800239e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d020      	beq.n	8002372 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002330:	4b34      	ldr	r3, [pc, #208]	@ (8002404 <HAL_RCC_OscConfig+0x244>)
 8002332:	2201      	movs	r2, #1
 8002334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002336:	f7ff fbd1 	bl	8001adc <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800233e:	f7ff fbcd 	bl	8001adc <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e1a8      	b.n	80026a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002350:	4b2b      	ldr	r3, [pc, #172]	@ (8002400 <HAL_RCC_OscConfig+0x240>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0f0      	beq.n	800233e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800235c:	4b28      	ldr	r3, [pc, #160]	@ (8002400 <HAL_RCC_OscConfig+0x240>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4925      	ldr	r1, [pc, #148]	@ (8002400 <HAL_RCC_OscConfig+0x240>)
 800236c:	4313      	orrs	r3, r2
 800236e:	600b      	str	r3, [r1, #0]
 8002370:	e015      	b.n	800239e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002372:	4b24      	ldr	r3, [pc, #144]	@ (8002404 <HAL_RCC_OscConfig+0x244>)
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002378:	f7ff fbb0 	bl	8001adc <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002380:	f7ff fbac 	bl	8001adc <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e187      	b.n	80026a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002392:	4b1b      	ldr	r3, [pc, #108]	@ (8002400 <HAL_RCC_OscConfig+0x240>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f0      	bne.n	8002380 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d036      	beq.n	8002418 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d016      	beq.n	80023e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023b2:	4b15      	ldr	r3, [pc, #84]	@ (8002408 <HAL_RCC_OscConfig+0x248>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b8:	f7ff fb90 	bl	8001adc <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023c0:	f7ff fb8c 	bl	8001adc <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e167      	b.n	80026a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002400 <HAL_RCC_OscConfig+0x240>)
 80023d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <HAL_RCC_OscConfig+0x200>
 80023de:	e01b      	b.n	8002418 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023e0:	4b09      	ldr	r3, [pc, #36]	@ (8002408 <HAL_RCC_OscConfig+0x248>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e6:	f7ff fb79 	bl	8001adc <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ec:	e00e      	b.n	800240c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ee:	f7ff fb75 	bl	8001adc <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d907      	bls.n	800240c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e150      	b.n	80026a2 <HAL_RCC_OscConfig+0x4e2>
 8002400:	40023800 	.word	0x40023800
 8002404:	42470000 	.word	0x42470000
 8002408:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800240c:	4b88      	ldr	r3, [pc, #544]	@ (8002630 <HAL_RCC_OscConfig+0x470>)
 800240e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1ea      	bne.n	80023ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 8097 	beq.w	8002554 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002426:	2300      	movs	r3, #0
 8002428:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800242a:	4b81      	ldr	r3, [pc, #516]	@ (8002630 <HAL_RCC_OscConfig+0x470>)
 800242c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10f      	bne.n	8002456 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	4b7d      	ldr	r3, [pc, #500]	@ (8002630 <HAL_RCC_OscConfig+0x470>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243e:	4a7c      	ldr	r2, [pc, #496]	@ (8002630 <HAL_RCC_OscConfig+0x470>)
 8002440:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002444:	6413      	str	r3, [r2, #64]	@ 0x40
 8002446:	4b7a      	ldr	r3, [pc, #488]	@ (8002630 <HAL_RCC_OscConfig+0x470>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002452:	2301      	movs	r3, #1
 8002454:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002456:	4b77      	ldr	r3, [pc, #476]	@ (8002634 <HAL_RCC_OscConfig+0x474>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800245e:	2b00      	cmp	r3, #0
 8002460:	d118      	bne.n	8002494 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002462:	4b74      	ldr	r3, [pc, #464]	@ (8002634 <HAL_RCC_OscConfig+0x474>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a73      	ldr	r2, [pc, #460]	@ (8002634 <HAL_RCC_OscConfig+0x474>)
 8002468:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800246c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800246e:	f7ff fb35 	bl	8001adc <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002476:	f7ff fb31 	bl	8001adc <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e10c      	b.n	80026a2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002488:	4b6a      	ldr	r3, [pc, #424]	@ (8002634 <HAL_RCC_OscConfig+0x474>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0f0      	beq.n	8002476 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d106      	bne.n	80024aa <HAL_RCC_OscConfig+0x2ea>
 800249c:	4b64      	ldr	r3, [pc, #400]	@ (8002630 <HAL_RCC_OscConfig+0x470>)
 800249e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024a0:	4a63      	ldr	r2, [pc, #396]	@ (8002630 <HAL_RCC_OscConfig+0x470>)
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80024a8:	e01c      	b.n	80024e4 <HAL_RCC_OscConfig+0x324>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	2b05      	cmp	r3, #5
 80024b0:	d10c      	bne.n	80024cc <HAL_RCC_OscConfig+0x30c>
 80024b2:	4b5f      	ldr	r3, [pc, #380]	@ (8002630 <HAL_RCC_OscConfig+0x470>)
 80024b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024b6:	4a5e      	ldr	r2, [pc, #376]	@ (8002630 <HAL_RCC_OscConfig+0x470>)
 80024b8:	f043 0304 	orr.w	r3, r3, #4
 80024bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80024be:	4b5c      	ldr	r3, [pc, #368]	@ (8002630 <HAL_RCC_OscConfig+0x470>)
 80024c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024c2:	4a5b      	ldr	r2, [pc, #364]	@ (8002630 <HAL_RCC_OscConfig+0x470>)
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80024ca:	e00b      	b.n	80024e4 <HAL_RCC_OscConfig+0x324>
 80024cc:	4b58      	ldr	r3, [pc, #352]	@ (8002630 <HAL_RCC_OscConfig+0x470>)
 80024ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024d0:	4a57      	ldr	r2, [pc, #348]	@ (8002630 <HAL_RCC_OscConfig+0x470>)
 80024d2:	f023 0301 	bic.w	r3, r3, #1
 80024d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80024d8:	4b55      	ldr	r3, [pc, #340]	@ (8002630 <HAL_RCC_OscConfig+0x470>)
 80024da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024dc:	4a54      	ldr	r2, [pc, #336]	@ (8002630 <HAL_RCC_OscConfig+0x470>)
 80024de:	f023 0304 	bic.w	r3, r3, #4
 80024e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d015      	beq.n	8002518 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ec:	f7ff faf6 	bl	8001adc <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f2:	e00a      	b.n	800250a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f4:	f7ff faf2 	bl	8001adc <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002502:	4293      	cmp	r3, r2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e0cb      	b.n	80026a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800250a:	4b49      	ldr	r3, [pc, #292]	@ (8002630 <HAL_RCC_OscConfig+0x470>)
 800250c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0ee      	beq.n	80024f4 <HAL_RCC_OscConfig+0x334>
 8002516:	e014      	b.n	8002542 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002518:	f7ff fae0 	bl	8001adc <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800251e:	e00a      	b.n	8002536 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002520:	f7ff fadc 	bl	8001adc <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800252e:	4293      	cmp	r3, r2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e0b5      	b.n	80026a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002536:	4b3e      	ldr	r3, [pc, #248]	@ (8002630 <HAL_RCC_OscConfig+0x470>)
 8002538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1ee      	bne.n	8002520 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002542:	7dfb      	ldrb	r3, [r7, #23]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d105      	bne.n	8002554 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002548:	4b39      	ldr	r3, [pc, #228]	@ (8002630 <HAL_RCC_OscConfig+0x470>)
 800254a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254c:	4a38      	ldr	r2, [pc, #224]	@ (8002630 <HAL_RCC_OscConfig+0x470>)
 800254e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002552:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 80a1 	beq.w	80026a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800255e:	4b34      	ldr	r3, [pc, #208]	@ (8002630 <HAL_RCC_OscConfig+0x470>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	2b08      	cmp	r3, #8
 8002568:	d05c      	beq.n	8002624 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	2b02      	cmp	r3, #2
 8002570:	d141      	bne.n	80025f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002572:	4b31      	ldr	r3, [pc, #196]	@ (8002638 <HAL_RCC_OscConfig+0x478>)
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002578:	f7ff fab0 	bl	8001adc <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002580:	f7ff faac 	bl	8001adc <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e087      	b.n	80026a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002592:	4b27      	ldr	r3, [pc, #156]	@ (8002630 <HAL_RCC_OscConfig+0x470>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69da      	ldr	r2, [r3, #28]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ac:	019b      	lsls	r3, r3, #6
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025b4:	085b      	lsrs	r3, r3, #1
 80025b6:	3b01      	subs	r3, #1
 80025b8:	041b      	lsls	r3, r3, #16
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025c0:	061b      	lsls	r3, r3, #24
 80025c2:	491b      	ldr	r1, [pc, #108]	@ (8002630 <HAL_RCC_OscConfig+0x470>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002638 <HAL_RCC_OscConfig+0x478>)
 80025ca:	2201      	movs	r2, #1
 80025cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ce:	f7ff fa85 	bl	8001adc <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d6:	f7ff fa81 	bl	8001adc <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e05c      	b.n	80026a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025e8:	4b11      	ldr	r3, [pc, #68]	@ (8002630 <HAL_RCC_OscConfig+0x470>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0f0      	beq.n	80025d6 <HAL_RCC_OscConfig+0x416>
 80025f4:	e054      	b.n	80026a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f6:	4b10      	ldr	r3, [pc, #64]	@ (8002638 <HAL_RCC_OscConfig+0x478>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fc:	f7ff fa6e 	bl	8001adc <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002604:	f7ff fa6a 	bl	8001adc <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e045      	b.n	80026a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002616:	4b06      	ldr	r3, [pc, #24]	@ (8002630 <HAL_RCC_OscConfig+0x470>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f0      	bne.n	8002604 <HAL_RCC_OscConfig+0x444>
 8002622:	e03d      	b.n	80026a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d107      	bne.n	800263c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e038      	b.n	80026a2 <HAL_RCC_OscConfig+0x4e2>
 8002630:	40023800 	.word	0x40023800
 8002634:	40007000 	.word	0x40007000
 8002638:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800263c:	4b1b      	ldr	r3, [pc, #108]	@ (80026ac <HAL_RCC_OscConfig+0x4ec>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d028      	beq.n	800269c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002654:	429a      	cmp	r2, r3
 8002656:	d121      	bne.n	800269c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002662:	429a      	cmp	r2, r3
 8002664:	d11a      	bne.n	800269c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800266c:	4013      	ands	r3, r2
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002672:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002674:	4293      	cmp	r3, r2
 8002676:	d111      	bne.n	800269c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002682:	085b      	lsrs	r3, r3, #1
 8002684:	3b01      	subs	r3, #1
 8002686:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002688:	429a      	cmp	r2, r3
 800268a:	d107      	bne.n	800269c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002696:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002698:	429a      	cmp	r2, r3
 800269a:	d001      	beq.n	80026a0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e000      	b.n	80026a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40023800 	.word	0x40023800

080026b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e0cc      	b.n	800285e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026c4:	4b68      	ldr	r3, [pc, #416]	@ (8002868 <HAL_RCC_ClockConfig+0x1b8>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d90c      	bls.n	80026ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d2:	4b65      	ldr	r3, [pc, #404]	@ (8002868 <HAL_RCC_ClockConfig+0x1b8>)
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026da:	4b63      	ldr	r3, [pc, #396]	@ (8002868 <HAL_RCC_ClockConfig+0x1b8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d001      	beq.n	80026ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0b8      	b.n	800285e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d020      	beq.n	800273a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002704:	4b59      	ldr	r3, [pc, #356]	@ (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	4a58      	ldr	r2, [pc, #352]	@ (800286c <HAL_RCC_ClockConfig+0x1bc>)
 800270a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800270e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800271c:	4b53      	ldr	r3, [pc, #332]	@ (800286c <HAL_RCC_ClockConfig+0x1bc>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	4a52      	ldr	r2, [pc, #328]	@ (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002722:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002726:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002728:	4b50      	ldr	r3, [pc, #320]	@ (800286c <HAL_RCC_ClockConfig+0x1bc>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	494d      	ldr	r1, [pc, #308]	@ (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	4313      	orrs	r3, r2
 8002738:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d044      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d107      	bne.n	800275e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274e:	4b47      	ldr	r3, [pc, #284]	@ (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d119      	bne.n	800278e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e07f      	b.n	800285e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d003      	beq.n	800276e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800276a:	2b03      	cmp	r3, #3
 800276c:	d107      	bne.n	800277e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800276e:	4b3f      	ldr	r3, [pc, #252]	@ (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d109      	bne.n	800278e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e06f      	b.n	800285e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800277e:	4b3b      	ldr	r3, [pc, #236]	@ (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e067      	b.n	800285e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800278e:	4b37      	ldr	r3, [pc, #220]	@ (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f023 0203 	bic.w	r2, r3, #3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	4934      	ldr	r1, [pc, #208]	@ (800286c <HAL_RCC_ClockConfig+0x1bc>)
 800279c:	4313      	orrs	r3, r2
 800279e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027a0:	f7ff f99c 	bl	8001adc <HAL_GetTick>
 80027a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a6:	e00a      	b.n	80027be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a8:	f7ff f998 	bl	8001adc <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e04f      	b.n	800285e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027be:	4b2b      	ldr	r3, [pc, #172]	@ (800286c <HAL_RCC_ClockConfig+0x1bc>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 020c 	and.w	r2, r3, #12
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d1eb      	bne.n	80027a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027d0:	4b25      	ldr	r3, [pc, #148]	@ (8002868 <HAL_RCC_ClockConfig+0x1b8>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d20c      	bcs.n	80027f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027de:	4b22      	ldr	r3, [pc, #136]	@ (8002868 <HAL_RCC_ClockConfig+0x1b8>)
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b20      	ldr	r3, [pc, #128]	@ (8002868 <HAL_RCC_ClockConfig+0x1b8>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e032      	b.n	800285e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b00      	cmp	r3, #0
 8002802:	d008      	beq.n	8002816 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002804:	4b19      	ldr	r3, [pc, #100]	@ (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	4916      	ldr	r1, [pc, #88]	@ (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002812:	4313      	orrs	r3, r2
 8002814:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	2b00      	cmp	r3, #0
 8002820:	d009      	beq.n	8002836 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002822:	4b12      	ldr	r3, [pc, #72]	@ (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	490e      	ldr	r1, [pc, #56]	@ (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	4313      	orrs	r3, r2
 8002834:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002836:	f000 f821 	bl	800287c <HAL_RCC_GetSysClockFreq>
 800283a:	4602      	mov	r2, r0
 800283c:	4b0b      	ldr	r3, [pc, #44]	@ (800286c <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	091b      	lsrs	r3, r3, #4
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	490a      	ldr	r1, [pc, #40]	@ (8002870 <HAL_RCC_ClockConfig+0x1c0>)
 8002848:	5ccb      	ldrb	r3, [r1, r3]
 800284a:	fa22 f303 	lsr.w	r3, r2, r3
 800284e:	4a09      	ldr	r2, [pc, #36]	@ (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 8002850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002852:	4b09      	ldr	r3, [pc, #36]	@ (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff f8fc 	bl	8001a54 <HAL_InitTick>

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40023c00 	.word	0x40023c00
 800286c:	40023800 	.word	0x40023800
 8002870:	08006194 	.word	0x08006194
 8002874:	20000000 	.word	0x20000000
 8002878:	20000004 	.word	0x20000004

0800287c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800287c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002880:	b090      	sub	sp, #64	@ 0x40
 8002882:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800288c:	2300      	movs	r3, #0
 800288e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002890:	2300      	movs	r3, #0
 8002892:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002894:	4b59      	ldr	r3, [pc, #356]	@ (80029fc <HAL_RCC_GetSysClockFreq+0x180>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 030c 	and.w	r3, r3, #12
 800289c:	2b08      	cmp	r3, #8
 800289e:	d00d      	beq.n	80028bc <HAL_RCC_GetSysClockFreq+0x40>
 80028a0:	2b08      	cmp	r3, #8
 80028a2:	f200 80a1 	bhi.w	80029e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d002      	beq.n	80028b0 <HAL_RCC_GetSysClockFreq+0x34>
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	d003      	beq.n	80028b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80028ae:	e09b      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028b0:	4b53      	ldr	r3, [pc, #332]	@ (8002a00 <HAL_RCC_GetSysClockFreq+0x184>)
 80028b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80028b4:	e09b      	b.n	80029ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028b6:	4b53      	ldr	r3, [pc, #332]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x188>)
 80028b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80028ba:	e098      	b.n	80029ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028bc:	4b4f      	ldr	r3, [pc, #316]	@ (80029fc <HAL_RCC_GetSysClockFreq+0x180>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028c4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028c6:	4b4d      	ldr	r3, [pc, #308]	@ (80029fc <HAL_RCC_GetSysClockFreq+0x180>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d028      	beq.n	8002924 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028d2:	4b4a      	ldr	r3, [pc, #296]	@ (80029fc <HAL_RCC_GetSysClockFreq+0x180>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	099b      	lsrs	r3, r3, #6
 80028d8:	2200      	movs	r2, #0
 80028da:	623b      	str	r3, [r7, #32]
 80028dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80028de:	6a3b      	ldr	r3, [r7, #32]
 80028e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80028e4:	2100      	movs	r1, #0
 80028e6:	4b47      	ldr	r3, [pc, #284]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x188>)
 80028e8:	fb03 f201 	mul.w	r2, r3, r1
 80028ec:	2300      	movs	r3, #0
 80028ee:	fb00 f303 	mul.w	r3, r0, r3
 80028f2:	4413      	add	r3, r2
 80028f4:	4a43      	ldr	r2, [pc, #268]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x188>)
 80028f6:	fba0 1202 	umull	r1, r2, r0, r2
 80028fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028fc:	460a      	mov	r2, r1
 80028fe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002900:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002902:	4413      	add	r3, r2
 8002904:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002908:	2200      	movs	r2, #0
 800290a:	61bb      	str	r3, [r7, #24]
 800290c:	61fa      	str	r2, [r7, #28]
 800290e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002912:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002916:	f7fe f8a9 	bl	8000a6c <__aeabi_uldivmod>
 800291a:	4602      	mov	r2, r0
 800291c:	460b      	mov	r3, r1
 800291e:	4613      	mov	r3, r2
 8002920:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002922:	e053      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002924:	4b35      	ldr	r3, [pc, #212]	@ (80029fc <HAL_RCC_GetSysClockFreq+0x180>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	099b      	lsrs	r3, r3, #6
 800292a:	2200      	movs	r2, #0
 800292c:	613b      	str	r3, [r7, #16]
 800292e:	617a      	str	r2, [r7, #20]
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002936:	f04f 0b00 	mov.w	fp, #0
 800293a:	4652      	mov	r2, sl
 800293c:	465b      	mov	r3, fp
 800293e:	f04f 0000 	mov.w	r0, #0
 8002942:	f04f 0100 	mov.w	r1, #0
 8002946:	0159      	lsls	r1, r3, #5
 8002948:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800294c:	0150      	lsls	r0, r2, #5
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	ebb2 080a 	subs.w	r8, r2, sl
 8002956:	eb63 090b 	sbc.w	r9, r3, fp
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	f04f 0300 	mov.w	r3, #0
 8002962:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002966:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800296a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800296e:	ebb2 0408 	subs.w	r4, r2, r8
 8002972:	eb63 0509 	sbc.w	r5, r3, r9
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	f04f 0300 	mov.w	r3, #0
 800297e:	00eb      	lsls	r3, r5, #3
 8002980:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002984:	00e2      	lsls	r2, r4, #3
 8002986:	4614      	mov	r4, r2
 8002988:	461d      	mov	r5, r3
 800298a:	eb14 030a 	adds.w	r3, r4, sl
 800298e:	603b      	str	r3, [r7, #0]
 8002990:	eb45 030b 	adc.w	r3, r5, fp
 8002994:	607b      	str	r3, [r7, #4]
 8002996:	f04f 0200 	mov.w	r2, #0
 800299a:	f04f 0300 	mov.w	r3, #0
 800299e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029a2:	4629      	mov	r1, r5
 80029a4:	028b      	lsls	r3, r1, #10
 80029a6:	4621      	mov	r1, r4
 80029a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029ac:	4621      	mov	r1, r4
 80029ae:	028a      	lsls	r2, r1, #10
 80029b0:	4610      	mov	r0, r2
 80029b2:	4619      	mov	r1, r3
 80029b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029b6:	2200      	movs	r2, #0
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	60fa      	str	r2, [r7, #12]
 80029bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029c0:	f7fe f854 	bl	8000a6c <__aeabi_uldivmod>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	4613      	mov	r3, r2
 80029ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80029cc:	4b0b      	ldr	r3, [pc, #44]	@ (80029fc <HAL_RCC_GetSysClockFreq+0x180>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	0c1b      	lsrs	r3, r3, #16
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	3301      	adds	r3, #1
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80029dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80029de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029e6:	e002      	b.n	80029ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029e8:	4b05      	ldr	r3, [pc, #20]	@ (8002a00 <HAL_RCC_GetSysClockFreq+0x184>)
 80029ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3740      	adds	r7, #64	@ 0x40
 80029f4:	46bd      	mov	sp, r7
 80029f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029fa:	bf00      	nop
 80029fc:	40023800 	.word	0x40023800
 8002a00:	00f42400 	.word	0x00f42400
 8002a04:	017d7840 	.word	0x017d7840

08002a08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a0c:	4b03      	ldr	r3, [pc, #12]	@ (8002a1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	20000000 	.word	0x20000000

08002a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a24:	f7ff fff0 	bl	8002a08 <HAL_RCC_GetHCLKFreq>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	4b05      	ldr	r3, [pc, #20]	@ (8002a40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	0a9b      	lsrs	r3, r3, #10
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	4903      	ldr	r1, [pc, #12]	@ (8002a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a36:	5ccb      	ldrb	r3, [r1, r3]
 8002a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40023800 	.word	0x40023800
 8002a44:	080061a4 	.word	0x080061a4

08002a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a4c:	f7ff ffdc 	bl	8002a08 <HAL_RCC_GetHCLKFreq>
 8002a50:	4602      	mov	r2, r0
 8002a52:	4b05      	ldr	r3, [pc, #20]	@ (8002a68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	0b5b      	lsrs	r3, r3, #13
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	4903      	ldr	r1, [pc, #12]	@ (8002a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a5e:	5ccb      	ldrb	r3, [r1, r3]
 8002a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	080061a4 	.word	0x080061a4

08002a70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e041      	b.n	8002b06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d106      	bne.n	8002a9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7fe fc1e 	bl	80012d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3304      	adds	r3, #4
 8002aac:	4619      	mov	r1, r3
 8002aae:	4610      	mov	r0, r2
 8002ab0:	f000 fe88 	bl	80037c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
	...

08002b10 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d001      	beq.n	8002b28 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e03c      	b.n	8002ba2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a1e      	ldr	r2, [pc, #120]	@ (8002bb0 <HAL_TIM_Base_Start+0xa0>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d018      	beq.n	8002b6c <HAL_TIM_Base_Start+0x5c>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b42:	d013      	beq.n	8002b6c <HAL_TIM_Base_Start+0x5c>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a1a      	ldr	r2, [pc, #104]	@ (8002bb4 <HAL_TIM_Base_Start+0xa4>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d00e      	beq.n	8002b6c <HAL_TIM_Base_Start+0x5c>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a19      	ldr	r2, [pc, #100]	@ (8002bb8 <HAL_TIM_Base_Start+0xa8>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d009      	beq.n	8002b6c <HAL_TIM_Base_Start+0x5c>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a17      	ldr	r2, [pc, #92]	@ (8002bbc <HAL_TIM_Base_Start+0xac>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d004      	beq.n	8002b6c <HAL_TIM_Base_Start+0x5c>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a16      	ldr	r2, [pc, #88]	@ (8002bc0 <HAL_TIM_Base_Start+0xb0>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d111      	bne.n	8002b90 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2b06      	cmp	r3, #6
 8002b7c:	d010      	beq.n	8002ba0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f042 0201 	orr.w	r2, r2, #1
 8002b8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b8e:	e007      	b.n	8002ba0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 0201 	orr.w	r2, r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	40010000 	.word	0x40010000
 8002bb4:	40000400 	.word	0x40000400
 8002bb8:	40000800 	.word	0x40000800
 8002bbc:	40000c00 	.word	0x40000c00
 8002bc0:	40014000 	.word	0x40014000

08002bc4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e041      	b.n	8002c5a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d106      	bne.n	8002bf0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f839 	bl	8002c62 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3304      	adds	r3, #4
 8002c00:	4619      	mov	r1, r3
 8002c02:	4610      	mov	r0, r2
 8002c04:	f000 fdde 	bl	80037c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
	...

08002c78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d109      	bne.n	8002c9c <HAL_TIM_PWM_Start+0x24>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	bf14      	ite	ne
 8002c94:	2301      	movne	r3, #1
 8002c96:	2300      	moveq	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	e022      	b.n	8002ce2 <HAL_TIM_PWM_Start+0x6a>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	d109      	bne.n	8002cb6 <HAL_TIM_PWM_Start+0x3e>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	bf14      	ite	ne
 8002cae:	2301      	movne	r3, #1
 8002cb0:	2300      	moveq	r3, #0
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	e015      	b.n	8002ce2 <HAL_TIM_PWM_Start+0x6a>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d109      	bne.n	8002cd0 <HAL_TIM_PWM_Start+0x58>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	bf14      	ite	ne
 8002cc8:	2301      	movne	r3, #1
 8002cca:	2300      	moveq	r3, #0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	e008      	b.n	8002ce2 <HAL_TIM_PWM_Start+0x6a>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	bf14      	ite	ne
 8002cdc:	2301      	movne	r3, #1
 8002cde:	2300      	moveq	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e068      	b.n	8002dbc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d104      	bne.n	8002cfa <HAL_TIM_PWM_Start+0x82>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cf8:	e013      	b.n	8002d22 <HAL_TIM_PWM_Start+0xaa>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d104      	bne.n	8002d0a <HAL_TIM_PWM_Start+0x92>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d08:	e00b      	b.n	8002d22 <HAL_TIM_PWM_Start+0xaa>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d104      	bne.n	8002d1a <HAL_TIM_PWM_Start+0xa2>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d18:	e003      	b.n	8002d22 <HAL_TIM_PWM_Start+0xaa>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2201      	movs	r2, #1
 8002d28:	6839      	ldr	r1, [r7, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f001 f91a 	bl	8003f64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a23      	ldr	r2, [pc, #140]	@ (8002dc4 <HAL_TIM_PWM_Start+0x14c>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d107      	bne.n	8002d4a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d48:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a1d      	ldr	r2, [pc, #116]	@ (8002dc4 <HAL_TIM_PWM_Start+0x14c>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d018      	beq.n	8002d86 <HAL_TIM_PWM_Start+0x10e>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d5c:	d013      	beq.n	8002d86 <HAL_TIM_PWM_Start+0x10e>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a19      	ldr	r2, [pc, #100]	@ (8002dc8 <HAL_TIM_PWM_Start+0x150>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d00e      	beq.n	8002d86 <HAL_TIM_PWM_Start+0x10e>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a17      	ldr	r2, [pc, #92]	@ (8002dcc <HAL_TIM_PWM_Start+0x154>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d009      	beq.n	8002d86 <HAL_TIM_PWM_Start+0x10e>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a16      	ldr	r2, [pc, #88]	@ (8002dd0 <HAL_TIM_PWM_Start+0x158>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d004      	beq.n	8002d86 <HAL_TIM_PWM_Start+0x10e>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a14      	ldr	r2, [pc, #80]	@ (8002dd4 <HAL_TIM_PWM_Start+0x15c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d111      	bne.n	8002daa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2b06      	cmp	r3, #6
 8002d96:	d010      	beq.n	8002dba <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 0201 	orr.w	r2, r2, #1
 8002da6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002da8:	e007      	b.n	8002dba <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f042 0201 	orr.w	r2, r2, #1
 8002db8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40010000 	.word	0x40010000
 8002dc8:	40000400 	.word	0x40000400
 8002dcc:	40000800 	.word	0x40000800
 8002dd0:	40000c00 	.word	0x40000c00
 8002dd4:	40014000 	.word	0x40014000

08002dd8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e041      	b.n	8002e6e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d106      	bne.n	8002e04 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f839 	bl	8002e76 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2202      	movs	r2, #2
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3304      	adds	r3, #4
 8002e14:	4619      	mov	r1, r3
 8002e16:	4610      	mov	r0, r2
 8002e18:	f000 fcd4 	bl	80037c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
	...

08002e8c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e96:	2300      	movs	r3, #0
 8002e98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d104      	bne.n	8002eaa <HAL_TIM_IC_Start_IT+0x1e>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	e013      	b.n	8002ed2 <HAL_TIM_IC_Start_IT+0x46>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b04      	cmp	r3, #4
 8002eae:	d104      	bne.n	8002eba <HAL_TIM_IC_Start_IT+0x2e>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	e00b      	b.n	8002ed2 <HAL_TIM_IC_Start_IT+0x46>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	d104      	bne.n	8002eca <HAL_TIM_IC_Start_IT+0x3e>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	e003      	b.n	8002ed2 <HAL_TIM_IC_Start_IT+0x46>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d104      	bne.n	8002ee4 <HAL_TIM_IC_Start_IT+0x58>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	e013      	b.n	8002f0c <HAL_TIM_IC_Start_IT+0x80>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d104      	bne.n	8002ef4 <HAL_TIM_IC_Start_IT+0x68>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	e00b      	b.n	8002f0c <HAL_TIM_IC_Start_IT+0x80>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	2b08      	cmp	r3, #8
 8002ef8:	d104      	bne.n	8002f04 <HAL_TIM_IC_Start_IT+0x78>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	e003      	b.n	8002f0c <HAL_TIM_IC_Start_IT+0x80>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f0e:	7bbb      	ldrb	r3, [r7, #14]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d102      	bne.n	8002f1a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002f14:	7b7b      	ldrb	r3, [r7, #13]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d001      	beq.n	8002f1e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e0c2      	b.n	80030a4 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d104      	bne.n	8002f2e <HAL_TIM_IC_Start_IT+0xa2>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2202      	movs	r2, #2
 8002f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f2c:	e013      	b.n	8002f56 <HAL_TIM_IC_Start_IT+0xca>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	d104      	bne.n	8002f3e <HAL_TIM_IC_Start_IT+0xb2>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f3c:	e00b      	b.n	8002f56 <HAL_TIM_IC_Start_IT+0xca>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	d104      	bne.n	8002f4e <HAL_TIM_IC_Start_IT+0xc2>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2202      	movs	r2, #2
 8002f48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f4c:	e003      	b.n	8002f56 <HAL_TIM_IC_Start_IT+0xca>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2202      	movs	r2, #2
 8002f52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d104      	bne.n	8002f66 <HAL_TIM_IC_Start_IT+0xda>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2202      	movs	r2, #2
 8002f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f64:	e013      	b.n	8002f8e <HAL_TIM_IC_Start_IT+0x102>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	2b04      	cmp	r3, #4
 8002f6a:	d104      	bne.n	8002f76 <HAL_TIM_IC_Start_IT+0xea>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f74:	e00b      	b.n	8002f8e <HAL_TIM_IC_Start_IT+0x102>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	d104      	bne.n	8002f86 <HAL_TIM_IC_Start_IT+0xfa>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2202      	movs	r2, #2
 8002f80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f84:	e003      	b.n	8002f8e <HAL_TIM_IC_Start_IT+0x102>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2202      	movs	r2, #2
 8002f8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	2b0c      	cmp	r3, #12
 8002f92:	d841      	bhi.n	8003018 <HAL_TIM_IC_Start_IT+0x18c>
 8002f94:	a201      	add	r2, pc, #4	@ (adr r2, 8002f9c <HAL_TIM_IC_Start_IT+0x110>)
 8002f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f9a:	bf00      	nop
 8002f9c:	08002fd1 	.word	0x08002fd1
 8002fa0:	08003019 	.word	0x08003019
 8002fa4:	08003019 	.word	0x08003019
 8002fa8:	08003019 	.word	0x08003019
 8002fac:	08002fe3 	.word	0x08002fe3
 8002fb0:	08003019 	.word	0x08003019
 8002fb4:	08003019 	.word	0x08003019
 8002fb8:	08003019 	.word	0x08003019
 8002fbc:	08002ff5 	.word	0x08002ff5
 8002fc0:	08003019 	.word	0x08003019
 8002fc4:	08003019 	.word	0x08003019
 8002fc8:	08003019 	.word	0x08003019
 8002fcc:	08003007 	.word	0x08003007
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68da      	ldr	r2, [r3, #12]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f042 0202 	orr.w	r2, r2, #2
 8002fde:	60da      	str	r2, [r3, #12]
      break;
 8002fe0:	e01d      	b.n	800301e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68da      	ldr	r2, [r3, #12]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 0204 	orr.w	r2, r2, #4
 8002ff0:	60da      	str	r2, [r3, #12]
      break;
 8002ff2:	e014      	b.n	800301e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68da      	ldr	r2, [r3, #12]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0208 	orr.w	r2, r2, #8
 8003002:	60da      	str	r2, [r3, #12]
      break;
 8003004:	e00b      	b.n	800301e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68da      	ldr	r2, [r3, #12]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f042 0210 	orr.w	r2, r2, #16
 8003014:	60da      	str	r2, [r3, #12]
      break;
 8003016:	e002      	b.n	800301e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	73fb      	strb	r3, [r7, #15]
      break;
 800301c:	bf00      	nop
  }

  if (status == HAL_OK)
 800301e:	7bfb      	ldrb	r3, [r7, #15]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d13e      	bne.n	80030a2 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2201      	movs	r2, #1
 800302a:	6839      	ldr	r1, [r7, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	f000 ff99 	bl	8003f64 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a1d      	ldr	r2, [pc, #116]	@ (80030ac <HAL_TIM_IC_Start_IT+0x220>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d018      	beq.n	800306e <HAL_TIM_IC_Start_IT+0x1e2>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003044:	d013      	beq.n	800306e <HAL_TIM_IC_Start_IT+0x1e2>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a19      	ldr	r2, [pc, #100]	@ (80030b0 <HAL_TIM_IC_Start_IT+0x224>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d00e      	beq.n	800306e <HAL_TIM_IC_Start_IT+0x1e2>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a17      	ldr	r2, [pc, #92]	@ (80030b4 <HAL_TIM_IC_Start_IT+0x228>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d009      	beq.n	800306e <HAL_TIM_IC_Start_IT+0x1e2>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a16      	ldr	r2, [pc, #88]	@ (80030b8 <HAL_TIM_IC_Start_IT+0x22c>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d004      	beq.n	800306e <HAL_TIM_IC_Start_IT+0x1e2>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a14      	ldr	r2, [pc, #80]	@ (80030bc <HAL_TIM_IC_Start_IT+0x230>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d111      	bne.n	8003092 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2b06      	cmp	r3, #6
 800307e:	d010      	beq.n	80030a2 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0201 	orr.w	r2, r2, #1
 800308e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003090:	e007      	b.n	80030a2 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f042 0201 	orr.w	r2, r2, #1
 80030a0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40010000 	.word	0x40010000
 80030b0:	40000400 	.word	0x40000400
 80030b4:	40000800 	.word	0x40000800
 80030b8:	40000c00 	.word	0x40000c00
 80030bc:	40014000 	.word	0x40014000

080030c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d020      	beq.n	8003124 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d01b      	beq.n	8003124 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f06f 0202 	mvn.w	r2, #2
 80030f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7fe fb84 	bl	8001818 <HAL_TIM_IC_CaptureCallback>
 8003110:	e005      	b.n	800311e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 fb38 	bl	8003788 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 fb3f 	bl	800379c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f003 0304 	and.w	r3, r3, #4
 800312a:	2b00      	cmp	r3, #0
 800312c:	d020      	beq.n	8003170 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	d01b      	beq.n	8003170 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f06f 0204 	mvn.w	r2, #4
 8003140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2202      	movs	r2, #2
 8003146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7fe fb5e 	bl	8001818 <HAL_TIM_IC_CaptureCallback>
 800315c:	e005      	b.n	800316a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 fb12 	bl	8003788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 fb19 	bl	800379c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b00      	cmp	r3, #0
 8003178:	d020      	beq.n	80031bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f003 0308 	and.w	r3, r3, #8
 8003180:	2b00      	cmp	r3, #0
 8003182:	d01b      	beq.n	80031bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f06f 0208 	mvn.w	r2, #8
 800318c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2204      	movs	r2, #4
 8003192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7fe fb38 	bl	8001818 <HAL_TIM_IC_CaptureCallback>
 80031a8:	e005      	b.n	80031b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 faec 	bl	8003788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 faf3 	bl	800379c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	f003 0310 	and.w	r3, r3, #16
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d020      	beq.n	8003208 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f003 0310 	and.w	r3, r3, #16
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d01b      	beq.n	8003208 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f06f 0210 	mvn.w	r2, #16
 80031d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2208      	movs	r2, #8
 80031de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7fe fb12 	bl	8001818 <HAL_TIM_IC_CaptureCallback>
 80031f4:	e005      	b.n	8003202 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 fac6 	bl	8003788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 facd 	bl	800379c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00c      	beq.n	800322c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	d007      	beq.n	800322c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f06f 0201 	mvn.w	r2, #1
 8003224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 faa4 	bl	8003774 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00c      	beq.n	8003250 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800323c:	2b00      	cmp	r3, #0
 800323e:	d007      	beq.n	8003250 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 ff7a 	bl	8004144 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00c      	beq.n	8003274 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003260:	2b00      	cmp	r3, #0
 8003262:	d007      	beq.n	8003274 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800326c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 fa9e 	bl	80037b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	f003 0320 	and.w	r3, r3, #32
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00c      	beq.n	8003298 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f003 0320 	and.w	r3, r3, #32
 8003284:	2b00      	cmp	r3, #0
 8003286:	d007      	beq.n	8003298 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f06f 0220 	mvn.w	r2, #32
 8003290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 ff4c 	bl	8004130 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003298:	bf00      	nop
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032ac:	2300      	movs	r3, #0
 80032ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d101      	bne.n	80032be <HAL_TIM_IC_ConfigChannel+0x1e>
 80032ba:	2302      	movs	r3, #2
 80032bc:	e088      	b.n	80033d0 <HAL_TIM_IC_ConfigChannel+0x130>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d11b      	bne.n	8003304 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80032dc:	f000 fc8a 	bl	8003bf4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	699a      	ldr	r2, [r3, #24]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 020c 	bic.w	r2, r2, #12
 80032ee:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6999      	ldr	r1, [r3, #24]
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	619a      	str	r2, [r3, #24]
 8003302:	e060      	b.n	80033c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b04      	cmp	r3, #4
 8003308:	d11c      	bne.n	8003344 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800331a:	f000 fd02 	bl	8003d22 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	699a      	ldr	r2, [r3, #24]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800332c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6999      	ldr	r1, [r3, #24]
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	021a      	lsls	r2, r3, #8
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	619a      	str	r2, [r3, #24]
 8003342:	e040      	b.n	80033c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b08      	cmp	r3, #8
 8003348:	d11b      	bne.n	8003382 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800335a:	f000 fd4f 	bl	8003dfc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	69da      	ldr	r2, [r3, #28]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 020c 	bic.w	r2, r2, #12
 800336c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	69d9      	ldr	r1, [r3, #28]
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	61da      	str	r2, [r3, #28]
 8003380:	e021      	b.n	80033c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b0c      	cmp	r3, #12
 8003386:	d11c      	bne.n	80033c2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003398:	f000 fd6c 	bl	8003e74 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	69da      	ldr	r2, [r3, #28]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80033aa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	69d9      	ldr	r1, [r3, #28]
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	021a      	lsls	r2, r3, #8
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	61da      	str	r2, [r3, #28]
 80033c0:	e001      	b.n	80033c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80033ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3718      	adds	r7, #24
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033e4:	2300      	movs	r3, #0
 80033e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80033f2:	2302      	movs	r3, #2
 80033f4:	e0ae      	b.n	8003554 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b0c      	cmp	r3, #12
 8003402:	f200 809f 	bhi.w	8003544 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003406:	a201      	add	r2, pc, #4	@ (adr r2, 800340c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340c:	08003441 	.word	0x08003441
 8003410:	08003545 	.word	0x08003545
 8003414:	08003545 	.word	0x08003545
 8003418:	08003545 	.word	0x08003545
 800341c:	08003481 	.word	0x08003481
 8003420:	08003545 	.word	0x08003545
 8003424:	08003545 	.word	0x08003545
 8003428:	08003545 	.word	0x08003545
 800342c:	080034c3 	.word	0x080034c3
 8003430:	08003545 	.word	0x08003545
 8003434:	08003545 	.word	0x08003545
 8003438:	08003545 	.word	0x08003545
 800343c:	08003503 	.word	0x08003503
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68b9      	ldr	r1, [r7, #8]
 8003446:	4618      	mov	r0, r3
 8003448:	f000 fa48 	bl	80038dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	699a      	ldr	r2, [r3, #24]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0208 	orr.w	r2, r2, #8
 800345a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	699a      	ldr	r2, [r3, #24]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0204 	bic.w	r2, r2, #4
 800346a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6999      	ldr	r1, [r3, #24]
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	691a      	ldr	r2, [r3, #16]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	619a      	str	r2, [r3, #24]
      break;
 800347e:	e064      	b.n	800354a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68b9      	ldr	r1, [r7, #8]
 8003486:	4618      	mov	r0, r3
 8003488:	f000 fa8e 	bl	80039a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699a      	ldr	r2, [r3, #24]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800349a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	699a      	ldr	r2, [r3, #24]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6999      	ldr	r1, [r3, #24]
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	021a      	lsls	r2, r3, #8
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	619a      	str	r2, [r3, #24]
      break;
 80034c0:	e043      	b.n	800354a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68b9      	ldr	r1, [r7, #8]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 fad9 	bl	8003a80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	69da      	ldr	r2, [r3, #28]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f042 0208 	orr.w	r2, r2, #8
 80034dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	69da      	ldr	r2, [r3, #28]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0204 	bic.w	r2, r2, #4
 80034ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	69d9      	ldr	r1, [r3, #28]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	691a      	ldr	r2, [r3, #16]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	61da      	str	r2, [r3, #28]
      break;
 8003500:	e023      	b.n	800354a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68b9      	ldr	r1, [r7, #8]
 8003508:	4618      	mov	r0, r3
 800350a:	f000 fb23 	bl	8003b54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	69da      	ldr	r2, [r3, #28]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800351c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	69da      	ldr	r2, [r3, #28]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800352c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	69d9      	ldr	r1, [r3, #28]
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	021a      	lsls	r2, r3, #8
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	61da      	str	r2, [r3, #28]
      break;
 8003542:	e002      	b.n	800354a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	75fb      	strb	r3, [r7, #23]
      break;
 8003548:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003552:	7dfb      	ldrb	r3, [r7, #23]
}
 8003554:	4618      	mov	r0, r3
 8003556:	3718      	adds	r7, #24
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003566:	2300      	movs	r3, #0
 8003568:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003570:	2b01      	cmp	r3, #1
 8003572:	d101      	bne.n	8003578 <HAL_TIM_ConfigClockSource+0x1c>
 8003574:	2302      	movs	r3, #2
 8003576:	e0b4      	b.n	80036e2 <HAL_TIM_ConfigClockSource+0x186>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003596:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800359e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035b0:	d03e      	beq.n	8003630 <HAL_TIM_ConfigClockSource+0xd4>
 80035b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035b6:	f200 8087 	bhi.w	80036c8 <HAL_TIM_ConfigClockSource+0x16c>
 80035ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035be:	f000 8086 	beq.w	80036ce <HAL_TIM_ConfigClockSource+0x172>
 80035c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035c6:	d87f      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x16c>
 80035c8:	2b70      	cmp	r3, #112	@ 0x70
 80035ca:	d01a      	beq.n	8003602 <HAL_TIM_ConfigClockSource+0xa6>
 80035cc:	2b70      	cmp	r3, #112	@ 0x70
 80035ce:	d87b      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x16c>
 80035d0:	2b60      	cmp	r3, #96	@ 0x60
 80035d2:	d050      	beq.n	8003676 <HAL_TIM_ConfigClockSource+0x11a>
 80035d4:	2b60      	cmp	r3, #96	@ 0x60
 80035d6:	d877      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x16c>
 80035d8:	2b50      	cmp	r3, #80	@ 0x50
 80035da:	d03c      	beq.n	8003656 <HAL_TIM_ConfigClockSource+0xfa>
 80035dc:	2b50      	cmp	r3, #80	@ 0x50
 80035de:	d873      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x16c>
 80035e0:	2b40      	cmp	r3, #64	@ 0x40
 80035e2:	d058      	beq.n	8003696 <HAL_TIM_ConfigClockSource+0x13a>
 80035e4:	2b40      	cmp	r3, #64	@ 0x40
 80035e6:	d86f      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x16c>
 80035e8:	2b30      	cmp	r3, #48	@ 0x30
 80035ea:	d064      	beq.n	80036b6 <HAL_TIM_ConfigClockSource+0x15a>
 80035ec:	2b30      	cmp	r3, #48	@ 0x30
 80035ee:	d86b      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x16c>
 80035f0:	2b20      	cmp	r3, #32
 80035f2:	d060      	beq.n	80036b6 <HAL_TIM_ConfigClockSource+0x15a>
 80035f4:	2b20      	cmp	r3, #32
 80035f6:	d867      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x16c>
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d05c      	beq.n	80036b6 <HAL_TIM_ConfigClockSource+0x15a>
 80035fc:	2b10      	cmp	r3, #16
 80035fe:	d05a      	beq.n	80036b6 <HAL_TIM_ConfigClockSource+0x15a>
 8003600:	e062      	b.n	80036c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003612:	f000 fc87 	bl	8003f24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003624:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	609a      	str	r2, [r3, #8]
      break;
 800362e:	e04f      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003640:	f000 fc70 	bl	8003f24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003652:	609a      	str	r2, [r3, #8]
      break;
 8003654:	e03c      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003662:	461a      	mov	r2, r3
 8003664:	f000 fb2e 	bl	8003cc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2150      	movs	r1, #80	@ 0x50
 800366e:	4618      	mov	r0, r3
 8003670:	f000 fc3d 	bl	8003eee <TIM_ITRx_SetConfig>
      break;
 8003674:	e02c      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003682:	461a      	mov	r2, r3
 8003684:	f000 fb8a 	bl	8003d9c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2160      	movs	r1, #96	@ 0x60
 800368e:	4618      	mov	r0, r3
 8003690:	f000 fc2d 	bl	8003eee <TIM_ITRx_SetConfig>
      break;
 8003694:	e01c      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036a2:	461a      	mov	r2, r3
 80036a4:	f000 fb0e 	bl	8003cc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2140      	movs	r1, #64	@ 0x40
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 fc1d 	bl	8003eee <TIM_ITRx_SetConfig>
      break;
 80036b4:	e00c      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4619      	mov	r1, r3
 80036c0:	4610      	mov	r0, r2
 80036c2:	f000 fc14 	bl	8003eee <TIM_ITRx_SetConfig>
      break;
 80036c6:	e003      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	73fb      	strb	r3, [r7, #15]
      break;
 80036cc:	e000      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80036ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80036e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
	...

080036ec <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b0c      	cmp	r3, #12
 80036fe:	d831      	bhi.n	8003764 <HAL_TIM_ReadCapturedValue+0x78>
 8003700:	a201      	add	r2, pc, #4	@ (adr r2, 8003708 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003706:	bf00      	nop
 8003708:	0800373d 	.word	0x0800373d
 800370c:	08003765 	.word	0x08003765
 8003710:	08003765 	.word	0x08003765
 8003714:	08003765 	.word	0x08003765
 8003718:	08003747 	.word	0x08003747
 800371c:	08003765 	.word	0x08003765
 8003720:	08003765 	.word	0x08003765
 8003724:	08003765 	.word	0x08003765
 8003728:	08003751 	.word	0x08003751
 800372c:	08003765 	.word	0x08003765
 8003730:	08003765 	.word	0x08003765
 8003734:	08003765 	.word	0x08003765
 8003738:	0800375b 	.word	0x0800375b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003742:	60fb      	str	r3, [r7, #12]

      break;
 8003744:	e00f      	b.n	8003766 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800374c:	60fb      	str	r3, [r7, #12]

      break;
 800374e:	e00a      	b.n	8003766 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003756:	60fb      	str	r3, [r7, #12]

      break;
 8003758:	e005      	b.n	8003766 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003760:	60fb      	str	r3, [r7, #12]

      break;
 8003762:	e000      	b.n	8003766 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003764:	bf00      	nop
  }

  return tmpreg;
 8003766:	68fb      	ldr	r3, [r7, #12]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a3a      	ldr	r2, [pc, #232]	@ (80038c0 <TIM_Base_SetConfig+0xfc>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d00f      	beq.n	80037fc <TIM_Base_SetConfig+0x38>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037e2:	d00b      	beq.n	80037fc <TIM_Base_SetConfig+0x38>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a37      	ldr	r2, [pc, #220]	@ (80038c4 <TIM_Base_SetConfig+0x100>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d007      	beq.n	80037fc <TIM_Base_SetConfig+0x38>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a36      	ldr	r2, [pc, #216]	@ (80038c8 <TIM_Base_SetConfig+0x104>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d003      	beq.n	80037fc <TIM_Base_SetConfig+0x38>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a35      	ldr	r2, [pc, #212]	@ (80038cc <TIM_Base_SetConfig+0x108>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d108      	bne.n	800380e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003802:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	4313      	orrs	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a2b      	ldr	r2, [pc, #172]	@ (80038c0 <TIM_Base_SetConfig+0xfc>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d01b      	beq.n	800384e <TIM_Base_SetConfig+0x8a>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800381c:	d017      	beq.n	800384e <TIM_Base_SetConfig+0x8a>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a28      	ldr	r2, [pc, #160]	@ (80038c4 <TIM_Base_SetConfig+0x100>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d013      	beq.n	800384e <TIM_Base_SetConfig+0x8a>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a27      	ldr	r2, [pc, #156]	@ (80038c8 <TIM_Base_SetConfig+0x104>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d00f      	beq.n	800384e <TIM_Base_SetConfig+0x8a>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a26      	ldr	r2, [pc, #152]	@ (80038cc <TIM_Base_SetConfig+0x108>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d00b      	beq.n	800384e <TIM_Base_SetConfig+0x8a>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a25      	ldr	r2, [pc, #148]	@ (80038d0 <TIM_Base_SetConfig+0x10c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d007      	beq.n	800384e <TIM_Base_SetConfig+0x8a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a24      	ldr	r2, [pc, #144]	@ (80038d4 <TIM_Base_SetConfig+0x110>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d003      	beq.n	800384e <TIM_Base_SetConfig+0x8a>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a23      	ldr	r2, [pc, #140]	@ (80038d8 <TIM_Base_SetConfig+0x114>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d108      	bne.n	8003860 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003854:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	4313      	orrs	r3, r2
 800385e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	4313      	orrs	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	689a      	ldr	r2, [r3, #8]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a0e      	ldr	r2, [pc, #56]	@ (80038c0 <TIM_Base_SetConfig+0xfc>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d103      	bne.n	8003894 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	691a      	ldr	r2, [r3, #16]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d105      	bne.n	80038b2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	f023 0201 	bic.w	r2, r3, #1
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	611a      	str	r2, [r3, #16]
  }
}
 80038b2:	bf00      	nop
 80038b4:	3714      	adds	r7, #20
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	40010000 	.word	0x40010000
 80038c4:	40000400 	.word	0x40000400
 80038c8:	40000800 	.word	0x40000800
 80038cc:	40000c00 	.word	0x40000c00
 80038d0:	40014000 	.word	0x40014000
 80038d4:	40014400 	.word	0x40014400
 80038d8:	40014800 	.word	0x40014800

080038dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038dc:	b480      	push	{r7}
 80038de:	b087      	sub	sp, #28
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	f023 0201 	bic.w	r2, r3, #1
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800390a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f023 0303 	bic.w	r3, r3, #3
 8003912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	4313      	orrs	r3, r2
 800391c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f023 0302 	bic.w	r3, r3, #2
 8003924:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	4313      	orrs	r3, r2
 800392e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a1c      	ldr	r2, [pc, #112]	@ (80039a4 <TIM_OC1_SetConfig+0xc8>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d10c      	bne.n	8003952 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	f023 0308 	bic.w	r3, r3, #8
 800393e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	4313      	orrs	r3, r2
 8003948:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f023 0304 	bic.w	r3, r3, #4
 8003950:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a13      	ldr	r2, [pc, #76]	@ (80039a4 <TIM_OC1_SetConfig+0xc8>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d111      	bne.n	800397e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003960:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003968:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	4313      	orrs	r3, r2
 8003972:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	4313      	orrs	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	621a      	str	r2, [r3, #32]
}
 8003998:	bf00      	nop
 800399a:	371c      	adds	r7, #28
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	40010000 	.word	0x40010000

080039a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	f023 0210 	bic.w	r2, r3, #16
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	021b      	lsls	r3, r3, #8
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f023 0320 	bic.w	r3, r3, #32
 80039f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	011b      	lsls	r3, r3, #4
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a1e      	ldr	r2, [pc, #120]	@ (8003a7c <TIM_OC2_SetConfig+0xd4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d10d      	bne.n	8003a24 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a15      	ldr	r2, [pc, #84]	@ (8003a7c <TIM_OC2_SetConfig+0xd4>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d113      	bne.n	8003a54 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	621a      	str	r2, [r3, #32]
}
 8003a6e:	bf00      	nop
 8003a70:	371c      	adds	r7, #28
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	40010000 	.word	0x40010000

08003a80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b087      	sub	sp, #28
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f023 0303 	bic.w	r3, r3, #3
 8003ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ac8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	021b      	lsls	r3, r3, #8
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a1d      	ldr	r2, [pc, #116]	@ (8003b50 <TIM_OC3_SetConfig+0xd0>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d10d      	bne.n	8003afa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ae4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	021b      	lsls	r3, r3, #8
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003af8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a14      	ldr	r2, [pc, #80]	@ (8003b50 <TIM_OC3_SetConfig+0xd0>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d113      	bne.n	8003b2a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	621a      	str	r2, [r3, #32]
}
 8003b44:	bf00      	nop
 8003b46:	371c      	adds	r7, #28
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	40010000 	.word	0x40010000

08003b54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b087      	sub	sp, #28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	021b      	lsls	r3, r3, #8
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	031b      	lsls	r3, r3, #12
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a10      	ldr	r2, [pc, #64]	@ (8003bf0 <TIM_OC4_SetConfig+0x9c>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d109      	bne.n	8003bc8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003bba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	019b      	lsls	r3, r3, #6
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	621a      	str	r2, [r3, #32]
}
 8003be2:	bf00      	nop
 8003be4:	371c      	adds	r7, #28
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	40010000 	.word	0x40010000

08003bf4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
 8003c00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	f023 0201 	bic.w	r2, r3, #1
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	4a24      	ldr	r2, [pc, #144]	@ (8003cb0 <TIM_TI1_SetConfig+0xbc>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d013      	beq.n	8003c4a <TIM_TI1_SetConfig+0x56>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c28:	d00f      	beq.n	8003c4a <TIM_TI1_SetConfig+0x56>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	4a21      	ldr	r2, [pc, #132]	@ (8003cb4 <TIM_TI1_SetConfig+0xc0>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00b      	beq.n	8003c4a <TIM_TI1_SetConfig+0x56>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4a20      	ldr	r2, [pc, #128]	@ (8003cb8 <TIM_TI1_SetConfig+0xc4>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d007      	beq.n	8003c4a <TIM_TI1_SetConfig+0x56>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	4a1f      	ldr	r2, [pc, #124]	@ (8003cbc <TIM_TI1_SetConfig+0xc8>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d003      	beq.n	8003c4a <TIM_TI1_SetConfig+0x56>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	4a1e      	ldr	r2, [pc, #120]	@ (8003cc0 <TIM_TI1_SetConfig+0xcc>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d101      	bne.n	8003c4e <TIM_TI1_SetConfig+0x5a>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e000      	b.n	8003c50 <TIM_TI1_SetConfig+0x5c>
 8003c4e:	2300      	movs	r3, #0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d008      	beq.n	8003c66 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	f023 0303 	bic.w	r3, r3, #3
 8003c5a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	e003      	b.n	8003c6e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	f043 0301 	orr.w	r3, r3, #1
 8003c6c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	011b      	lsls	r3, r3, #4
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	f023 030a 	bic.w	r3, r3, #10
 8003c88:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	f003 030a 	and.w	r3, r3, #10
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	621a      	str	r2, [r3, #32]
}
 8003ca2:	bf00      	nop
 8003ca4:	371c      	adds	r7, #28
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	40010000 	.word	0x40010000
 8003cb4:	40000400 	.word	0x40000400
 8003cb8:	40000800 	.word	0x40000800
 8003cbc:	40000c00 	.word	0x40000c00
 8003cc0:	40014000 	.word	0x40014000

08003cc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	f023 0201 	bic.w	r2, r3, #1
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003cee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	011b      	lsls	r3, r3, #4
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f023 030a 	bic.w	r3, r3, #10
 8003d00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	621a      	str	r2, [r3, #32]
}
 8003d16:	bf00      	nop
 8003d18:	371c      	adds	r7, #28
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr

08003d22 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d22:	b480      	push	{r7}
 8003d24:	b087      	sub	sp, #28
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	60f8      	str	r0, [r7, #12]
 8003d2a:	60b9      	str	r1, [r7, #8]
 8003d2c:	607a      	str	r2, [r7, #4]
 8003d2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	f023 0210 	bic.w	r2, r3, #16
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	021b      	lsls	r3, r3, #8
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	031b      	lsls	r3, r3, #12
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003d74:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	011b      	lsls	r3, r3, #4
 8003d7a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	621a      	str	r2, [r3, #32]
}
 8003d90:	bf00      	nop
 8003d92:	371c      	adds	r7, #28
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b087      	sub	sp, #28
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	f023 0210 	bic.w	r2, r3, #16
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003dc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	031b      	lsls	r3, r3, #12
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003dd8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	011b      	lsls	r3, r3, #4
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	621a      	str	r2, [r3, #32]
}
 8003df0:	bf00      	nop
 8003df2:	371c      	adds	r7, #28
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
 8003e08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	69db      	ldr	r3, [r3, #28]
 8003e20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f023 0303 	bic.w	r3, r3, #3
 8003e28:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e38:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	011b      	lsls	r3, r3, #4
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003e4c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	021b      	lsls	r3, r3, #8
 8003e52:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	621a      	str	r2, [r3, #32]
}
 8003e68:	bf00      	nop
 8003e6a:	371c      	adds	r7, #28
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b087      	sub	sp, #28
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
 8003e80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ea0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	021b      	lsls	r3, r3, #8
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003eb2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	031b      	lsls	r3, r3, #12
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003ec6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	031b      	lsls	r3, r3, #12
 8003ecc:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	621a      	str	r2, [r3, #32]
}
 8003ee2:	bf00      	nop
 8003ee4:	371c      	adds	r7, #28
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b085      	sub	sp, #20
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
 8003ef6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f043 0307 	orr.w	r3, r3, #7
 8003f10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	609a      	str	r2, [r3, #8]
}
 8003f18:	bf00      	nop
 8003f1a:	3714      	adds	r7, #20
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
 8003f30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	021a      	lsls	r2, r3, #8
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	431a      	orrs	r2, r3
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	609a      	str	r2, [r3, #8]
}
 8003f58:	bf00      	nop
 8003f5a:	371c      	adds	r7, #28
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	f003 031f 	and.w	r3, r3, #31
 8003f76:	2201      	movs	r2, #1
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6a1a      	ldr	r2, [r3, #32]
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	43db      	mvns	r3, r3
 8003f86:	401a      	ands	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6a1a      	ldr	r2, [r3, #32]
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	f003 031f 	and.w	r3, r3, #31
 8003f96:	6879      	ldr	r1, [r7, #4]
 8003f98:	fa01 f303 	lsl.w	r3, r1, r3
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	621a      	str	r2, [r3, #32]
}
 8003fa2:	bf00      	nop
 8003fa4:	371c      	adds	r7, #28
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
	...

08003fb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d101      	bne.n	8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	e050      	b.n	800406a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a1c      	ldr	r2, [pc, #112]	@ (8004078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d018      	beq.n	800403e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004014:	d013      	beq.n	800403e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a18      	ldr	r2, [pc, #96]	@ (800407c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d00e      	beq.n	800403e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a16      	ldr	r2, [pc, #88]	@ (8004080 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d009      	beq.n	800403e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a15      	ldr	r2, [pc, #84]	@ (8004084 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d004      	beq.n	800403e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a13      	ldr	r2, [pc, #76]	@ (8004088 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d10c      	bne.n	8004058 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004044:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	4313      	orrs	r3, r2
 800404e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	40010000 	.word	0x40010000
 800407c:	40000400 	.word	0x40000400
 8004080:	40000800 	.word	0x40000800
 8004084:	40000c00 	.word	0x40000c00
 8004088:	40014000 	.word	0x40014000

0800408c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004096:	2300      	movs	r3, #0
 8004098:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d101      	bne.n	80040a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80040a4:	2302      	movs	r3, #2
 80040a6:	e03d      	b.n	8004124 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	4313      	orrs	r3, r2
 8004102:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	4313      	orrs	r3, r2
 8004110:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3714      	adds	r7, #20
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e042      	b.n	80041f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d106      	bne.n	8004184 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7fd f960 	bl	8001444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2224      	movs	r2, #36	@ 0x24
 8004188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68da      	ldr	r2, [r3, #12]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800419a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 fdbd 	bl	8004d1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	691a      	ldr	r2, [r3, #16]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	695a      	ldr	r2, [r3, #20]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68da      	ldr	r2, [r3, #12]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80041d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2220      	movs	r2, #32
 80041dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2220      	movs	r2, #32
 80041e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3708      	adds	r7, #8
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b08a      	sub	sp, #40	@ 0x28
 80041fc:	af02      	add	r7, sp, #8
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	603b      	str	r3, [r7, #0]
 8004204:	4613      	mov	r3, r2
 8004206:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b20      	cmp	r3, #32
 8004216:	d175      	bne.n	8004304 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d002      	beq.n	8004224 <HAL_UART_Transmit+0x2c>
 800421e:	88fb      	ldrh	r3, [r7, #6]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d101      	bne.n	8004228 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e06e      	b.n	8004306 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2221      	movs	r2, #33	@ 0x21
 8004232:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004236:	f7fd fc51 	bl	8001adc <HAL_GetTick>
 800423a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	88fa      	ldrh	r2, [r7, #6]
 8004240:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	88fa      	ldrh	r2, [r7, #6]
 8004246:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004250:	d108      	bne.n	8004264 <HAL_UART_Transmit+0x6c>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d104      	bne.n	8004264 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800425a:	2300      	movs	r3, #0
 800425c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	61bb      	str	r3, [r7, #24]
 8004262:	e003      	b.n	800426c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004268:	2300      	movs	r3, #0
 800426a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800426c:	e02e      	b.n	80042cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2200      	movs	r2, #0
 8004276:	2180      	movs	r1, #128	@ 0x80
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f000 fb1f 	bl	80048bc <UART_WaitOnFlagUntilTimeout>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d005      	beq.n	8004290 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2220      	movs	r2, #32
 8004288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e03a      	b.n	8004306 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10b      	bne.n	80042ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	881b      	ldrh	r3, [r3, #0]
 800429a:	461a      	mov	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	3302      	adds	r3, #2
 80042aa:	61bb      	str	r3, [r7, #24]
 80042ac:	e007      	b.n	80042be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	781a      	ldrb	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	3301      	adds	r3, #1
 80042bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	3b01      	subs	r3, #1
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1cb      	bne.n	800426e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	2200      	movs	r2, #0
 80042de:	2140      	movs	r1, #64	@ 0x40
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f000 faeb 	bl	80048bc <UART_WaitOnFlagUntilTimeout>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d005      	beq.n	80042f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2220      	movs	r2, #32
 80042f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e006      	b.n	8004306 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004300:	2300      	movs	r3, #0
 8004302:	e000      	b.n	8004306 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004304:	2302      	movs	r3, #2
  }
}
 8004306:	4618      	mov	r0, r3
 8004308:	3720      	adds	r7, #32
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b084      	sub	sp, #16
 8004312:	af00      	add	r7, sp, #0
 8004314:	60f8      	str	r0, [r7, #12]
 8004316:	60b9      	str	r1, [r7, #8]
 8004318:	4613      	mov	r3, r2
 800431a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b20      	cmp	r3, #32
 8004326:	d112      	bne.n	800434e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d002      	beq.n	8004334 <HAL_UART_Receive_IT+0x26>
 800432e:	88fb      	ldrh	r3, [r7, #6]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e00b      	b.n	8004350 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800433e:	88fb      	ldrh	r3, [r7, #6]
 8004340:	461a      	mov	r2, r3
 8004342:	68b9      	ldr	r1, [r7, #8]
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 fb12 	bl	800496e <UART_Start_Receive_IT>
 800434a:	4603      	mov	r3, r0
 800434c:	e000      	b.n	8004350 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800434e:	2302      	movs	r3, #2
  }
}
 8004350:	4618      	mov	r0, r3
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b0ba      	sub	sp, #232	@ 0xe8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800437e:	2300      	movs	r3, #0
 8004380:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004384:	2300      	movs	r3, #0
 8004386:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800438a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004396:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10f      	bne.n	80043be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800439e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043a2:	f003 0320 	and.w	r3, r3, #32
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d009      	beq.n	80043be <HAL_UART_IRQHandler+0x66>
 80043aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043ae:	f003 0320 	and.w	r3, r3, #32
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 fbf2 	bl	8004ba0 <UART_Receive_IT>
      return;
 80043bc:	e25b      	b.n	8004876 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80043be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 80de 	beq.w	8004584 <HAL_UART_IRQHandler+0x22c>
 80043c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d106      	bne.n	80043e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80043d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043d8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 80d1 	beq.w	8004584 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80043e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00b      	beq.n	8004406 <HAL_UART_IRQHandler+0xae>
 80043ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d005      	beq.n	8004406 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043fe:	f043 0201 	orr.w	r2, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800440a:	f003 0304 	and.w	r3, r3, #4
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00b      	beq.n	800442a <HAL_UART_IRQHandler+0xd2>
 8004412:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	d005      	beq.n	800442a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004422:	f043 0202 	orr.w	r2, r3, #2
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800442a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00b      	beq.n	800444e <HAL_UART_IRQHandler+0xf6>
 8004436:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d005      	beq.n	800444e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004446:	f043 0204 	orr.w	r2, r3, #4
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800444e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	2b00      	cmp	r3, #0
 8004458:	d011      	beq.n	800447e <HAL_UART_IRQHandler+0x126>
 800445a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800445e:	f003 0320 	and.w	r3, r3, #32
 8004462:	2b00      	cmp	r3, #0
 8004464:	d105      	bne.n	8004472 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004466:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	d005      	beq.n	800447e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004476:	f043 0208 	orr.w	r2, r3, #8
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 81f2 	beq.w	800486c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800448c:	f003 0320 	and.w	r3, r3, #32
 8004490:	2b00      	cmp	r3, #0
 8004492:	d008      	beq.n	80044a6 <HAL_UART_IRQHandler+0x14e>
 8004494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004498:	f003 0320 	and.w	r3, r3, #32
 800449c:	2b00      	cmp	r3, #0
 800449e:	d002      	beq.n	80044a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 fb7d 	bl	8004ba0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b0:	2b40      	cmp	r3, #64	@ 0x40
 80044b2:	bf0c      	ite	eq
 80044b4:	2301      	moveq	r3, #1
 80044b6:	2300      	movne	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044c2:	f003 0308 	and.w	r3, r3, #8
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d103      	bne.n	80044d2 <HAL_UART_IRQHandler+0x17a>
 80044ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d04f      	beq.n	8004572 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 fa85 	bl	80049e2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e2:	2b40      	cmp	r3, #64	@ 0x40
 80044e4:	d141      	bne.n	800456a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	3314      	adds	r3, #20
 80044ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80044f4:	e853 3f00 	ldrex	r3, [r3]
 80044f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80044fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004500:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004504:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	3314      	adds	r3, #20
 800450e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004512:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004516:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800451e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004522:	e841 2300 	strex	r3, r2, [r1]
 8004526:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800452a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1d9      	bne.n	80044e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004536:	2b00      	cmp	r3, #0
 8004538:	d013      	beq.n	8004562 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800453e:	4a7e      	ldr	r2, [pc, #504]	@ (8004738 <HAL_UART_IRQHandler+0x3e0>)
 8004540:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004546:	4618      	mov	r0, r3
 8004548:	f7fd fc79 	bl	8001e3e <HAL_DMA_Abort_IT>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d016      	beq.n	8004580 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004556:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800455c:	4610      	mov	r0, r2
 800455e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004560:	e00e      	b.n	8004580 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f994 	bl	8004890 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004568:	e00a      	b.n	8004580 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f990 	bl	8004890 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004570:	e006      	b.n	8004580 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f98c 	bl	8004890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800457e:	e175      	b.n	800486c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004580:	bf00      	nop
    return;
 8004582:	e173      	b.n	800486c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004588:	2b01      	cmp	r3, #1
 800458a:	f040 814f 	bne.w	800482c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800458e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004592:	f003 0310 	and.w	r3, r3, #16
 8004596:	2b00      	cmp	r3, #0
 8004598:	f000 8148 	beq.w	800482c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800459c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045a0:	f003 0310 	and.w	r3, r3, #16
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 8141 	beq.w	800482c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045aa:	2300      	movs	r3, #0
 80045ac:	60bb      	str	r3, [r7, #8]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	60bb      	str	r3, [r7, #8]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	60bb      	str	r3, [r7, #8]
 80045be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ca:	2b40      	cmp	r3, #64	@ 0x40
 80045cc:	f040 80b6 	bne.w	800473c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80045dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 8145 	beq.w	8004870 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80045ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80045ee:	429a      	cmp	r2, r3
 80045f0:	f080 813e 	bcs.w	8004870 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80045fa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004606:	f000 8088 	beq.w	800471a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	330c      	adds	r3, #12
 8004610:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004614:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004618:	e853 3f00 	ldrex	r3, [r3]
 800461c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004620:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004624:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004628:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	330c      	adds	r3, #12
 8004632:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004636:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800463a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004642:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004646:	e841 2300 	strex	r3, r2, [r1]
 800464a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800464e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1d9      	bne.n	800460a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	3314      	adds	r3, #20
 800465c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004660:	e853 3f00 	ldrex	r3, [r3]
 8004664:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004666:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004668:	f023 0301 	bic.w	r3, r3, #1
 800466c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	3314      	adds	r3, #20
 8004676:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800467a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800467e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004680:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004682:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004686:	e841 2300 	strex	r3, r2, [r1]
 800468a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800468c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1e1      	bne.n	8004656 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	3314      	adds	r3, #20
 8004698:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800469c:	e853 3f00 	ldrex	r3, [r3]
 80046a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80046a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	3314      	adds	r3, #20
 80046b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80046b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80046b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80046bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80046be:	e841 2300 	strex	r3, r2, [r1]
 80046c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80046c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1e3      	bne.n	8004692 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2220      	movs	r2, #32
 80046ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	330c      	adds	r3, #12
 80046de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046e2:	e853 3f00 	ldrex	r3, [r3]
 80046e6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80046e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046ea:	f023 0310 	bic.w	r3, r3, #16
 80046ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	330c      	adds	r3, #12
 80046f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80046fc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80046fe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004700:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004702:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004704:	e841 2300 	strex	r3, r2, [r1]
 8004708:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800470a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1e3      	bne.n	80046d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004714:	4618      	mov	r0, r3
 8004716:	f7fd fb22 	bl	8001d5e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2202      	movs	r2, #2
 800471e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004728:	b29b      	uxth	r3, r3
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	b29b      	uxth	r3, r3
 800472e:	4619      	mov	r1, r3
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f8b7 	bl	80048a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004736:	e09b      	b.n	8004870 <HAL_UART_IRQHandler+0x518>
 8004738:	08004aa9 	.word	0x08004aa9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004744:	b29b      	uxth	r3, r3
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004750:	b29b      	uxth	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	f000 808e 	beq.w	8004874 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004758:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 8089 	beq.w	8004874 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	330c      	adds	r3, #12
 8004768:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800476c:	e853 3f00 	ldrex	r3, [r3]
 8004770:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004774:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004778:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	330c      	adds	r3, #12
 8004782:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004786:	647a      	str	r2, [r7, #68]	@ 0x44
 8004788:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800478c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800478e:	e841 2300 	strex	r3, r2, [r1]
 8004792:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1e3      	bne.n	8004762 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	3314      	adds	r3, #20
 80047a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a4:	e853 3f00 	ldrex	r3, [r3]
 80047a8:	623b      	str	r3, [r7, #32]
   return(result);
 80047aa:	6a3b      	ldr	r3, [r7, #32]
 80047ac:	f023 0301 	bic.w	r3, r3, #1
 80047b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	3314      	adds	r3, #20
 80047ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80047be:	633a      	str	r2, [r7, #48]	@ 0x30
 80047c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047c6:	e841 2300 	strex	r3, r2, [r1]
 80047ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1e3      	bne.n	800479a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2220      	movs	r2, #32
 80047d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	330c      	adds	r3, #12
 80047e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	e853 3f00 	ldrex	r3, [r3]
 80047ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f023 0310 	bic.w	r3, r3, #16
 80047f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	330c      	adds	r3, #12
 8004800:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004804:	61fa      	str	r2, [r7, #28]
 8004806:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004808:	69b9      	ldr	r1, [r7, #24]
 800480a:	69fa      	ldr	r2, [r7, #28]
 800480c:	e841 2300 	strex	r3, r2, [r1]
 8004810:	617b      	str	r3, [r7, #20]
   return(result);
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1e3      	bne.n	80047e0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2202      	movs	r2, #2
 800481c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800481e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004822:	4619      	mov	r1, r3
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 f83d 	bl	80048a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800482a:	e023      	b.n	8004874 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800482c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004830:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004834:	2b00      	cmp	r3, #0
 8004836:	d009      	beq.n	800484c <HAL_UART_IRQHandler+0x4f4>
 8004838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800483c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 f943 	bl	8004ad0 <UART_Transmit_IT>
    return;
 800484a:	e014      	b.n	8004876 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800484c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00e      	beq.n	8004876 <HAL_UART_IRQHandler+0x51e>
 8004858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800485c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004860:	2b00      	cmp	r3, #0
 8004862:	d008      	beq.n	8004876 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 f983 	bl	8004b70 <UART_EndTransmit_IT>
    return;
 800486a:	e004      	b.n	8004876 <HAL_UART_IRQHandler+0x51e>
    return;
 800486c:	bf00      	nop
 800486e:	e002      	b.n	8004876 <HAL_UART_IRQHandler+0x51e>
      return;
 8004870:	bf00      	nop
 8004872:	e000      	b.n	8004876 <HAL_UART_IRQHandler+0x51e>
      return;
 8004874:	bf00      	nop
  }
}
 8004876:	37e8      	adds	r7, #232	@ 0xe8
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	460b      	mov	r3, r1
 80048ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	603b      	str	r3, [r7, #0]
 80048c8:	4613      	mov	r3, r2
 80048ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048cc:	e03b      	b.n	8004946 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ce:	6a3b      	ldr	r3, [r7, #32]
 80048d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d4:	d037      	beq.n	8004946 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048d6:	f7fd f901 	bl	8001adc <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	6a3a      	ldr	r2, [r7, #32]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d302      	bcc.n	80048ec <UART_WaitOnFlagUntilTimeout+0x30>
 80048e6:	6a3b      	ldr	r3, [r7, #32]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e03a      	b.n	8004966 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	f003 0304 	and.w	r3, r3, #4
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d023      	beq.n	8004946 <UART_WaitOnFlagUntilTimeout+0x8a>
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	2b80      	cmp	r3, #128	@ 0x80
 8004902:	d020      	beq.n	8004946 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2b40      	cmp	r3, #64	@ 0x40
 8004908:	d01d      	beq.n	8004946 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0308 	and.w	r3, r3, #8
 8004914:	2b08      	cmp	r3, #8
 8004916:	d116      	bne.n	8004946 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004918:	2300      	movs	r3, #0
 800491a:	617b      	str	r3, [r7, #20]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	617b      	str	r3, [r7, #20]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	617b      	str	r3, [r7, #20]
 800492c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f000 f857 	bl	80049e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2208      	movs	r2, #8
 8004938:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e00f      	b.n	8004966 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	4013      	ands	r3, r2
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	429a      	cmp	r2, r3
 8004954:	bf0c      	ite	eq
 8004956:	2301      	moveq	r3, #1
 8004958:	2300      	movne	r3, #0
 800495a:	b2db      	uxtb	r3, r3
 800495c:	461a      	mov	r2, r3
 800495e:	79fb      	ldrb	r3, [r7, #7]
 8004960:	429a      	cmp	r2, r3
 8004962:	d0b4      	beq.n	80048ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3718      	adds	r7, #24
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800496e:	b480      	push	{r7}
 8004970:	b085      	sub	sp, #20
 8004972:	af00      	add	r7, sp, #0
 8004974:	60f8      	str	r0, [r7, #12]
 8004976:	60b9      	str	r1, [r7, #8]
 8004978:	4613      	mov	r3, r2
 800497a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	88fa      	ldrh	r2, [r7, #6]
 8004986:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	88fa      	ldrh	r2, [r7, #6]
 800498c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2222      	movs	r2, #34	@ 0x22
 8004998:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d007      	beq.n	80049b4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68da      	ldr	r2, [r3, #12]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049b2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	695a      	ldr	r2, [r3, #20]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 0201 	orr.w	r2, r2, #1
 80049c2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68da      	ldr	r2, [r3, #12]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 0220 	orr.w	r2, r2, #32
 80049d2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b095      	sub	sp, #84	@ 0x54
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	330c      	adds	r3, #12
 80049f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049f4:	e853 3f00 	ldrex	r3, [r3]
 80049f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80049fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	330c      	adds	r3, #12
 8004a08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a0a:	643a      	str	r2, [r7, #64]	@ 0x40
 8004a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a12:	e841 2300 	strex	r3, r2, [r1]
 8004a16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1e5      	bne.n	80049ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	3314      	adds	r3, #20
 8004a24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a26:	6a3b      	ldr	r3, [r7, #32]
 8004a28:	e853 3f00 	ldrex	r3, [r3]
 8004a2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	f023 0301 	bic.w	r3, r3, #1
 8004a34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	3314      	adds	r3, #20
 8004a3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a40:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a46:	e841 2300 	strex	r3, r2, [r1]
 8004a4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1e5      	bne.n	8004a1e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d119      	bne.n	8004a8e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	330c      	adds	r3, #12
 8004a60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	e853 3f00 	ldrex	r3, [r3]
 8004a68:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	f023 0310 	bic.w	r3, r3, #16
 8004a70:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	330c      	adds	r3, #12
 8004a78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a7a:	61ba      	str	r2, [r7, #24]
 8004a7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7e:	6979      	ldr	r1, [r7, #20]
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	e841 2300 	strex	r3, r2, [r1]
 8004a86:	613b      	str	r3, [r7, #16]
   return(result);
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1e5      	bne.n	8004a5a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2220      	movs	r2, #32
 8004a92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004a9c:	bf00      	nop
 8004a9e:	3754      	adds	r7, #84	@ 0x54
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f7ff fee4 	bl	8004890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ac8:	bf00      	nop
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2b21      	cmp	r3, #33	@ 0x21
 8004ae2:	d13e      	bne.n	8004b62 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004aec:	d114      	bne.n	8004b18 <UART_Transmit_IT+0x48>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d110      	bne.n	8004b18 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	461a      	mov	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b0a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a1b      	ldr	r3, [r3, #32]
 8004b10:	1c9a      	adds	r2, r3, #2
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	621a      	str	r2, [r3, #32]
 8004b16:	e008      	b.n	8004b2a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	1c59      	adds	r1, r3, #1
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	6211      	str	r1, [r2, #32]
 8004b22:	781a      	ldrb	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	3b01      	subs	r3, #1
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	4619      	mov	r1, r3
 8004b38:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10f      	bne.n	8004b5e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68da      	ldr	r2, [r3, #12]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b4c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68da      	ldr	r2, [r3, #12]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b5c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	e000      	b.n	8004b64 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b62:	2302      	movs	r3, #2
  }
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68da      	ldr	r2, [r3, #12]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b86:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f7ff fe73 	bl	800487c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3708      	adds	r7, #8
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b08c      	sub	sp, #48	@ 0x30
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b22      	cmp	r3, #34	@ 0x22
 8004bb2:	f040 80ae 	bne.w	8004d12 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bbe:	d117      	bne.n	8004bf0 <UART_Receive_IT+0x50>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d113      	bne.n	8004bf0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be8:	1c9a      	adds	r2, r3, #2
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	629a      	str	r2, [r3, #40]	@ 0x28
 8004bee:	e026      	b.n	8004c3e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c02:	d007      	beq.n	8004c14 <UART_Receive_IT+0x74>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d10a      	bne.n	8004c22 <UART_Receive_IT+0x82>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d106      	bne.n	8004c22 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	b2da      	uxtb	r2, r3
 8004c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c1e:	701a      	strb	r2, [r3, #0]
 8004c20:	e008      	b.n	8004c34 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c32:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c38:	1c5a      	adds	r2, r3, #1
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	3b01      	subs	r3, #1
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d15d      	bne.n	8004d0e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68da      	ldr	r2, [r3, #12]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 0220 	bic.w	r2, r2, #32
 8004c60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68da      	ldr	r2, [r3, #12]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c70:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	695a      	ldr	r2, [r3, #20]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 0201 	bic.w	r2, r2, #1
 8004c80:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2220      	movs	r2, #32
 8004c86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d135      	bne.n	8004d04 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	330c      	adds	r3, #12
 8004ca4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	e853 3f00 	ldrex	r3, [r3]
 8004cac:	613b      	str	r3, [r7, #16]
   return(result);
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	f023 0310 	bic.w	r3, r3, #16
 8004cb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	330c      	adds	r3, #12
 8004cbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cbe:	623a      	str	r2, [r7, #32]
 8004cc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc2:	69f9      	ldr	r1, [r7, #28]
 8004cc4:	6a3a      	ldr	r2, [r7, #32]
 8004cc6:	e841 2300 	strex	r3, r2, [r1]
 8004cca:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1e5      	bne.n	8004c9e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0310 	and.w	r3, r3, #16
 8004cdc:	2b10      	cmp	r3, #16
 8004cde:	d10a      	bne.n	8004cf6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	60fb      	str	r3, [r7, #12]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	60fb      	str	r3, [r7, #12]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	60fb      	str	r3, [r7, #12]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f7ff fdd1 	bl	80048a4 <HAL_UARTEx_RxEventCallback>
 8004d02:	e002      	b.n	8004d0a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7fc fce1 	bl	80016cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	e002      	b.n	8004d14 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	e000      	b.n	8004d14 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004d12:	2302      	movs	r3, #2
  }
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3730      	adds	r7, #48	@ 0x30
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d20:	b0c0      	sub	sp, #256	@ 0x100
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d38:	68d9      	ldr	r1, [r3, #12]
 8004d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	ea40 0301 	orr.w	r3, r0, r1
 8004d44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d4a:	689a      	ldr	r2, [r3, #8]
 8004d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	431a      	orrs	r2, r3
 8004d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004d74:	f021 010c 	bic.w	r1, r1, #12
 8004d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d82:	430b      	orrs	r3, r1
 8004d84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d96:	6999      	ldr	r1, [r3, #24]
 8004d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	ea40 0301 	orr.w	r3, r0, r1
 8004da2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	4b8f      	ldr	r3, [pc, #572]	@ (8004fe8 <UART_SetConfig+0x2cc>)
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d005      	beq.n	8004dbc <UART_SetConfig+0xa0>
 8004db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	4b8d      	ldr	r3, [pc, #564]	@ (8004fec <UART_SetConfig+0x2d0>)
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d104      	bne.n	8004dc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004dbc:	f7fd fe44 	bl	8002a48 <HAL_RCC_GetPCLK2Freq>
 8004dc0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004dc4:	e003      	b.n	8004dce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004dc6:	f7fd fe2b 	bl	8002a20 <HAL_RCC_GetPCLK1Freq>
 8004dca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dd2:	69db      	ldr	r3, [r3, #28]
 8004dd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dd8:	f040 810c 	bne.w	8004ff4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ddc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004de0:	2200      	movs	r2, #0
 8004de2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004de6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004dea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004dee:	4622      	mov	r2, r4
 8004df0:	462b      	mov	r3, r5
 8004df2:	1891      	adds	r1, r2, r2
 8004df4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004df6:	415b      	adcs	r3, r3
 8004df8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004dfa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004dfe:	4621      	mov	r1, r4
 8004e00:	eb12 0801 	adds.w	r8, r2, r1
 8004e04:	4629      	mov	r1, r5
 8004e06:	eb43 0901 	adc.w	r9, r3, r1
 8004e0a:	f04f 0200 	mov.w	r2, #0
 8004e0e:	f04f 0300 	mov.w	r3, #0
 8004e12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e1e:	4690      	mov	r8, r2
 8004e20:	4699      	mov	r9, r3
 8004e22:	4623      	mov	r3, r4
 8004e24:	eb18 0303 	adds.w	r3, r8, r3
 8004e28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e2c:	462b      	mov	r3, r5
 8004e2e:	eb49 0303 	adc.w	r3, r9, r3
 8004e32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e42:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004e46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	18db      	adds	r3, r3, r3
 8004e4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e50:	4613      	mov	r3, r2
 8004e52:	eb42 0303 	adc.w	r3, r2, r3
 8004e56:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004e5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004e60:	f7fb fe04 	bl	8000a6c <__aeabi_uldivmod>
 8004e64:	4602      	mov	r2, r0
 8004e66:	460b      	mov	r3, r1
 8004e68:	4b61      	ldr	r3, [pc, #388]	@ (8004ff0 <UART_SetConfig+0x2d4>)
 8004e6a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e6e:	095b      	lsrs	r3, r3, #5
 8004e70:	011c      	lsls	r4, r3, #4
 8004e72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e76:	2200      	movs	r2, #0
 8004e78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e7c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004e80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004e84:	4642      	mov	r2, r8
 8004e86:	464b      	mov	r3, r9
 8004e88:	1891      	adds	r1, r2, r2
 8004e8a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004e8c:	415b      	adcs	r3, r3
 8004e8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004e94:	4641      	mov	r1, r8
 8004e96:	eb12 0a01 	adds.w	sl, r2, r1
 8004e9a:	4649      	mov	r1, r9
 8004e9c:	eb43 0b01 	adc.w	fp, r3, r1
 8004ea0:	f04f 0200 	mov.w	r2, #0
 8004ea4:	f04f 0300 	mov.w	r3, #0
 8004ea8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004eac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004eb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004eb4:	4692      	mov	sl, r2
 8004eb6:	469b      	mov	fp, r3
 8004eb8:	4643      	mov	r3, r8
 8004eba:	eb1a 0303 	adds.w	r3, sl, r3
 8004ebe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ec2:	464b      	mov	r3, r9
 8004ec4:	eb4b 0303 	adc.w	r3, fp, r3
 8004ec8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ed8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004edc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	18db      	adds	r3, r3, r3
 8004ee4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	eb42 0303 	adc.w	r3, r2, r3
 8004eec:	647b      	str	r3, [r7, #68]	@ 0x44
 8004eee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004ef2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004ef6:	f7fb fdb9 	bl	8000a6c <__aeabi_uldivmod>
 8004efa:	4602      	mov	r2, r0
 8004efc:	460b      	mov	r3, r1
 8004efe:	4611      	mov	r1, r2
 8004f00:	4b3b      	ldr	r3, [pc, #236]	@ (8004ff0 <UART_SetConfig+0x2d4>)
 8004f02:	fba3 2301 	umull	r2, r3, r3, r1
 8004f06:	095b      	lsrs	r3, r3, #5
 8004f08:	2264      	movs	r2, #100	@ 0x64
 8004f0a:	fb02 f303 	mul.w	r3, r2, r3
 8004f0e:	1acb      	subs	r3, r1, r3
 8004f10:	00db      	lsls	r3, r3, #3
 8004f12:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004f16:	4b36      	ldr	r3, [pc, #216]	@ (8004ff0 <UART_SetConfig+0x2d4>)
 8004f18:	fba3 2302 	umull	r2, r3, r3, r2
 8004f1c:	095b      	lsrs	r3, r3, #5
 8004f1e:	005b      	lsls	r3, r3, #1
 8004f20:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004f24:	441c      	add	r4, r3
 8004f26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f30:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004f34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004f38:	4642      	mov	r2, r8
 8004f3a:	464b      	mov	r3, r9
 8004f3c:	1891      	adds	r1, r2, r2
 8004f3e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004f40:	415b      	adcs	r3, r3
 8004f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004f48:	4641      	mov	r1, r8
 8004f4a:	1851      	adds	r1, r2, r1
 8004f4c:	6339      	str	r1, [r7, #48]	@ 0x30
 8004f4e:	4649      	mov	r1, r9
 8004f50:	414b      	adcs	r3, r1
 8004f52:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f54:	f04f 0200 	mov.w	r2, #0
 8004f58:	f04f 0300 	mov.w	r3, #0
 8004f5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004f60:	4659      	mov	r1, fp
 8004f62:	00cb      	lsls	r3, r1, #3
 8004f64:	4651      	mov	r1, sl
 8004f66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f6a:	4651      	mov	r1, sl
 8004f6c:	00ca      	lsls	r2, r1, #3
 8004f6e:	4610      	mov	r0, r2
 8004f70:	4619      	mov	r1, r3
 8004f72:	4603      	mov	r3, r0
 8004f74:	4642      	mov	r2, r8
 8004f76:	189b      	adds	r3, r3, r2
 8004f78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f7c:	464b      	mov	r3, r9
 8004f7e:	460a      	mov	r2, r1
 8004f80:	eb42 0303 	adc.w	r3, r2, r3
 8004f84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004f94:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004f98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	18db      	adds	r3, r3, r3
 8004fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	eb42 0303 	adc.w	r3, r2, r3
 8004fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004faa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004fae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004fb2:	f7fb fd5b 	bl	8000a6c <__aeabi_uldivmod>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	460b      	mov	r3, r1
 8004fba:	4b0d      	ldr	r3, [pc, #52]	@ (8004ff0 <UART_SetConfig+0x2d4>)
 8004fbc:	fba3 1302 	umull	r1, r3, r3, r2
 8004fc0:	095b      	lsrs	r3, r3, #5
 8004fc2:	2164      	movs	r1, #100	@ 0x64
 8004fc4:	fb01 f303 	mul.w	r3, r1, r3
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	00db      	lsls	r3, r3, #3
 8004fcc:	3332      	adds	r3, #50	@ 0x32
 8004fce:	4a08      	ldr	r2, [pc, #32]	@ (8004ff0 <UART_SetConfig+0x2d4>)
 8004fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd4:	095b      	lsrs	r3, r3, #5
 8004fd6:	f003 0207 	and.w	r2, r3, #7
 8004fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4422      	add	r2, r4
 8004fe2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004fe4:	e106      	b.n	80051f4 <UART_SetConfig+0x4d8>
 8004fe6:	bf00      	nop
 8004fe8:	40011000 	.word	0x40011000
 8004fec:	40011400 	.word	0x40011400
 8004ff0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ff4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004ffe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005002:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005006:	4642      	mov	r2, r8
 8005008:	464b      	mov	r3, r9
 800500a:	1891      	adds	r1, r2, r2
 800500c:	6239      	str	r1, [r7, #32]
 800500e:	415b      	adcs	r3, r3
 8005010:	627b      	str	r3, [r7, #36]	@ 0x24
 8005012:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005016:	4641      	mov	r1, r8
 8005018:	1854      	adds	r4, r2, r1
 800501a:	4649      	mov	r1, r9
 800501c:	eb43 0501 	adc.w	r5, r3, r1
 8005020:	f04f 0200 	mov.w	r2, #0
 8005024:	f04f 0300 	mov.w	r3, #0
 8005028:	00eb      	lsls	r3, r5, #3
 800502a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800502e:	00e2      	lsls	r2, r4, #3
 8005030:	4614      	mov	r4, r2
 8005032:	461d      	mov	r5, r3
 8005034:	4643      	mov	r3, r8
 8005036:	18e3      	adds	r3, r4, r3
 8005038:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800503c:	464b      	mov	r3, r9
 800503e:	eb45 0303 	adc.w	r3, r5, r3
 8005042:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005052:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005056:	f04f 0200 	mov.w	r2, #0
 800505a:	f04f 0300 	mov.w	r3, #0
 800505e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005062:	4629      	mov	r1, r5
 8005064:	008b      	lsls	r3, r1, #2
 8005066:	4621      	mov	r1, r4
 8005068:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800506c:	4621      	mov	r1, r4
 800506e:	008a      	lsls	r2, r1, #2
 8005070:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005074:	f7fb fcfa 	bl	8000a6c <__aeabi_uldivmod>
 8005078:	4602      	mov	r2, r0
 800507a:	460b      	mov	r3, r1
 800507c:	4b60      	ldr	r3, [pc, #384]	@ (8005200 <UART_SetConfig+0x4e4>)
 800507e:	fba3 2302 	umull	r2, r3, r3, r2
 8005082:	095b      	lsrs	r3, r3, #5
 8005084:	011c      	lsls	r4, r3, #4
 8005086:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800508a:	2200      	movs	r2, #0
 800508c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005090:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005094:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005098:	4642      	mov	r2, r8
 800509a:	464b      	mov	r3, r9
 800509c:	1891      	adds	r1, r2, r2
 800509e:	61b9      	str	r1, [r7, #24]
 80050a0:	415b      	adcs	r3, r3
 80050a2:	61fb      	str	r3, [r7, #28]
 80050a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050a8:	4641      	mov	r1, r8
 80050aa:	1851      	adds	r1, r2, r1
 80050ac:	6139      	str	r1, [r7, #16]
 80050ae:	4649      	mov	r1, r9
 80050b0:	414b      	adcs	r3, r1
 80050b2:	617b      	str	r3, [r7, #20]
 80050b4:	f04f 0200 	mov.w	r2, #0
 80050b8:	f04f 0300 	mov.w	r3, #0
 80050bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050c0:	4659      	mov	r1, fp
 80050c2:	00cb      	lsls	r3, r1, #3
 80050c4:	4651      	mov	r1, sl
 80050c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050ca:	4651      	mov	r1, sl
 80050cc:	00ca      	lsls	r2, r1, #3
 80050ce:	4610      	mov	r0, r2
 80050d0:	4619      	mov	r1, r3
 80050d2:	4603      	mov	r3, r0
 80050d4:	4642      	mov	r2, r8
 80050d6:	189b      	adds	r3, r3, r2
 80050d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80050dc:	464b      	mov	r3, r9
 80050de:	460a      	mov	r2, r1
 80050e0:	eb42 0303 	adc.w	r3, r2, r3
 80050e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80050e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80050f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80050f4:	f04f 0200 	mov.w	r2, #0
 80050f8:	f04f 0300 	mov.w	r3, #0
 80050fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005100:	4649      	mov	r1, r9
 8005102:	008b      	lsls	r3, r1, #2
 8005104:	4641      	mov	r1, r8
 8005106:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800510a:	4641      	mov	r1, r8
 800510c:	008a      	lsls	r2, r1, #2
 800510e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005112:	f7fb fcab 	bl	8000a6c <__aeabi_uldivmod>
 8005116:	4602      	mov	r2, r0
 8005118:	460b      	mov	r3, r1
 800511a:	4611      	mov	r1, r2
 800511c:	4b38      	ldr	r3, [pc, #224]	@ (8005200 <UART_SetConfig+0x4e4>)
 800511e:	fba3 2301 	umull	r2, r3, r3, r1
 8005122:	095b      	lsrs	r3, r3, #5
 8005124:	2264      	movs	r2, #100	@ 0x64
 8005126:	fb02 f303 	mul.w	r3, r2, r3
 800512a:	1acb      	subs	r3, r1, r3
 800512c:	011b      	lsls	r3, r3, #4
 800512e:	3332      	adds	r3, #50	@ 0x32
 8005130:	4a33      	ldr	r2, [pc, #204]	@ (8005200 <UART_SetConfig+0x4e4>)
 8005132:	fba2 2303 	umull	r2, r3, r2, r3
 8005136:	095b      	lsrs	r3, r3, #5
 8005138:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800513c:	441c      	add	r4, r3
 800513e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005142:	2200      	movs	r2, #0
 8005144:	673b      	str	r3, [r7, #112]	@ 0x70
 8005146:	677a      	str	r2, [r7, #116]	@ 0x74
 8005148:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800514c:	4642      	mov	r2, r8
 800514e:	464b      	mov	r3, r9
 8005150:	1891      	adds	r1, r2, r2
 8005152:	60b9      	str	r1, [r7, #8]
 8005154:	415b      	adcs	r3, r3
 8005156:	60fb      	str	r3, [r7, #12]
 8005158:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800515c:	4641      	mov	r1, r8
 800515e:	1851      	adds	r1, r2, r1
 8005160:	6039      	str	r1, [r7, #0]
 8005162:	4649      	mov	r1, r9
 8005164:	414b      	adcs	r3, r1
 8005166:	607b      	str	r3, [r7, #4]
 8005168:	f04f 0200 	mov.w	r2, #0
 800516c:	f04f 0300 	mov.w	r3, #0
 8005170:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005174:	4659      	mov	r1, fp
 8005176:	00cb      	lsls	r3, r1, #3
 8005178:	4651      	mov	r1, sl
 800517a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800517e:	4651      	mov	r1, sl
 8005180:	00ca      	lsls	r2, r1, #3
 8005182:	4610      	mov	r0, r2
 8005184:	4619      	mov	r1, r3
 8005186:	4603      	mov	r3, r0
 8005188:	4642      	mov	r2, r8
 800518a:	189b      	adds	r3, r3, r2
 800518c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800518e:	464b      	mov	r3, r9
 8005190:	460a      	mov	r2, r1
 8005192:	eb42 0303 	adc.w	r3, r2, r3
 8005196:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80051a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80051a4:	f04f 0200 	mov.w	r2, #0
 80051a8:	f04f 0300 	mov.w	r3, #0
 80051ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80051b0:	4649      	mov	r1, r9
 80051b2:	008b      	lsls	r3, r1, #2
 80051b4:	4641      	mov	r1, r8
 80051b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051ba:	4641      	mov	r1, r8
 80051bc:	008a      	lsls	r2, r1, #2
 80051be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80051c2:	f7fb fc53 	bl	8000a6c <__aeabi_uldivmod>
 80051c6:	4602      	mov	r2, r0
 80051c8:	460b      	mov	r3, r1
 80051ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005200 <UART_SetConfig+0x4e4>)
 80051cc:	fba3 1302 	umull	r1, r3, r3, r2
 80051d0:	095b      	lsrs	r3, r3, #5
 80051d2:	2164      	movs	r1, #100	@ 0x64
 80051d4:	fb01 f303 	mul.w	r3, r1, r3
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	011b      	lsls	r3, r3, #4
 80051dc:	3332      	adds	r3, #50	@ 0x32
 80051de:	4a08      	ldr	r2, [pc, #32]	@ (8005200 <UART_SetConfig+0x4e4>)
 80051e0:	fba2 2303 	umull	r2, r3, r2, r3
 80051e4:	095b      	lsrs	r3, r3, #5
 80051e6:	f003 020f 	and.w	r2, r3, #15
 80051ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4422      	add	r2, r4
 80051f2:	609a      	str	r2, [r3, #8]
}
 80051f4:	bf00      	nop
 80051f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80051fa:	46bd      	mov	sp, r7
 80051fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005200:	51eb851f 	.word	0x51eb851f

08005204 <atoi>:
 8005204:	220a      	movs	r2, #10
 8005206:	2100      	movs	r1, #0
 8005208:	f000 b87a 	b.w	8005300 <strtol>

0800520c <_strtol_l.constprop.0>:
 800520c:	2b24      	cmp	r3, #36	@ 0x24
 800520e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005212:	4686      	mov	lr, r0
 8005214:	4690      	mov	r8, r2
 8005216:	d801      	bhi.n	800521c <_strtol_l.constprop.0+0x10>
 8005218:	2b01      	cmp	r3, #1
 800521a:	d106      	bne.n	800522a <_strtol_l.constprop.0+0x1e>
 800521c:	f000 f9e0 	bl	80055e0 <__errno>
 8005220:	2316      	movs	r3, #22
 8005222:	6003      	str	r3, [r0, #0]
 8005224:	2000      	movs	r0, #0
 8005226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800522a:	4834      	ldr	r0, [pc, #208]	@ (80052fc <_strtol_l.constprop.0+0xf0>)
 800522c:	460d      	mov	r5, r1
 800522e:	462a      	mov	r2, r5
 8005230:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005234:	5d06      	ldrb	r6, [r0, r4]
 8005236:	f016 0608 	ands.w	r6, r6, #8
 800523a:	d1f8      	bne.n	800522e <_strtol_l.constprop.0+0x22>
 800523c:	2c2d      	cmp	r4, #45	@ 0x2d
 800523e:	d12d      	bne.n	800529c <_strtol_l.constprop.0+0x90>
 8005240:	782c      	ldrb	r4, [r5, #0]
 8005242:	2601      	movs	r6, #1
 8005244:	1c95      	adds	r5, r2, #2
 8005246:	f033 0210 	bics.w	r2, r3, #16
 800524a:	d109      	bne.n	8005260 <_strtol_l.constprop.0+0x54>
 800524c:	2c30      	cmp	r4, #48	@ 0x30
 800524e:	d12a      	bne.n	80052a6 <_strtol_l.constprop.0+0x9a>
 8005250:	782a      	ldrb	r2, [r5, #0]
 8005252:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005256:	2a58      	cmp	r2, #88	@ 0x58
 8005258:	d125      	bne.n	80052a6 <_strtol_l.constprop.0+0x9a>
 800525a:	786c      	ldrb	r4, [r5, #1]
 800525c:	2310      	movs	r3, #16
 800525e:	3502      	adds	r5, #2
 8005260:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005264:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005268:	2200      	movs	r2, #0
 800526a:	fbbc f9f3 	udiv	r9, ip, r3
 800526e:	4610      	mov	r0, r2
 8005270:	fb03 ca19 	mls	sl, r3, r9, ip
 8005274:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005278:	2f09      	cmp	r7, #9
 800527a:	d81b      	bhi.n	80052b4 <_strtol_l.constprop.0+0xa8>
 800527c:	463c      	mov	r4, r7
 800527e:	42a3      	cmp	r3, r4
 8005280:	dd27      	ble.n	80052d2 <_strtol_l.constprop.0+0xc6>
 8005282:	1c57      	adds	r7, r2, #1
 8005284:	d007      	beq.n	8005296 <_strtol_l.constprop.0+0x8a>
 8005286:	4581      	cmp	r9, r0
 8005288:	d320      	bcc.n	80052cc <_strtol_l.constprop.0+0xc0>
 800528a:	d101      	bne.n	8005290 <_strtol_l.constprop.0+0x84>
 800528c:	45a2      	cmp	sl, r4
 800528e:	db1d      	blt.n	80052cc <_strtol_l.constprop.0+0xc0>
 8005290:	fb00 4003 	mla	r0, r0, r3, r4
 8005294:	2201      	movs	r2, #1
 8005296:	f815 4b01 	ldrb.w	r4, [r5], #1
 800529a:	e7eb      	b.n	8005274 <_strtol_l.constprop.0+0x68>
 800529c:	2c2b      	cmp	r4, #43	@ 0x2b
 800529e:	bf04      	itt	eq
 80052a0:	782c      	ldrbeq	r4, [r5, #0]
 80052a2:	1c95      	addeq	r5, r2, #2
 80052a4:	e7cf      	b.n	8005246 <_strtol_l.constprop.0+0x3a>
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1da      	bne.n	8005260 <_strtol_l.constprop.0+0x54>
 80052aa:	2c30      	cmp	r4, #48	@ 0x30
 80052ac:	bf0c      	ite	eq
 80052ae:	2308      	moveq	r3, #8
 80052b0:	230a      	movne	r3, #10
 80052b2:	e7d5      	b.n	8005260 <_strtol_l.constprop.0+0x54>
 80052b4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80052b8:	2f19      	cmp	r7, #25
 80052ba:	d801      	bhi.n	80052c0 <_strtol_l.constprop.0+0xb4>
 80052bc:	3c37      	subs	r4, #55	@ 0x37
 80052be:	e7de      	b.n	800527e <_strtol_l.constprop.0+0x72>
 80052c0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80052c4:	2f19      	cmp	r7, #25
 80052c6:	d804      	bhi.n	80052d2 <_strtol_l.constprop.0+0xc6>
 80052c8:	3c57      	subs	r4, #87	@ 0x57
 80052ca:	e7d8      	b.n	800527e <_strtol_l.constprop.0+0x72>
 80052cc:	f04f 32ff 	mov.w	r2, #4294967295
 80052d0:	e7e1      	b.n	8005296 <_strtol_l.constprop.0+0x8a>
 80052d2:	1c53      	adds	r3, r2, #1
 80052d4:	d108      	bne.n	80052e8 <_strtol_l.constprop.0+0xdc>
 80052d6:	2322      	movs	r3, #34	@ 0x22
 80052d8:	f8ce 3000 	str.w	r3, [lr]
 80052dc:	4660      	mov	r0, ip
 80052de:	f1b8 0f00 	cmp.w	r8, #0
 80052e2:	d0a0      	beq.n	8005226 <_strtol_l.constprop.0+0x1a>
 80052e4:	1e69      	subs	r1, r5, #1
 80052e6:	e006      	b.n	80052f6 <_strtol_l.constprop.0+0xea>
 80052e8:	b106      	cbz	r6, 80052ec <_strtol_l.constprop.0+0xe0>
 80052ea:	4240      	negs	r0, r0
 80052ec:	f1b8 0f00 	cmp.w	r8, #0
 80052f0:	d099      	beq.n	8005226 <_strtol_l.constprop.0+0x1a>
 80052f2:	2a00      	cmp	r2, #0
 80052f4:	d1f6      	bne.n	80052e4 <_strtol_l.constprop.0+0xd8>
 80052f6:	f8c8 1000 	str.w	r1, [r8]
 80052fa:	e794      	b.n	8005226 <_strtol_l.constprop.0+0x1a>
 80052fc:	080061ad 	.word	0x080061ad

08005300 <strtol>:
 8005300:	4613      	mov	r3, r2
 8005302:	460a      	mov	r2, r1
 8005304:	4601      	mov	r1, r0
 8005306:	4802      	ldr	r0, [pc, #8]	@ (8005310 <strtol+0x10>)
 8005308:	6800      	ldr	r0, [r0, #0]
 800530a:	f7ff bf7f 	b.w	800520c <_strtol_l.constprop.0>
 800530e:	bf00      	nop
 8005310:	20000018 	.word	0x20000018

08005314 <std>:
 8005314:	2300      	movs	r3, #0
 8005316:	b510      	push	{r4, lr}
 8005318:	4604      	mov	r4, r0
 800531a:	e9c0 3300 	strd	r3, r3, [r0]
 800531e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005322:	6083      	str	r3, [r0, #8]
 8005324:	8181      	strh	r1, [r0, #12]
 8005326:	6643      	str	r3, [r0, #100]	@ 0x64
 8005328:	81c2      	strh	r2, [r0, #14]
 800532a:	6183      	str	r3, [r0, #24]
 800532c:	4619      	mov	r1, r3
 800532e:	2208      	movs	r2, #8
 8005330:	305c      	adds	r0, #92	@ 0x5c
 8005332:	f000 f906 	bl	8005542 <memset>
 8005336:	4b0d      	ldr	r3, [pc, #52]	@ (800536c <std+0x58>)
 8005338:	6263      	str	r3, [r4, #36]	@ 0x24
 800533a:	4b0d      	ldr	r3, [pc, #52]	@ (8005370 <std+0x5c>)
 800533c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800533e:	4b0d      	ldr	r3, [pc, #52]	@ (8005374 <std+0x60>)
 8005340:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005342:	4b0d      	ldr	r3, [pc, #52]	@ (8005378 <std+0x64>)
 8005344:	6323      	str	r3, [r4, #48]	@ 0x30
 8005346:	4b0d      	ldr	r3, [pc, #52]	@ (800537c <std+0x68>)
 8005348:	6224      	str	r4, [r4, #32]
 800534a:	429c      	cmp	r4, r3
 800534c:	d006      	beq.n	800535c <std+0x48>
 800534e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005352:	4294      	cmp	r4, r2
 8005354:	d002      	beq.n	800535c <std+0x48>
 8005356:	33d0      	adds	r3, #208	@ 0xd0
 8005358:	429c      	cmp	r4, r3
 800535a:	d105      	bne.n	8005368 <std+0x54>
 800535c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005364:	f000 b966 	b.w	8005634 <__retarget_lock_init_recursive>
 8005368:	bd10      	pop	{r4, pc}
 800536a:	bf00      	nop
 800536c:	080054bd 	.word	0x080054bd
 8005370:	080054df 	.word	0x080054df
 8005374:	08005517 	.word	0x08005517
 8005378:	0800553b 	.word	0x0800553b
 800537c:	20000264 	.word	0x20000264

08005380 <stdio_exit_handler>:
 8005380:	4a02      	ldr	r2, [pc, #8]	@ (800538c <stdio_exit_handler+0xc>)
 8005382:	4903      	ldr	r1, [pc, #12]	@ (8005390 <stdio_exit_handler+0x10>)
 8005384:	4803      	ldr	r0, [pc, #12]	@ (8005394 <stdio_exit_handler+0x14>)
 8005386:	f000 b869 	b.w	800545c <_fwalk_sglue>
 800538a:	bf00      	nop
 800538c:	2000000c 	.word	0x2000000c
 8005390:	08005ed5 	.word	0x08005ed5
 8005394:	2000001c 	.word	0x2000001c

08005398 <cleanup_stdio>:
 8005398:	6841      	ldr	r1, [r0, #4]
 800539a:	4b0c      	ldr	r3, [pc, #48]	@ (80053cc <cleanup_stdio+0x34>)
 800539c:	4299      	cmp	r1, r3
 800539e:	b510      	push	{r4, lr}
 80053a0:	4604      	mov	r4, r0
 80053a2:	d001      	beq.n	80053a8 <cleanup_stdio+0x10>
 80053a4:	f000 fd96 	bl	8005ed4 <_fflush_r>
 80053a8:	68a1      	ldr	r1, [r4, #8]
 80053aa:	4b09      	ldr	r3, [pc, #36]	@ (80053d0 <cleanup_stdio+0x38>)
 80053ac:	4299      	cmp	r1, r3
 80053ae:	d002      	beq.n	80053b6 <cleanup_stdio+0x1e>
 80053b0:	4620      	mov	r0, r4
 80053b2:	f000 fd8f 	bl	8005ed4 <_fflush_r>
 80053b6:	68e1      	ldr	r1, [r4, #12]
 80053b8:	4b06      	ldr	r3, [pc, #24]	@ (80053d4 <cleanup_stdio+0x3c>)
 80053ba:	4299      	cmp	r1, r3
 80053bc:	d004      	beq.n	80053c8 <cleanup_stdio+0x30>
 80053be:	4620      	mov	r0, r4
 80053c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053c4:	f000 bd86 	b.w	8005ed4 <_fflush_r>
 80053c8:	bd10      	pop	{r4, pc}
 80053ca:	bf00      	nop
 80053cc:	20000264 	.word	0x20000264
 80053d0:	200002cc 	.word	0x200002cc
 80053d4:	20000334 	.word	0x20000334

080053d8 <global_stdio_init.part.0>:
 80053d8:	b510      	push	{r4, lr}
 80053da:	4b0b      	ldr	r3, [pc, #44]	@ (8005408 <global_stdio_init.part.0+0x30>)
 80053dc:	4c0b      	ldr	r4, [pc, #44]	@ (800540c <global_stdio_init.part.0+0x34>)
 80053de:	4a0c      	ldr	r2, [pc, #48]	@ (8005410 <global_stdio_init.part.0+0x38>)
 80053e0:	601a      	str	r2, [r3, #0]
 80053e2:	4620      	mov	r0, r4
 80053e4:	2200      	movs	r2, #0
 80053e6:	2104      	movs	r1, #4
 80053e8:	f7ff ff94 	bl	8005314 <std>
 80053ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80053f0:	2201      	movs	r2, #1
 80053f2:	2109      	movs	r1, #9
 80053f4:	f7ff ff8e 	bl	8005314 <std>
 80053f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80053fc:	2202      	movs	r2, #2
 80053fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005402:	2112      	movs	r1, #18
 8005404:	f7ff bf86 	b.w	8005314 <std>
 8005408:	2000039c 	.word	0x2000039c
 800540c:	20000264 	.word	0x20000264
 8005410:	08005381 	.word	0x08005381

08005414 <__sfp_lock_acquire>:
 8005414:	4801      	ldr	r0, [pc, #4]	@ (800541c <__sfp_lock_acquire+0x8>)
 8005416:	f000 b90e 	b.w	8005636 <__retarget_lock_acquire_recursive>
 800541a:	bf00      	nop
 800541c:	200003a5 	.word	0x200003a5

08005420 <__sfp_lock_release>:
 8005420:	4801      	ldr	r0, [pc, #4]	@ (8005428 <__sfp_lock_release+0x8>)
 8005422:	f000 b909 	b.w	8005638 <__retarget_lock_release_recursive>
 8005426:	bf00      	nop
 8005428:	200003a5 	.word	0x200003a5

0800542c <__sinit>:
 800542c:	b510      	push	{r4, lr}
 800542e:	4604      	mov	r4, r0
 8005430:	f7ff fff0 	bl	8005414 <__sfp_lock_acquire>
 8005434:	6a23      	ldr	r3, [r4, #32]
 8005436:	b11b      	cbz	r3, 8005440 <__sinit+0x14>
 8005438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800543c:	f7ff bff0 	b.w	8005420 <__sfp_lock_release>
 8005440:	4b04      	ldr	r3, [pc, #16]	@ (8005454 <__sinit+0x28>)
 8005442:	6223      	str	r3, [r4, #32]
 8005444:	4b04      	ldr	r3, [pc, #16]	@ (8005458 <__sinit+0x2c>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1f5      	bne.n	8005438 <__sinit+0xc>
 800544c:	f7ff ffc4 	bl	80053d8 <global_stdio_init.part.0>
 8005450:	e7f2      	b.n	8005438 <__sinit+0xc>
 8005452:	bf00      	nop
 8005454:	08005399 	.word	0x08005399
 8005458:	2000039c 	.word	0x2000039c

0800545c <_fwalk_sglue>:
 800545c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005460:	4607      	mov	r7, r0
 8005462:	4688      	mov	r8, r1
 8005464:	4614      	mov	r4, r2
 8005466:	2600      	movs	r6, #0
 8005468:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800546c:	f1b9 0901 	subs.w	r9, r9, #1
 8005470:	d505      	bpl.n	800547e <_fwalk_sglue+0x22>
 8005472:	6824      	ldr	r4, [r4, #0]
 8005474:	2c00      	cmp	r4, #0
 8005476:	d1f7      	bne.n	8005468 <_fwalk_sglue+0xc>
 8005478:	4630      	mov	r0, r6
 800547a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800547e:	89ab      	ldrh	r3, [r5, #12]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d907      	bls.n	8005494 <_fwalk_sglue+0x38>
 8005484:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005488:	3301      	adds	r3, #1
 800548a:	d003      	beq.n	8005494 <_fwalk_sglue+0x38>
 800548c:	4629      	mov	r1, r5
 800548e:	4638      	mov	r0, r7
 8005490:	47c0      	blx	r8
 8005492:	4306      	orrs	r6, r0
 8005494:	3568      	adds	r5, #104	@ 0x68
 8005496:	e7e9      	b.n	800546c <_fwalk_sglue+0x10>

08005498 <iprintf>:
 8005498:	b40f      	push	{r0, r1, r2, r3}
 800549a:	b507      	push	{r0, r1, r2, lr}
 800549c:	4906      	ldr	r1, [pc, #24]	@ (80054b8 <iprintf+0x20>)
 800549e:	ab04      	add	r3, sp, #16
 80054a0:	6808      	ldr	r0, [r1, #0]
 80054a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80054a6:	6881      	ldr	r1, [r0, #8]
 80054a8:	9301      	str	r3, [sp, #4]
 80054aa:	f000 f9e9 	bl	8005880 <_vfiprintf_r>
 80054ae:	b003      	add	sp, #12
 80054b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80054b4:	b004      	add	sp, #16
 80054b6:	4770      	bx	lr
 80054b8:	20000018 	.word	0x20000018

080054bc <__sread>:
 80054bc:	b510      	push	{r4, lr}
 80054be:	460c      	mov	r4, r1
 80054c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054c4:	f000 f868 	bl	8005598 <_read_r>
 80054c8:	2800      	cmp	r0, #0
 80054ca:	bfab      	itete	ge
 80054cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80054ce:	89a3      	ldrhlt	r3, [r4, #12]
 80054d0:	181b      	addge	r3, r3, r0
 80054d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80054d6:	bfac      	ite	ge
 80054d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80054da:	81a3      	strhlt	r3, [r4, #12]
 80054dc:	bd10      	pop	{r4, pc}

080054de <__swrite>:
 80054de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054e2:	461f      	mov	r7, r3
 80054e4:	898b      	ldrh	r3, [r1, #12]
 80054e6:	05db      	lsls	r3, r3, #23
 80054e8:	4605      	mov	r5, r0
 80054ea:	460c      	mov	r4, r1
 80054ec:	4616      	mov	r6, r2
 80054ee:	d505      	bpl.n	80054fc <__swrite+0x1e>
 80054f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054f4:	2302      	movs	r3, #2
 80054f6:	2200      	movs	r2, #0
 80054f8:	f000 f83c 	bl	8005574 <_lseek_r>
 80054fc:	89a3      	ldrh	r3, [r4, #12]
 80054fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005502:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005506:	81a3      	strh	r3, [r4, #12]
 8005508:	4632      	mov	r2, r6
 800550a:	463b      	mov	r3, r7
 800550c:	4628      	mov	r0, r5
 800550e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005512:	f000 b853 	b.w	80055bc <_write_r>

08005516 <__sseek>:
 8005516:	b510      	push	{r4, lr}
 8005518:	460c      	mov	r4, r1
 800551a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800551e:	f000 f829 	bl	8005574 <_lseek_r>
 8005522:	1c43      	adds	r3, r0, #1
 8005524:	89a3      	ldrh	r3, [r4, #12]
 8005526:	bf15      	itete	ne
 8005528:	6560      	strne	r0, [r4, #84]	@ 0x54
 800552a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800552e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005532:	81a3      	strheq	r3, [r4, #12]
 8005534:	bf18      	it	ne
 8005536:	81a3      	strhne	r3, [r4, #12]
 8005538:	bd10      	pop	{r4, pc}

0800553a <__sclose>:
 800553a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800553e:	f000 b809 	b.w	8005554 <_close_r>

08005542 <memset>:
 8005542:	4402      	add	r2, r0
 8005544:	4603      	mov	r3, r0
 8005546:	4293      	cmp	r3, r2
 8005548:	d100      	bne.n	800554c <memset+0xa>
 800554a:	4770      	bx	lr
 800554c:	f803 1b01 	strb.w	r1, [r3], #1
 8005550:	e7f9      	b.n	8005546 <memset+0x4>
	...

08005554 <_close_r>:
 8005554:	b538      	push	{r3, r4, r5, lr}
 8005556:	4d06      	ldr	r5, [pc, #24]	@ (8005570 <_close_r+0x1c>)
 8005558:	2300      	movs	r3, #0
 800555a:	4604      	mov	r4, r0
 800555c:	4608      	mov	r0, r1
 800555e:	602b      	str	r3, [r5, #0]
 8005560:	f7fc f821 	bl	80015a6 <_close>
 8005564:	1c43      	adds	r3, r0, #1
 8005566:	d102      	bne.n	800556e <_close_r+0x1a>
 8005568:	682b      	ldr	r3, [r5, #0]
 800556a:	b103      	cbz	r3, 800556e <_close_r+0x1a>
 800556c:	6023      	str	r3, [r4, #0]
 800556e:	bd38      	pop	{r3, r4, r5, pc}
 8005570:	200003a0 	.word	0x200003a0

08005574 <_lseek_r>:
 8005574:	b538      	push	{r3, r4, r5, lr}
 8005576:	4d07      	ldr	r5, [pc, #28]	@ (8005594 <_lseek_r+0x20>)
 8005578:	4604      	mov	r4, r0
 800557a:	4608      	mov	r0, r1
 800557c:	4611      	mov	r1, r2
 800557e:	2200      	movs	r2, #0
 8005580:	602a      	str	r2, [r5, #0]
 8005582:	461a      	mov	r2, r3
 8005584:	f7fc f836 	bl	80015f4 <_lseek>
 8005588:	1c43      	adds	r3, r0, #1
 800558a:	d102      	bne.n	8005592 <_lseek_r+0x1e>
 800558c:	682b      	ldr	r3, [r5, #0]
 800558e:	b103      	cbz	r3, 8005592 <_lseek_r+0x1e>
 8005590:	6023      	str	r3, [r4, #0]
 8005592:	bd38      	pop	{r3, r4, r5, pc}
 8005594:	200003a0 	.word	0x200003a0

08005598 <_read_r>:
 8005598:	b538      	push	{r3, r4, r5, lr}
 800559a:	4d07      	ldr	r5, [pc, #28]	@ (80055b8 <_read_r+0x20>)
 800559c:	4604      	mov	r4, r0
 800559e:	4608      	mov	r0, r1
 80055a0:	4611      	mov	r1, r2
 80055a2:	2200      	movs	r2, #0
 80055a4:	602a      	str	r2, [r5, #0]
 80055a6:	461a      	mov	r2, r3
 80055a8:	f7fb ffe0 	bl	800156c <_read>
 80055ac:	1c43      	adds	r3, r0, #1
 80055ae:	d102      	bne.n	80055b6 <_read_r+0x1e>
 80055b0:	682b      	ldr	r3, [r5, #0]
 80055b2:	b103      	cbz	r3, 80055b6 <_read_r+0x1e>
 80055b4:	6023      	str	r3, [r4, #0]
 80055b6:	bd38      	pop	{r3, r4, r5, pc}
 80055b8:	200003a0 	.word	0x200003a0

080055bc <_write_r>:
 80055bc:	b538      	push	{r3, r4, r5, lr}
 80055be:	4d07      	ldr	r5, [pc, #28]	@ (80055dc <_write_r+0x20>)
 80055c0:	4604      	mov	r4, r0
 80055c2:	4608      	mov	r0, r1
 80055c4:	4611      	mov	r1, r2
 80055c6:	2200      	movs	r2, #0
 80055c8:	602a      	str	r2, [r5, #0]
 80055ca:	461a      	mov	r2, r3
 80055cc:	f7fc f868 	bl	80016a0 <_write>
 80055d0:	1c43      	adds	r3, r0, #1
 80055d2:	d102      	bne.n	80055da <_write_r+0x1e>
 80055d4:	682b      	ldr	r3, [r5, #0]
 80055d6:	b103      	cbz	r3, 80055da <_write_r+0x1e>
 80055d8:	6023      	str	r3, [r4, #0]
 80055da:	bd38      	pop	{r3, r4, r5, pc}
 80055dc:	200003a0 	.word	0x200003a0

080055e0 <__errno>:
 80055e0:	4b01      	ldr	r3, [pc, #4]	@ (80055e8 <__errno+0x8>)
 80055e2:	6818      	ldr	r0, [r3, #0]
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	20000018 	.word	0x20000018

080055ec <__libc_init_array>:
 80055ec:	b570      	push	{r4, r5, r6, lr}
 80055ee:	4d0d      	ldr	r5, [pc, #52]	@ (8005624 <__libc_init_array+0x38>)
 80055f0:	4c0d      	ldr	r4, [pc, #52]	@ (8005628 <__libc_init_array+0x3c>)
 80055f2:	1b64      	subs	r4, r4, r5
 80055f4:	10a4      	asrs	r4, r4, #2
 80055f6:	2600      	movs	r6, #0
 80055f8:	42a6      	cmp	r6, r4
 80055fa:	d109      	bne.n	8005610 <__libc_init_array+0x24>
 80055fc:	4d0b      	ldr	r5, [pc, #44]	@ (800562c <__libc_init_array+0x40>)
 80055fe:	4c0c      	ldr	r4, [pc, #48]	@ (8005630 <__libc_init_array+0x44>)
 8005600:	f000 fdb8 	bl	8006174 <_init>
 8005604:	1b64      	subs	r4, r4, r5
 8005606:	10a4      	asrs	r4, r4, #2
 8005608:	2600      	movs	r6, #0
 800560a:	42a6      	cmp	r6, r4
 800560c:	d105      	bne.n	800561a <__libc_init_array+0x2e>
 800560e:	bd70      	pop	{r4, r5, r6, pc}
 8005610:	f855 3b04 	ldr.w	r3, [r5], #4
 8005614:	4798      	blx	r3
 8005616:	3601      	adds	r6, #1
 8005618:	e7ee      	b.n	80055f8 <__libc_init_array+0xc>
 800561a:	f855 3b04 	ldr.w	r3, [r5], #4
 800561e:	4798      	blx	r3
 8005620:	3601      	adds	r6, #1
 8005622:	e7f2      	b.n	800560a <__libc_init_array+0x1e>
 8005624:	080062e8 	.word	0x080062e8
 8005628:	080062e8 	.word	0x080062e8
 800562c:	080062e8 	.word	0x080062e8
 8005630:	080062ec 	.word	0x080062ec

08005634 <__retarget_lock_init_recursive>:
 8005634:	4770      	bx	lr

08005636 <__retarget_lock_acquire_recursive>:
 8005636:	4770      	bx	lr

08005638 <__retarget_lock_release_recursive>:
 8005638:	4770      	bx	lr
	...

0800563c <_free_r>:
 800563c:	b538      	push	{r3, r4, r5, lr}
 800563e:	4605      	mov	r5, r0
 8005640:	2900      	cmp	r1, #0
 8005642:	d041      	beq.n	80056c8 <_free_r+0x8c>
 8005644:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005648:	1f0c      	subs	r4, r1, #4
 800564a:	2b00      	cmp	r3, #0
 800564c:	bfb8      	it	lt
 800564e:	18e4      	addlt	r4, r4, r3
 8005650:	f000 f8e0 	bl	8005814 <__malloc_lock>
 8005654:	4a1d      	ldr	r2, [pc, #116]	@ (80056cc <_free_r+0x90>)
 8005656:	6813      	ldr	r3, [r2, #0]
 8005658:	b933      	cbnz	r3, 8005668 <_free_r+0x2c>
 800565a:	6063      	str	r3, [r4, #4]
 800565c:	6014      	str	r4, [r2, #0]
 800565e:	4628      	mov	r0, r5
 8005660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005664:	f000 b8dc 	b.w	8005820 <__malloc_unlock>
 8005668:	42a3      	cmp	r3, r4
 800566a:	d908      	bls.n	800567e <_free_r+0x42>
 800566c:	6820      	ldr	r0, [r4, #0]
 800566e:	1821      	adds	r1, r4, r0
 8005670:	428b      	cmp	r3, r1
 8005672:	bf01      	itttt	eq
 8005674:	6819      	ldreq	r1, [r3, #0]
 8005676:	685b      	ldreq	r3, [r3, #4]
 8005678:	1809      	addeq	r1, r1, r0
 800567a:	6021      	streq	r1, [r4, #0]
 800567c:	e7ed      	b.n	800565a <_free_r+0x1e>
 800567e:	461a      	mov	r2, r3
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	b10b      	cbz	r3, 8005688 <_free_r+0x4c>
 8005684:	42a3      	cmp	r3, r4
 8005686:	d9fa      	bls.n	800567e <_free_r+0x42>
 8005688:	6811      	ldr	r1, [r2, #0]
 800568a:	1850      	adds	r0, r2, r1
 800568c:	42a0      	cmp	r0, r4
 800568e:	d10b      	bne.n	80056a8 <_free_r+0x6c>
 8005690:	6820      	ldr	r0, [r4, #0]
 8005692:	4401      	add	r1, r0
 8005694:	1850      	adds	r0, r2, r1
 8005696:	4283      	cmp	r3, r0
 8005698:	6011      	str	r1, [r2, #0]
 800569a:	d1e0      	bne.n	800565e <_free_r+0x22>
 800569c:	6818      	ldr	r0, [r3, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	6053      	str	r3, [r2, #4]
 80056a2:	4408      	add	r0, r1
 80056a4:	6010      	str	r0, [r2, #0]
 80056a6:	e7da      	b.n	800565e <_free_r+0x22>
 80056a8:	d902      	bls.n	80056b0 <_free_r+0x74>
 80056aa:	230c      	movs	r3, #12
 80056ac:	602b      	str	r3, [r5, #0]
 80056ae:	e7d6      	b.n	800565e <_free_r+0x22>
 80056b0:	6820      	ldr	r0, [r4, #0]
 80056b2:	1821      	adds	r1, r4, r0
 80056b4:	428b      	cmp	r3, r1
 80056b6:	bf04      	itt	eq
 80056b8:	6819      	ldreq	r1, [r3, #0]
 80056ba:	685b      	ldreq	r3, [r3, #4]
 80056bc:	6063      	str	r3, [r4, #4]
 80056be:	bf04      	itt	eq
 80056c0:	1809      	addeq	r1, r1, r0
 80056c2:	6021      	streq	r1, [r4, #0]
 80056c4:	6054      	str	r4, [r2, #4]
 80056c6:	e7ca      	b.n	800565e <_free_r+0x22>
 80056c8:	bd38      	pop	{r3, r4, r5, pc}
 80056ca:	bf00      	nop
 80056cc:	200003ac 	.word	0x200003ac

080056d0 <sbrk_aligned>:
 80056d0:	b570      	push	{r4, r5, r6, lr}
 80056d2:	4e0f      	ldr	r6, [pc, #60]	@ (8005710 <sbrk_aligned+0x40>)
 80056d4:	460c      	mov	r4, r1
 80056d6:	6831      	ldr	r1, [r6, #0]
 80056d8:	4605      	mov	r5, r0
 80056da:	b911      	cbnz	r1, 80056e2 <sbrk_aligned+0x12>
 80056dc:	f000 fcb6 	bl	800604c <_sbrk_r>
 80056e0:	6030      	str	r0, [r6, #0]
 80056e2:	4621      	mov	r1, r4
 80056e4:	4628      	mov	r0, r5
 80056e6:	f000 fcb1 	bl	800604c <_sbrk_r>
 80056ea:	1c43      	adds	r3, r0, #1
 80056ec:	d103      	bne.n	80056f6 <sbrk_aligned+0x26>
 80056ee:	f04f 34ff 	mov.w	r4, #4294967295
 80056f2:	4620      	mov	r0, r4
 80056f4:	bd70      	pop	{r4, r5, r6, pc}
 80056f6:	1cc4      	adds	r4, r0, #3
 80056f8:	f024 0403 	bic.w	r4, r4, #3
 80056fc:	42a0      	cmp	r0, r4
 80056fe:	d0f8      	beq.n	80056f2 <sbrk_aligned+0x22>
 8005700:	1a21      	subs	r1, r4, r0
 8005702:	4628      	mov	r0, r5
 8005704:	f000 fca2 	bl	800604c <_sbrk_r>
 8005708:	3001      	adds	r0, #1
 800570a:	d1f2      	bne.n	80056f2 <sbrk_aligned+0x22>
 800570c:	e7ef      	b.n	80056ee <sbrk_aligned+0x1e>
 800570e:	bf00      	nop
 8005710:	200003a8 	.word	0x200003a8

08005714 <_malloc_r>:
 8005714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005718:	1ccd      	adds	r5, r1, #3
 800571a:	f025 0503 	bic.w	r5, r5, #3
 800571e:	3508      	adds	r5, #8
 8005720:	2d0c      	cmp	r5, #12
 8005722:	bf38      	it	cc
 8005724:	250c      	movcc	r5, #12
 8005726:	2d00      	cmp	r5, #0
 8005728:	4606      	mov	r6, r0
 800572a:	db01      	blt.n	8005730 <_malloc_r+0x1c>
 800572c:	42a9      	cmp	r1, r5
 800572e:	d904      	bls.n	800573a <_malloc_r+0x26>
 8005730:	230c      	movs	r3, #12
 8005732:	6033      	str	r3, [r6, #0]
 8005734:	2000      	movs	r0, #0
 8005736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800573a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005810 <_malloc_r+0xfc>
 800573e:	f000 f869 	bl	8005814 <__malloc_lock>
 8005742:	f8d8 3000 	ldr.w	r3, [r8]
 8005746:	461c      	mov	r4, r3
 8005748:	bb44      	cbnz	r4, 800579c <_malloc_r+0x88>
 800574a:	4629      	mov	r1, r5
 800574c:	4630      	mov	r0, r6
 800574e:	f7ff ffbf 	bl	80056d0 <sbrk_aligned>
 8005752:	1c43      	adds	r3, r0, #1
 8005754:	4604      	mov	r4, r0
 8005756:	d158      	bne.n	800580a <_malloc_r+0xf6>
 8005758:	f8d8 4000 	ldr.w	r4, [r8]
 800575c:	4627      	mov	r7, r4
 800575e:	2f00      	cmp	r7, #0
 8005760:	d143      	bne.n	80057ea <_malloc_r+0xd6>
 8005762:	2c00      	cmp	r4, #0
 8005764:	d04b      	beq.n	80057fe <_malloc_r+0xea>
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	4639      	mov	r1, r7
 800576a:	4630      	mov	r0, r6
 800576c:	eb04 0903 	add.w	r9, r4, r3
 8005770:	f000 fc6c 	bl	800604c <_sbrk_r>
 8005774:	4581      	cmp	r9, r0
 8005776:	d142      	bne.n	80057fe <_malloc_r+0xea>
 8005778:	6821      	ldr	r1, [r4, #0]
 800577a:	1a6d      	subs	r5, r5, r1
 800577c:	4629      	mov	r1, r5
 800577e:	4630      	mov	r0, r6
 8005780:	f7ff ffa6 	bl	80056d0 <sbrk_aligned>
 8005784:	3001      	adds	r0, #1
 8005786:	d03a      	beq.n	80057fe <_malloc_r+0xea>
 8005788:	6823      	ldr	r3, [r4, #0]
 800578a:	442b      	add	r3, r5
 800578c:	6023      	str	r3, [r4, #0]
 800578e:	f8d8 3000 	ldr.w	r3, [r8]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	bb62      	cbnz	r2, 80057f0 <_malloc_r+0xdc>
 8005796:	f8c8 7000 	str.w	r7, [r8]
 800579a:	e00f      	b.n	80057bc <_malloc_r+0xa8>
 800579c:	6822      	ldr	r2, [r4, #0]
 800579e:	1b52      	subs	r2, r2, r5
 80057a0:	d420      	bmi.n	80057e4 <_malloc_r+0xd0>
 80057a2:	2a0b      	cmp	r2, #11
 80057a4:	d917      	bls.n	80057d6 <_malloc_r+0xc2>
 80057a6:	1961      	adds	r1, r4, r5
 80057a8:	42a3      	cmp	r3, r4
 80057aa:	6025      	str	r5, [r4, #0]
 80057ac:	bf18      	it	ne
 80057ae:	6059      	strne	r1, [r3, #4]
 80057b0:	6863      	ldr	r3, [r4, #4]
 80057b2:	bf08      	it	eq
 80057b4:	f8c8 1000 	streq.w	r1, [r8]
 80057b8:	5162      	str	r2, [r4, r5]
 80057ba:	604b      	str	r3, [r1, #4]
 80057bc:	4630      	mov	r0, r6
 80057be:	f000 f82f 	bl	8005820 <__malloc_unlock>
 80057c2:	f104 000b 	add.w	r0, r4, #11
 80057c6:	1d23      	adds	r3, r4, #4
 80057c8:	f020 0007 	bic.w	r0, r0, #7
 80057cc:	1ac2      	subs	r2, r0, r3
 80057ce:	bf1c      	itt	ne
 80057d0:	1a1b      	subne	r3, r3, r0
 80057d2:	50a3      	strne	r3, [r4, r2]
 80057d4:	e7af      	b.n	8005736 <_malloc_r+0x22>
 80057d6:	6862      	ldr	r2, [r4, #4]
 80057d8:	42a3      	cmp	r3, r4
 80057da:	bf0c      	ite	eq
 80057dc:	f8c8 2000 	streq.w	r2, [r8]
 80057e0:	605a      	strne	r2, [r3, #4]
 80057e2:	e7eb      	b.n	80057bc <_malloc_r+0xa8>
 80057e4:	4623      	mov	r3, r4
 80057e6:	6864      	ldr	r4, [r4, #4]
 80057e8:	e7ae      	b.n	8005748 <_malloc_r+0x34>
 80057ea:	463c      	mov	r4, r7
 80057ec:	687f      	ldr	r7, [r7, #4]
 80057ee:	e7b6      	b.n	800575e <_malloc_r+0x4a>
 80057f0:	461a      	mov	r2, r3
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	42a3      	cmp	r3, r4
 80057f6:	d1fb      	bne.n	80057f0 <_malloc_r+0xdc>
 80057f8:	2300      	movs	r3, #0
 80057fa:	6053      	str	r3, [r2, #4]
 80057fc:	e7de      	b.n	80057bc <_malloc_r+0xa8>
 80057fe:	230c      	movs	r3, #12
 8005800:	6033      	str	r3, [r6, #0]
 8005802:	4630      	mov	r0, r6
 8005804:	f000 f80c 	bl	8005820 <__malloc_unlock>
 8005808:	e794      	b.n	8005734 <_malloc_r+0x20>
 800580a:	6005      	str	r5, [r0, #0]
 800580c:	e7d6      	b.n	80057bc <_malloc_r+0xa8>
 800580e:	bf00      	nop
 8005810:	200003ac 	.word	0x200003ac

08005814 <__malloc_lock>:
 8005814:	4801      	ldr	r0, [pc, #4]	@ (800581c <__malloc_lock+0x8>)
 8005816:	f7ff bf0e 	b.w	8005636 <__retarget_lock_acquire_recursive>
 800581a:	bf00      	nop
 800581c:	200003a4 	.word	0x200003a4

08005820 <__malloc_unlock>:
 8005820:	4801      	ldr	r0, [pc, #4]	@ (8005828 <__malloc_unlock+0x8>)
 8005822:	f7ff bf09 	b.w	8005638 <__retarget_lock_release_recursive>
 8005826:	bf00      	nop
 8005828:	200003a4 	.word	0x200003a4

0800582c <__sfputc_r>:
 800582c:	6893      	ldr	r3, [r2, #8]
 800582e:	3b01      	subs	r3, #1
 8005830:	2b00      	cmp	r3, #0
 8005832:	b410      	push	{r4}
 8005834:	6093      	str	r3, [r2, #8]
 8005836:	da08      	bge.n	800584a <__sfputc_r+0x1e>
 8005838:	6994      	ldr	r4, [r2, #24]
 800583a:	42a3      	cmp	r3, r4
 800583c:	db01      	blt.n	8005842 <__sfputc_r+0x16>
 800583e:	290a      	cmp	r1, #10
 8005840:	d103      	bne.n	800584a <__sfputc_r+0x1e>
 8005842:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005846:	f000 bb6d 	b.w	8005f24 <__swbuf_r>
 800584a:	6813      	ldr	r3, [r2, #0]
 800584c:	1c58      	adds	r0, r3, #1
 800584e:	6010      	str	r0, [r2, #0]
 8005850:	7019      	strb	r1, [r3, #0]
 8005852:	4608      	mov	r0, r1
 8005854:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005858:	4770      	bx	lr

0800585a <__sfputs_r>:
 800585a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800585c:	4606      	mov	r6, r0
 800585e:	460f      	mov	r7, r1
 8005860:	4614      	mov	r4, r2
 8005862:	18d5      	adds	r5, r2, r3
 8005864:	42ac      	cmp	r4, r5
 8005866:	d101      	bne.n	800586c <__sfputs_r+0x12>
 8005868:	2000      	movs	r0, #0
 800586a:	e007      	b.n	800587c <__sfputs_r+0x22>
 800586c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005870:	463a      	mov	r2, r7
 8005872:	4630      	mov	r0, r6
 8005874:	f7ff ffda 	bl	800582c <__sfputc_r>
 8005878:	1c43      	adds	r3, r0, #1
 800587a:	d1f3      	bne.n	8005864 <__sfputs_r+0xa>
 800587c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005880 <_vfiprintf_r>:
 8005880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005884:	460d      	mov	r5, r1
 8005886:	b09d      	sub	sp, #116	@ 0x74
 8005888:	4614      	mov	r4, r2
 800588a:	4698      	mov	r8, r3
 800588c:	4606      	mov	r6, r0
 800588e:	b118      	cbz	r0, 8005898 <_vfiprintf_r+0x18>
 8005890:	6a03      	ldr	r3, [r0, #32]
 8005892:	b90b      	cbnz	r3, 8005898 <_vfiprintf_r+0x18>
 8005894:	f7ff fdca 	bl	800542c <__sinit>
 8005898:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800589a:	07d9      	lsls	r1, r3, #31
 800589c:	d405      	bmi.n	80058aa <_vfiprintf_r+0x2a>
 800589e:	89ab      	ldrh	r3, [r5, #12]
 80058a0:	059a      	lsls	r2, r3, #22
 80058a2:	d402      	bmi.n	80058aa <_vfiprintf_r+0x2a>
 80058a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80058a6:	f7ff fec6 	bl	8005636 <__retarget_lock_acquire_recursive>
 80058aa:	89ab      	ldrh	r3, [r5, #12]
 80058ac:	071b      	lsls	r3, r3, #28
 80058ae:	d501      	bpl.n	80058b4 <_vfiprintf_r+0x34>
 80058b0:	692b      	ldr	r3, [r5, #16]
 80058b2:	b99b      	cbnz	r3, 80058dc <_vfiprintf_r+0x5c>
 80058b4:	4629      	mov	r1, r5
 80058b6:	4630      	mov	r0, r6
 80058b8:	f000 fb72 	bl	8005fa0 <__swsetup_r>
 80058bc:	b170      	cbz	r0, 80058dc <_vfiprintf_r+0x5c>
 80058be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80058c0:	07dc      	lsls	r4, r3, #31
 80058c2:	d504      	bpl.n	80058ce <_vfiprintf_r+0x4e>
 80058c4:	f04f 30ff 	mov.w	r0, #4294967295
 80058c8:	b01d      	add	sp, #116	@ 0x74
 80058ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ce:	89ab      	ldrh	r3, [r5, #12]
 80058d0:	0598      	lsls	r0, r3, #22
 80058d2:	d4f7      	bmi.n	80058c4 <_vfiprintf_r+0x44>
 80058d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80058d6:	f7ff feaf 	bl	8005638 <__retarget_lock_release_recursive>
 80058da:	e7f3      	b.n	80058c4 <_vfiprintf_r+0x44>
 80058dc:	2300      	movs	r3, #0
 80058de:	9309      	str	r3, [sp, #36]	@ 0x24
 80058e0:	2320      	movs	r3, #32
 80058e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80058e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80058ea:	2330      	movs	r3, #48	@ 0x30
 80058ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005a9c <_vfiprintf_r+0x21c>
 80058f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80058f4:	f04f 0901 	mov.w	r9, #1
 80058f8:	4623      	mov	r3, r4
 80058fa:	469a      	mov	sl, r3
 80058fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005900:	b10a      	cbz	r2, 8005906 <_vfiprintf_r+0x86>
 8005902:	2a25      	cmp	r2, #37	@ 0x25
 8005904:	d1f9      	bne.n	80058fa <_vfiprintf_r+0x7a>
 8005906:	ebba 0b04 	subs.w	fp, sl, r4
 800590a:	d00b      	beq.n	8005924 <_vfiprintf_r+0xa4>
 800590c:	465b      	mov	r3, fp
 800590e:	4622      	mov	r2, r4
 8005910:	4629      	mov	r1, r5
 8005912:	4630      	mov	r0, r6
 8005914:	f7ff ffa1 	bl	800585a <__sfputs_r>
 8005918:	3001      	adds	r0, #1
 800591a:	f000 80a7 	beq.w	8005a6c <_vfiprintf_r+0x1ec>
 800591e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005920:	445a      	add	r2, fp
 8005922:	9209      	str	r2, [sp, #36]	@ 0x24
 8005924:	f89a 3000 	ldrb.w	r3, [sl]
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 809f 	beq.w	8005a6c <_vfiprintf_r+0x1ec>
 800592e:	2300      	movs	r3, #0
 8005930:	f04f 32ff 	mov.w	r2, #4294967295
 8005934:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005938:	f10a 0a01 	add.w	sl, sl, #1
 800593c:	9304      	str	r3, [sp, #16]
 800593e:	9307      	str	r3, [sp, #28]
 8005940:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005944:	931a      	str	r3, [sp, #104]	@ 0x68
 8005946:	4654      	mov	r4, sl
 8005948:	2205      	movs	r2, #5
 800594a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800594e:	4853      	ldr	r0, [pc, #332]	@ (8005a9c <_vfiprintf_r+0x21c>)
 8005950:	f7fa fc4e 	bl	80001f0 <memchr>
 8005954:	9a04      	ldr	r2, [sp, #16]
 8005956:	b9d8      	cbnz	r0, 8005990 <_vfiprintf_r+0x110>
 8005958:	06d1      	lsls	r1, r2, #27
 800595a:	bf44      	itt	mi
 800595c:	2320      	movmi	r3, #32
 800595e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005962:	0713      	lsls	r3, r2, #28
 8005964:	bf44      	itt	mi
 8005966:	232b      	movmi	r3, #43	@ 0x2b
 8005968:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800596c:	f89a 3000 	ldrb.w	r3, [sl]
 8005970:	2b2a      	cmp	r3, #42	@ 0x2a
 8005972:	d015      	beq.n	80059a0 <_vfiprintf_r+0x120>
 8005974:	9a07      	ldr	r2, [sp, #28]
 8005976:	4654      	mov	r4, sl
 8005978:	2000      	movs	r0, #0
 800597a:	f04f 0c0a 	mov.w	ip, #10
 800597e:	4621      	mov	r1, r4
 8005980:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005984:	3b30      	subs	r3, #48	@ 0x30
 8005986:	2b09      	cmp	r3, #9
 8005988:	d94b      	bls.n	8005a22 <_vfiprintf_r+0x1a2>
 800598a:	b1b0      	cbz	r0, 80059ba <_vfiprintf_r+0x13a>
 800598c:	9207      	str	r2, [sp, #28]
 800598e:	e014      	b.n	80059ba <_vfiprintf_r+0x13a>
 8005990:	eba0 0308 	sub.w	r3, r0, r8
 8005994:	fa09 f303 	lsl.w	r3, r9, r3
 8005998:	4313      	orrs	r3, r2
 800599a:	9304      	str	r3, [sp, #16]
 800599c:	46a2      	mov	sl, r4
 800599e:	e7d2      	b.n	8005946 <_vfiprintf_r+0xc6>
 80059a0:	9b03      	ldr	r3, [sp, #12]
 80059a2:	1d19      	adds	r1, r3, #4
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	9103      	str	r1, [sp, #12]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	bfbb      	ittet	lt
 80059ac:	425b      	neglt	r3, r3
 80059ae:	f042 0202 	orrlt.w	r2, r2, #2
 80059b2:	9307      	strge	r3, [sp, #28]
 80059b4:	9307      	strlt	r3, [sp, #28]
 80059b6:	bfb8      	it	lt
 80059b8:	9204      	strlt	r2, [sp, #16]
 80059ba:	7823      	ldrb	r3, [r4, #0]
 80059bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80059be:	d10a      	bne.n	80059d6 <_vfiprintf_r+0x156>
 80059c0:	7863      	ldrb	r3, [r4, #1]
 80059c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80059c4:	d132      	bne.n	8005a2c <_vfiprintf_r+0x1ac>
 80059c6:	9b03      	ldr	r3, [sp, #12]
 80059c8:	1d1a      	adds	r2, r3, #4
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	9203      	str	r2, [sp, #12]
 80059ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80059d2:	3402      	adds	r4, #2
 80059d4:	9305      	str	r3, [sp, #20]
 80059d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005aac <_vfiprintf_r+0x22c>
 80059da:	7821      	ldrb	r1, [r4, #0]
 80059dc:	2203      	movs	r2, #3
 80059de:	4650      	mov	r0, sl
 80059e0:	f7fa fc06 	bl	80001f0 <memchr>
 80059e4:	b138      	cbz	r0, 80059f6 <_vfiprintf_r+0x176>
 80059e6:	9b04      	ldr	r3, [sp, #16]
 80059e8:	eba0 000a 	sub.w	r0, r0, sl
 80059ec:	2240      	movs	r2, #64	@ 0x40
 80059ee:	4082      	lsls	r2, r0
 80059f0:	4313      	orrs	r3, r2
 80059f2:	3401      	adds	r4, #1
 80059f4:	9304      	str	r3, [sp, #16]
 80059f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059fa:	4829      	ldr	r0, [pc, #164]	@ (8005aa0 <_vfiprintf_r+0x220>)
 80059fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005a00:	2206      	movs	r2, #6
 8005a02:	f7fa fbf5 	bl	80001f0 <memchr>
 8005a06:	2800      	cmp	r0, #0
 8005a08:	d03f      	beq.n	8005a8a <_vfiprintf_r+0x20a>
 8005a0a:	4b26      	ldr	r3, [pc, #152]	@ (8005aa4 <_vfiprintf_r+0x224>)
 8005a0c:	bb1b      	cbnz	r3, 8005a56 <_vfiprintf_r+0x1d6>
 8005a0e:	9b03      	ldr	r3, [sp, #12]
 8005a10:	3307      	adds	r3, #7
 8005a12:	f023 0307 	bic.w	r3, r3, #7
 8005a16:	3308      	adds	r3, #8
 8005a18:	9303      	str	r3, [sp, #12]
 8005a1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a1c:	443b      	add	r3, r7
 8005a1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a20:	e76a      	b.n	80058f8 <_vfiprintf_r+0x78>
 8005a22:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a26:	460c      	mov	r4, r1
 8005a28:	2001      	movs	r0, #1
 8005a2a:	e7a8      	b.n	800597e <_vfiprintf_r+0xfe>
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	3401      	adds	r4, #1
 8005a30:	9305      	str	r3, [sp, #20]
 8005a32:	4619      	mov	r1, r3
 8005a34:	f04f 0c0a 	mov.w	ip, #10
 8005a38:	4620      	mov	r0, r4
 8005a3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a3e:	3a30      	subs	r2, #48	@ 0x30
 8005a40:	2a09      	cmp	r2, #9
 8005a42:	d903      	bls.n	8005a4c <_vfiprintf_r+0x1cc>
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d0c6      	beq.n	80059d6 <_vfiprintf_r+0x156>
 8005a48:	9105      	str	r1, [sp, #20]
 8005a4a:	e7c4      	b.n	80059d6 <_vfiprintf_r+0x156>
 8005a4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a50:	4604      	mov	r4, r0
 8005a52:	2301      	movs	r3, #1
 8005a54:	e7f0      	b.n	8005a38 <_vfiprintf_r+0x1b8>
 8005a56:	ab03      	add	r3, sp, #12
 8005a58:	9300      	str	r3, [sp, #0]
 8005a5a:	462a      	mov	r2, r5
 8005a5c:	4b12      	ldr	r3, [pc, #72]	@ (8005aa8 <_vfiprintf_r+0x228>)
 8005a5e:	a904      	add	r1, sp, #16
 8005a60:	4630      	mov	r0, r6
 8005a62:	f3af 8000 	nop.w
 8005a66:	4607      	mov	r7, r0
 8005a68:	1c78      	adds	r0, r7, #1
 8005a6a:	d1d6      	bne.n	8005a1a <_vfiprintf_r+0x19a>
 8005a6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a6e:	07d9      	lsls	r1, r3, #31
 8005a70:	d405      	bmi.n	8005a7e <_vfiprintf_r+0x1fe>
 8005a72:	89ab      	ldrh	r3, [r5, #12]
 8005a74:	059a      	lsls	r2, r3, #22
 8005a76:	d402      	bmi.n	8005a7e <_vfiprintf_r+0x1fe>
 8005a78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a7a:	f7ff fddd 	bl	8005638 <__retarget_lock_release_recursive>
 8005a7e:	89ab      	ldrh	r3, [r5, #12]
 8005a80:	065b      	lsls	r3, r3, #25
 8005a82:	f53f af1f 	bmi.w	80058c4 <_vfiprintf_r+0x44>
 8005a86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a88:	e71e      	b.n	80058c8 <_vfiprintf_r+0x48>
 8005a8a:	ab03      	add	r3, sp, #12
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	462a      	mov	r2, r5
 8005a90:	4b05      	ldr	r3, [pc, #20]	@ (8005aa8 <_vfiprintf_r+0x228>)
 8005a92:	a904      	add	r1, sp, #16
 8005a94:	4630      	mov	r0, r6
 8005a96:	f000 f879 	bl	8005b8c <_printf_i>
 8005a9a:	e7e4      	b.n	8005a66 <_vfiprintf_r+0x1e6>
 8005a9c:	080062ad 	.word	0x080062ad
 8005aa0:	080062b7 	.word	0x080062b7
 8005aa4:	00000000 	.word	0x00000000
 8005aa8:	0800585b 	.word	0x0800585b
 8005aac:	080062b3 	.word	0x080062b3

08005ab0 <_printf_common>:
 8005ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab4:	4616      	mov	r6, r2
 8005ab6:	4698      	mov	r8, r3
 8005ab8:	688a      	ldr	r2, [r1, #8]
 8005aba:	690b      	ldr	r3, [r1, #16]
 8005abc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	bfb8      	it	lt
 8005ac4:	4613      	movlt	r3, r2
 8005ac6:	6033      	str	r3, [r6, #0]
 8005ac8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005acc:	4607      	mov	r7, r0
 8005ace:	460c      	mov	r4, r1
 8005ad0:	b10a      	cbz	r2, 8005ad6 <_printf_common+0x26>
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	6033      	str	r3, [r6, #0]
 8005ad6:	6823      	ldr	r3, [r4, #0]
 8005ad8:	0699      	lsls	r1, r3, #26
 8005ada:	bf42      	ittt	mi
 8005adc:	6833      	ldrmi	r3, [r6, #0]
 8005ade:	3302      	addmi	r3, #2
 8005ae0:	6033      	strmi	r3, [r6, #0]
 8005ae2:	6825      	ldr	r5, [r4, #0]
 8005ae4:	f015 0506 	ands.w	r5, r5, #6
 8005ae8:	d106      	bne.n	8005af8 <_printf_common+0x48>
 8005aea:	f104 0a19 	add.w	sl, r4, #25
 8005aee:	68e3      	ldr	r3, [r4, #12]
 8005af0:	6832      	ldr	r2, [r6, #0]
 8005af2:	1a9b      	subs	r3, r3, r2
 8005af4:	42ab      	cmp	r3, r5
 8005af6:	dc26      	bgt.n	8005b46 <_printf_common+0x96>
 8005af8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005afc:	6822      	ldr	r2, [r4, #0]
 8005afe:	3b00      	subs	r3, #0
 8005b00:	bf18      	it	ne
 8005b02:	2301      	movne	r3, #1
 8005b04:	0692      	lsls	r2, r2, #26
 8005b06:	d42b      	bmi.n	8005b60 <_printf_common+0xb0>
 8005b08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005b0c:	4641      	mov	r1, r8
 8005b0e:	4638      	mov	r0, r7
 8005b10:	47c8      	blx	r9
 8005b12:	3001      	adds	r0, #1
 8005b14:	d01e      	beq.n	8005b54 <_printf_common+0xa4>
 8005b16:	6823      	ldr	r3, [r4, #0]
 8005b18:	6922      	ldr	r2, [r4, #16]
 8005b1a:	f003 0306 	and.w	r3, r3, #6
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	bf02      	ittt	eq
 8005b22:	68e5      	ldreq	r5, [r4, #12]
 8005b24:	6833      	ldreq	r3, [r6, #0]
 8005b26:	1aed      	subeq	r5, r5, r3
 8005b28:	68a3      	ldr	r3, [r4, #8]
 8005b2a:	bf0c      	ite	eq
 8005b2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b30:	2500      	movne	r5, #0
 8005b32:	4293      	cmp	r3, r2
 8005b34:	bfc4      	itt	gt
 8005b36:	1a9b      	subgt	r3, r3, r2
 8005b38:	18ed      	addgt	r5, r5, r3
 8005b3a:	2600      	movs	r6, #0
 8005b3c:	341a      	adds	r4, #26
 8005b3e:	42b5      	cmp	r5, r6
 8005b40:	d11a      	bne.n	8005b78 <_printf_common+0xc8>
 8005b42:	2000      	movs	r0, #0
 8005b44:	e008      	b.n	8005b58 <_printf_common+0xa8>
 8005b46:	2301      	movs	r3, #1
 8005b48:	4652      	mov	r2, sl
 8005b4a:	4641      	mov	r1, r8
 8005b4c:	4638      	mov	r0, r7
 8005b4e:	47c8      	blx	r9
 8005b50:	3001      	adds	r0, #1
 8005b52:	d103      	bne.n	8005b5c <_printf_common+0xac>
 8005b54:	f04f 30ff 	mov.w	r0, #4294967295
 8005b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b5c:	3501      	adds	r5, #1
 8005b5e:	e7c6      	b.n	8005aee <_printf_common+0x3e>
 8005b60:	18e1      	adds	r1, r4, r3
 8005b62:	1c5a      	adds	r2, r3, #1
 8005b64:	2030      	movs	r0, #48	@ 0x30
 8005b66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005b6a:	4422      	add	r2, r4
 8005b6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005b70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005b74:	3302      	adds	r3, #2
 8005b76:	e7c7      	b.n	8005b08 <_printf_common+0x58>
 8005b78:	2301      	movs	r3, #1
 8005b7a:	4622      	mov	r2, r4
 8005b7c:	4641      	mov	r1, r8
 8005b7e:	4638      	mov	r0, r7
 8005b80:	47c8      	blx	r9
 8005b82:	3001      	adds	r0, #1
 8005b84:	d0e6      	beq.n	8005b54 <_printf_common+0xa4>
 8005b86:	3601      	adds	r6, #1
 8005b88:	e7d9      	b.n	8005b3e <_printf_common+0x8e>
	...

08005b8c <_printf_i>:
 8005b8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b90:	7e0f      	ldrb	r7, [r1, #24]
 8005b92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b94:	2f78      	cmp	r7, #120	@ 0x78
 8005b96:	4691      	mov	r9, r2
 8005b98:	4680      	mov	r8, r0
 8005b9a:	460c      	mov	r4, r1
 8005b9c:	469a      	mov	sl, r3
 8005b9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005ba2:	d807      	bhi.n	8005bb4 <_printf_i+0x28>
 8005ba4:	2f62      	cmp	r7, #98	@ 0x62
 8005ba6:	d80a      	bhi.n	8005bbe <_printf_i+0x32>
 8005ba8:	2f00      	cmp	r7, #0
 8005baa:	f000 80d2 	beq.w	8005d52 <_printf_i+0x1c6>
 8005bae:	2f58      	cmp	r7, #88	@ 0x58
 8005bb0:	f000 80b9 	beq.w	8005d26 <_printf_i+0x19a>
 8005bb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005bb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005bbc:	e03a      	b.n	8005c34 <_printf_i+0xa8>
 8005bbe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005bc2:	2b15      	cmp	r3, #21
 8005bc4:	d8f6      	bhi.n	8005bb4 <_printf_i+0x28>
 8005bc6:	a101      	add	r1, pc, #4	@ (adr r1, 8005bcc <_printf_i+0x40>)
 8005bc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bcc:	08005c25 	.word	0x08005c25
 8005bd0:	08005c39 	.word	0x08005c39
 8005bd4:	08005bb5 	.word	0x08005bb5
 8005bd8:	08005bb5 	.word	0x08005bb5
 8005bdc:	08005bb5 	.word	0x08005bb5
 8005be0:	08005bb5 	.word	0x08005bb5
 8005be4:	08005c39 	.word	0x08005c39
 8005be8:	08005bb5 	.word	0x08005bb5
 8005bec:	08005bb5 	.word	0x08005bb5
 8005bf0:	08005bb5 	.word	0x08005bb5
 8005bf4:	08005bb5 	.word	0x08005bb5
 8005bf8:	08005d39 	.word	0x08005d39
 8005bfc:	08005c63 	.word	0x08005c63
 8005c00:	08005cf3 	.word	0x08005cf3
 8005c04:	08005bb5 	.word	0x08005bb5
 8005c08:	08005bb5 	.word	0x08005bb5
 8005c0c:	08005d5b 	.word	0x08005d5b
 8005c10:	08005bb5 	.word	0x08005bb5
 8005c14:	08005c63 	.word	0x08005c63
 8005c18:	08005bb5 	.word	0x08005bb5
 8005c1c:	08005bb5 	.word	0x08005bb5
 8005c20:	08005cfb 	.word	0x08005cfb
 8005c24:	6833      	ldr	r3, [r6, #0]
 8005c26:	1d1a      	adds	r2, r3, #4
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	6032      	str	r2, [r6, #0]
 8005c2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005c34:	2301      	movs	r3, #1
 8005c36:	e09d      	b.n	8005d74 <_printf_i+0x1e8>
 8005c38:	6833      	ldr	r3, [r6, #0]
 8005c3a:	6820      	ldr	r0, [r4, #0]
 8005c3c:	1d19      	adds	r1, r3, #4
 8005c3e:	6031      	str	r1, [r6, #0]
 8005c40:	0606      	lsls	r6, r0, #24
 8005c42:	d501      	bpl.n	8005c48 <_printf_i+0xbc>
 8005c44:	681d      	ldr	r5, [r3, #0]
 8005c46:	e003      	b.n	8005c50 <_printf_i+0xc4>
 8005c48:	0645      	lsls	r5, r0, #25
 8005c4a:	d5fb      	bpl.n	8005c44 <_printf_i+0xb8>
 8005c4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005c50:	2d00      	cmp	r5, #0
 8005c52:	da03      	bge.n	8005c5c <_printf_i+0xd0>
 8005c54:	232d      	movs	r3, #45	@ 0x2d
 8005c56:	426d      	negs	r5, r5
 8005c58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c5c:	4859      	ldr	r0, [pc, #356]	@ (8005dc4 <_printf_i+0x238>)
 8005c5e:	230a      	movs	r3, #10
 8005c60:	e011      	b.n	8005c86 <_printf_i+0xfa>
 8005c62:	6821      	ldr	r1, [r4, #0]
 8005c64:	6833      	ldr	r3, [r6, #0]
 8005c66:	0608      	lsls	r0, r1, #24
 8005c68:	f853 5b04 	ldr.w	r5, [r3], #4
 8005c6c:	d402      	bmi.n	8005c74 <_printf_i+0xe8>
 8005c6e:	0649      	lsls	r1, r1, #25
 8005c70:	bf48      	it	mi
 8005c72:	b2ad      	uxthmi	r5, r5
 8005c74:	2f6f      	cmp	r7, #111	@ 0x6f
 8005c76:	4853      	ldr	r0, [pc, #332]	@ (8005dc4 <_printf_i+0x238>)
 8005c78:	6033      	str	r3, [r6, #0]
 8005c7a:	bf14      	ite	ne
 8005c7c:	230a      	movne	r3, #10
 8005c7e:	2308      	moveq	r3, #8
 8005c80:	2100      	movs	r1, #0
 8005c82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005c86:	6866      	ldr	r6, [r4, #4]
 8005c88:	60a6      	str	r6, [r4, #8]
 8005c8a:	2e00      	cmp	r6, #0
 8005c8c:	bfa2      	ittt	ge
 8005c8e:	6821      	ldrge	r1, [r4, #0]
 8005c90:	f021 0104 	bicge.w	r1, r1, #4
 8005c94:	6021      	strge	r1, [r4, #0]
 8005c96:	b90d      	cbnz	r5, 8005c9c <_printf_i+0x110>
 8005c98:	2e00      	cmp	r6, #0
 8005c9a:	d04b      	beq.n	8005d34 <_printf_i+0x1a8>
 8005c9c:	4616      	mov	r6, r2
 8005c9e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ca2:	fb03 5711 	mls	r7, r3, r1, r5
 8005ca6:	5dc7      	ldrb	r7, [r0, r7]
 8005ca8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005cac:	462f      	mov	r7, r5
 8005cae:	42bb      	cmp	r3, r7
 8005cb0:	460d      	mov	r5, r1
 8005cb2:	d9f4      	bls.n	8005c9e <_printf_i+0x112>
 8005cb4:	2b08      	cmp	r3, #8
 8005cb6:	d10b      	bne.n	8005cd0 <_printf_i+0x144>
 8005cb8:	6823      	ldr	r3, [r4, #0]
 8005cba:	07df      	lsls	r7, r3, #31
 8005cbc:	d508      	bpl.n	8005cd0 <_printf_i+0x144>
 8005cbe:	6923      	ldr	r3, [r4, #16]
 8005cc0:	6861      	ldr	r1, [r4, #4]
 8005cc2:	4299      	cmp	r1, r3
 8005cc4:	bfde      	ittt	le
 8005cc6:	2330      	movle	r3, #48	@ 0x30
 8005cc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ccc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005cd0:	1b92      	subs	r2, r2, r6
 8005cd2:	6122      	str	r2, [r4, #16]
 8005cd4:	f8cd a000 	str.w	sl, [sp]
 8005cd8:	464b      	mov	r3, r9
 8005cda:	aa03      	add	r2, sp, #12
 8005cdc:	4621      	mov	r1, r4
 8005cde:	4640      	mov	r0, r8
 8005ce0:	f7ff fee6 	bl	8005ab0 <_printf_common>
 8005ce4:	3001      	adds	r0, #1
 8005ce6:	d14a      	bne.n	8005d7e <_printf_i+0x1f2>
 8005ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cec:	b004      	add	sp, #16
 8005cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cf2:	6823      	ldr	r3, [r4, #0]
 8005cf4:	f043 0320 	orr.w	r3, r3, #32
 8005cf8:	6023      	str	r3, [r4, #0]
 8005cfa:	4833      	ldr	r0, [pc, #204]	@ (8005dc8 <_printf_i+0x23c>)
 8005cfc:	2778      	movs	r7, #120	@ 0x78
 8005cfe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005d02:	6823      	ldr	r3, [r4, #0]
 8005d04:	6831      	ldr	r1, [r6, #0]
 8005d06:	061f      	lsls	r7, r3, #24
 8005d08:	f851 5b04 	ldr.w	r5, [r1], #4
 8005d0c:	d402      	bmi.n	8005d14 <_printf_i+0x188>
 8005d0e:	065f      	lsls	r7, r3, #25
 8005d10:	bf48      	it	mi
 8005d12:	b2ad      	uxthmi	r5, r5
 8005d14:	6031      	str	r1, [r6, #0]
 8005d16:	07d9      	lsls	r1, r3, #31
 8005d18:	bf44      	itt	mi
 8005d1a:	f043 0320 	orrmi.w	r3, r3, #32
 8005d1e:	6023      	strmi	r3, [r4, #0]
 8005d20:	b11d      	cbz	r5, 8005d2a <_printf_i+0x19e>
 8005d22:	2310      	movs	r3, #16
 8005d24:	e7ac      	b.n	8005c80 <_printf_i+0xf4>
 8005d26:	4827      	ldr	r0, [pc, #156]	@ (8005dc4 <_printf_i+0x238>)
 8005d28:	e7e9      	b.n	8005cfe <_printf_i+0x172>
 8005d2a:	6823      	ldr	r3, [r4, #0]
 8005d2c:	f023 0320 	bic.w	r3, r3, #32
 8005d30:	6023      	str	r3, [r4, #0]
 8005d32:	e7f6      	b.n	8005d22 <_printf_i+0x196>
 8005d34:	4616      	mov	r6, r2
 8005d36:	e7bd      	b.n	8005cb4 <_printf_i+0x128>
 8005d38:	6833      	ldr	r3, [r6, #0]
 8005d3a:	6825      	ldr	r5, [r4, #0]
 8005d3c:	6961      	ldr	r1, [r4, #20]
 8005d3e:	1d18      	adds	r0, r3, #4
 8005d40:	6030      	str	r0, [r6, #0]
 8005d42:	062e      	lsls	r6, r5, #24
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	d501      	bpl.n	8005d4c <_printf_i+0x1c0>
 8005d48:	6019      	str	r1, [r3, #0]
 8005d4a:	e002      	b.n	8005d52 <_printf_i+0x1c6>
 8005d4c:	0668      	lsls	r0, r5, #25
 8005d4e:	d5fb      	bpl.n	8005d48 <_printf_i+0x1bc>
 8005d50:	8019      	strh	r1, [r3, #0]
 8005d52:	2300      	movs	r3, #0
 8005d54:	6123      	str	r3, [r4, #16]
 8005d56:	4616      	mov	r6, r2
 8005d58:	e7bc      	b.n	8005cd4 <_printf_i+0x148>
 8005d5a:	6833      	ldr	r3, [r6, #0]
 8005d5c:	1d1a      	adds	r2, r3, #4
 8005d5e:	6032      	str	r2, [r6, #0]
 8005d60:	681e      	ldr	r6, [r3, #0]
 8005d62:	6862      	ldr	r2, [r4, #4]
 8005d64:	2100      	movs	r1, #0
 8005d66:	4630      	mov	r0, r6
 8005d68:	f7fa fa42 	bl	80001f0 <memchr>
 8005d6c:	b108      	cbz	r0, 8005d72 <_printf_i+0x1e6>
 8005d6e:	1b80      	subs	r0, r0, r6
 8005d70:	6060      	str	r0, [r4, #4]
 8005d72:	6863      	ldr	r3, [r4, #4]
 8005d74:	6123      	str	r3, [r4, #16]
 8005d76:	2300      	movs	r3, #0
 8005d78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d7c:	e7aa      	b.n	8005cd4 <_printf_i+0x148>
 8005d7e:	6923      	ldr	r3, [r4, #16]
 8005d80:	4632      	mov	r2, r6
 8005d82:	4649      	mov	r1, r9
 8005d84:	4640      	mov	r0, r8
 8005d86:	47d0      	blx	sl
 8005d88:	3001      	adds	r0, #1
 8005d8a:	d0ad      	beq.n	8005ce8 <_printf_i+0x15c>
 8005d8c:	6823      	ldr	r3, [r4, #0]
 8005d8e:	079b      	lsls	r3, r3, #30
 8005d90:	d413      	bmi.n	8005dba <_printf_i+0x22e>
 8005d92:	68e0      	ldr	r0, [r4, #12]
 8005d94:	9b03      	ldr	r3, [sp, #12]
 8005d96:	4298      	cmp	r0, r3
 8005d98:	bfb8      	it	lt
 8005d9a:	4618      	movlt	r0, r3
 8005d9c:	e7a6      	b.n	8005cec <_printf_i+0x160>
 8005d9e:	2301      	movs	r3, #1
 8005da0:	4632      	mov	r2, r6
 8005da2:	4649      	mov	r1, r9
 8005da4:	4640      	mov	r0, r8
 8005da6:	47d0      	blx	sl
 8005da8:	3001      	adds	r0, #1
 8005daa:	d09d      	beq.n	8005ce8 <_printf_i+0x15c>
 8005dac:	3501      	adds	r5, #1
 8005dae:	68e3      	ldr	r3, [r4, #12]
 8005db0:	9903      	ldr	r1, [sp, #12]
 8005db2:	1a5b      	subs	r3, r3, r1
 8005db4:	42ab      	cmp	r3, r5
 8005db6:	dcf2      	bgt.n	8005d9e <_printf_i+0x212>
 8005db8:	e7eb      	b.n	8005d92 <_printf_i+0x206>
 8005dba:	2500      	movs	r5, #0
 8005dbc:	f104 0619 	add.w	r6, r4, #25
 8005dc0:	e7f5      	b.n	8005dae <_printf_i+0x222>
 8005dc2:	bf00      	nop
 8005dc4:	080062be 	.word	0x080062be
 8005dc8:	080062cf 	.word	0x080062cf

08005dcc <__sflush_r>:
 8005dcc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dd4:	0716      	lsls	r6, r2, #28
 8005dd6:	4605      	mov	r5, r0
 8005dd8:	460c      	mov	r4, r1
 8005dda:	d454      	bmi.n	8005e86 <__sflush_r+0xba>
 8005ddc:	684b      	ldr	r3, [r1, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	dc02      	bgt.n	8005de8 <__sflush_r+0x1c>
 8005de2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	dd48      	ble.n	8005e7a <__sflush_r+0xae>
 8005de8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005dea:	2e00      	cmp	r6, #0
 8005dec:	d045      	beq.n	8005e7a <__sflush_r+0xae>
 8005dee:	2300      	movs	r3, #0
 8005df0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005df4:	682f      	ldr	r7, [r5, #0]
 8005df6:	6a21      	ldr	r1, [r4, #32]
 8005df8:	602b      	str	r3, [r5, #0]
 8005dfa:	d030      	beq.n	8005e5e <__sflush_r+0x92>
 8005dfc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005dfe:	89a3      	ldrh	r3, [r4, #12]
 8005e00:	0759      	lsls	r1, r3, #29
 8005e02:	d505      	bpl.n	8005e10 <__sflush_r+0x44>
 8005e04:	6863      	ldr	r3, [r4, #4]
 8005e06:	1ad2      	subs	r2, r2, r3
 8005e08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005e0a:	b10b      	cbz	r3, 8005e10 <__sflush_r+0x44>
 8005e0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005e0e:	1ad2      	subs	r2, r2, r3
 8005e10:	2300      	movs	r3, #0
 8005e12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005e14:	6a21      	ldr	r1, [r4, #32]
 8005e16:	4628      	mov	r0, r5
 8005e18:	47b0      	blx	r6
 8005e1a:	1c43      	adds	r3, r0, #1
 8005e1c:	89a3      	ldrh	r3, [r4, #12]
 8005e1e:	d106      	bne.n	8005e2e <__sflush_r+0x62>
 8005e20:	6829      	ldr	r1, [r5, #0]
 8005e22:	291d      	cmp	r1, #29
 8005e24:	d82b      	bhi.n	8005e7e <__sflush_r+0xb2>
 8005e26:	4a2a      	ldr	r2, [pc, #168]	@ (8005ed0 <__sflush_r+0x104>)
 8005e28:	410a      	asrs	r2, r1
 8005e2a:	07d6      	lsls	r6, r2, #31
 8005e2c:	d427      	bmi.n	8005e7e <__sflush_r+0xb2>
 8005e2e:	2200      	movs	r2, #0
 8005e30:	6062      	str	r2, [r4, #4]
 8005e32:	04d9      	lsls	r1, r3, #19
 8005e34:	6922      	ldr	r2, [r4, #16]
 8005e36:	6022      	str	r2, [r4, #0]
 8005e38:	d504      	bpl.n	8005e44 <__sflush_r+0x78>
 8005e3a:	1c42      	adds	r2, r0, #1
 8005e3c:	d101      	bne.n	8005e42 <__sflush_r+0x76>
 8005e3e:	682b      	ldr	r3, [r5, #0]
 8005e40:	b903      	cbnz	r3, 8005e44 <__sflush_r+0x78>
 8005e42:	6560      	str	r0, [r4, #84]	@ 0x54
 8005e44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e46:	602f      	str	r7, [r5, #0]
 8005e48:	b1b9      	cbz	r1, 8005e7a <__sflush_r+0xae>
 8005e4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e4e:	4299      	cmp	r1, r3
 8005e50:	d002      	beq.n	8005e58 <__sflush_r+0x8c>
 8005e52:	4628      	mov	r0, r5
 8005e54:	f7ff fbf2 	bl	800563c <_free_r>
 8005e58:	2300      	movs	r3, #0
 8005e5a:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e5c:	e00d      	b.n	8005e7a <__sflush_r+0xae>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	4628      	mov	r0, r5
 8005e62:	47b0      	blx	r6
 8005e64:	4602      	mov	r2, r0
 8005e66:	1c50      	adds	r0, r2, #1
 8005e68:	d1c9      	bne.n	8005dfe <__sflush_r+0x32>
 8005e6a:	682b      	ldr	r3, [r5, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d0c6      	beq.n	8005dfe <__sflush_r+0x32>
 8005e70:	2b1d      	cmp	r3, #29
 8005e72:	d001      	beq.n	8005e78 <__sflush_r+0xac>
 8005e74:	2b16      	cmp	r3, #22
 8005e76:	d11e      	bne.n	8005eb6 <__sflush_r+0xea>
 8005e78:	602f      	str	r7, [r5, #0]
 8005e7a:	2000      	movs	r0, #0
 8005e7c:	e022      	b.n	8005ec4 <__sflush_r+0xf8>
 8005e7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e82:	b21b      	sxth	r3, r3
 8005e84:	e01b      	b.n	8005ebe <__sflush_r+0xf2>
 8005e86:	690f      	ldr	r7, [r1, #16]
 8005e88:	2f00      	cmp	r7, #0
 8005e8a:	d0f6      	beq.n	8005e7a <__sflush_r+0xae>
 8005e8c:	0793      	lsls	r3, r2, #30
 8005e8e:	680e      	ldr	r6, [r1, #0]
 8005e90:	bf08      	it	eq
 8005e92:	694b      	ldreq	r3, [r1, #20]
 8005e94:	600f      	str	r7, [r1, #0]
 8005e96:	bf18      	it	ne
 8005e98:	2300      	movne	r3, #0
 8005e9a:	eba6 0807 	sub.w	r8, r6, r7
 8005e9e:	608b      	str	r3, [r1, #8]
 8005ea0:	f1b8 0f00 	cmp.w	r8, #0
 8005ea4:	dde9      	ble.n	8005e7a <__sflush_r+0xae>
 8005ea6:	6a21      	ldr	r1, [r4, #32]
 8005ea8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005eaa:	4643      	mov	r3, r8
 8005eac:	463a      	mov	r2, r7
 8005eae:	4628      	mov	r0, r5
 8005eb0:	47b0      	blx	r6
 8005eb2:	2800      	cmp	r0, #0
 8005eb4:	dc08      	bgt.n	8005ec8 <__sflush_r+0xfc>
 8005eb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ebe:	81a3      	strh	r3, [r4, #12]
 8005ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ec8:	4407      	add	r7, r0
 8005eca:	eba8 0800 	sub.w	r8, r8, r0
 8005ece:	e7e7      	b.n	8005ea0 <__sflush_r+0xd4>
 8005ed0:	dfbffffe 	.word	0xdfbffffe

08005ed4 <_fflush_r>:
 8005ed4:	b538      	push	{r3, r4, r5, lr}
 8005ed6:	690b      	ldr	r3, [r1, #16]
 8005ed8:	4605      	mov	r5, r0
 8005eda:	460c      	mov	r4, r1
 8005edc:	b913      	cbnz	r3, 8005ee4 <_fflush_r+0x10>
 8005ede:	2500      	movs	r5, #0
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	bd38      	pop	{r3, r4, r5, pc}
 8005ee4:	b118      	cbz	r0, 8005eee <_fflush_r+0x1a>
 8005ee6:	6a03      	ldr	r3, [r0, #32]
 8005ee8:	b90b      	cbnz	r3, 8005eee <_fflush_r+0x1a>
 8005eea:	f7ff fa9f 	bl	800542c <__sinit>
 8005eee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d0f3      	beq.n	8005ede <_fflush_r+0xa>
 8005ef6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005ef8:	07d0      	lsls	r0, r2, #31
 8005efa:	d404      	bmi.n	8005f06 <_fflush_r+0x32>
 8005efc:	0599      	lsls	r1, r3, #22
 8005efe:	d402      	bmi.n	8005f06 <_fflush_r+0x32>
 8005f00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f02:	f7ff fb98 	bl	8005636 <__retarget_lock_acquire_recursive>
 8005f06:	4628      	mov	r0, r5
 8005f08:	4621      	mov	r1, r4
 8005f0a:	f7ff ff5f 	bl	8005dcc <__sflush_r>
 8005f0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f10:	07da      	lsls	r2, r3, #31
 8005f12:	4605      	mov	r5, r0
 8005f14:	d4e4      	bmi.n	8005ee0 <_fflush_r+0xc>
 8005f16:	89a3      	ldrh	r3, [r4, #12]
 8005f18:	059b      	lsls	r3, r3, #22
 8005f1a:	d4e1      	bmi.n	8005ee0 <_fflush_r+0xc>
 8005f1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f1e:	f7ff fb8b 	bl	8005638 <__retarget_lock_release_recursive>
 8005f22:	e7dd      	b.n	8005ee0 <_fflush_r+0xc>

08005f24 <__swbuf_r>:
 8005f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f26:	460e      	mov	r6, r1
 8005f28:	4614      	mov	r4, r2
 8005f2a:	4605      	mov	r5, r0
 8005f2c:	b118      	cbz	r0, 8005f36 <__swbuf_r+0x12>
 8005f2e:	6a03      	ldr	r3, [r0, #32]
 8005f30:	b90b      	cbnz	r3, 8005f36 <__swbuf_r+0x12>
 8005f32:	f7ff fa7b 	bl	800542c <__sinit>
 8005f36:	69a3      	ldr	r3, [r4, #24]
 8005f38:	60a3      	str	r3, [r4, #8]
 8005f3a:	89a3      	ldrh	r3, [r4, #12]
 8005f3c:	071a      	lsls	r2, r3, #28
 8005f3e:	d501      	bpl.n	8005f44 <__swbuf_r+0x20>
 8005f40:	6923      	ldr	r3, [r4, #16]
 8005f42:	b943      	cbnz	r3, 8005f56 <__swbuf_r+0x32>
 8005f44:	4621      	mov	r1, r4
 8005f46:	4628      	mov	r0, r5
 8005f48:	f000 f82a 	bl	8005fa0 <__swsetup_r>
 8005f4c:	b118      	cbz	r0, 8005f56 <__swbuf_r+0x32>
 8005f4e:	f04f 37ff 	mov.w	r7, #4294967295
 8005f52:	4638      	mov	r0, r7
 8005f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f56:	6823      	ldr	r3, [r4, #0]
 8005f58:	6922      	ldr	r2, [r4, #16]
 8005f5a:	1a98      	subs	r0, r3, r2
 8005f5c:	6963      	ldr	r3, [r4, #20]
 8005f5e:	b2f6      	uxtb	r6, r6
 8005f60:	4283      	cmp	r3, r0
 8005f62:	4637      	mov	r7, r6
 8005f64:	dc05      	bgt.n	8005f72 <__swbuf_r+0x4e>
 8005f66:	4621      	mov	r1, r4
 8005f68:	4628      	mov	r0, r5
 8005f6a:	f7ff ffb3 	bl	8005ed4 <_fflush_r>
 8005f6e:	2800      	cmp	r0, #0
 8005f70:	d1ed      	bne.n	8005f4e <__swbuf_r+0x2a>
 8005f72:	68a3      	ldr	r3, [r4, #8]
 8005f74:	3b01      	subs	r3, #1
 8005f76:	60a3      	str	r3, [r4, #8]
 8005f78:	6823      	ldr	r3, [r4, #0]
 8005f7a:	1c5a      	adds	r2, r3, #1
 8005f7c:	6022      	str	r2, [r4, #0]
 8005f7e:	701e      	strb	r6, [r3, #0]
 8005f80:	6962      	ldr	r2, [r4, #20]
 8005f82:	1c43      	adds	r3, r0, #1
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d004      	beq.n	8005f92 <__swbuf_r+0x6e>
 8005f88:	89a3      	ldrh	r3, [r4, #12]
 8005f8a:	07db      	lsls	r3, r3, #31
 8005f8c:	d5e1      	bpl.n	8005f52 <__swbuf_r+0x2e>
 8005f8e:	2e0a      	cmp	r6, #10
 8005f90:	d1df      	bne.n	8005f52 <__swbuf_r+0x2e>
 8005f92:	4621      	mov	r1, r4
 8005f94:	4628      	mov	r0, r5
 8005f96:	f7ff ff9d 	bl	8005ed4 <_fflush_r>
 8005f9a:	2800      	cmp	r0, #0
 8005f9c:	d0d9      	beq.n	8005f52 <__swbuf_r+0x2e>
 8005f9e:	e7d6      	b.n	8005f4e <__swbuf_r+0x2a>

08005fa0 <__swsetup_r>:
 8005fa0:	b538      	push	{r3, r4, r5, lr}
 8005fa2:	4b29      	ldr	r3, [pc, #164]	@ (8006048 <__swsetup_r+0xa8>)
 8005fa4:	4605      	mov	r5, r0
 8005fa6:	6818      	ldr	r0, [r3, #0]
 8005fa8:	460c      	mov	r4, r1
 8005faa:	b118      	cbz	r0, 8005fb4 <__swsetup_r+0x14>
 8005fac:	6a03      	ldr	r3, [r0, #32]
 8005fae:	b90b      	cbnz	r3, 8005fb4 <__swsetup_r+0x14>
 8005fb0:	f7ff fa3c 	bl	800542c <__sinit>
 8005fb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fb8:	0719      	lsls	r1, r3, #28
 8005fba:	d422      	bmi.n	8006002 <__swsetup_r+0x62>
 8005fbc:	06da      	lsls	r2, r3, #27
 8005fbe:	d407      	bmi.n	8005fd0 <__swsetup_r+0x30>
 8005fc0:	2209      	movs	r2, #9
 8005fc2:	602a      	str	r2, [r5, #0]
 8005fc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fc8:	81a3      	strh	r3, [r4, #12]
 8005fca:	f04f 30ff 	mov.w	r0, #4294967295
 8005fce:	e033      	b.n	8006038 <__swsetup_r+0x98>
 8005fd0:	0758      	lsls	r0, r3, #29
 8005fd2:	d512      	bpl.n	8005ffa <__swsetup_r+0x5a>
 8005fd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005fd6:	b141      	cbz	r1, 8005fea <__swsetup_r+0x4a>
 8005fd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005fdc:	4299      	cmp	r1, r3
 8005fde:	d002      	beq.n	8005fe6 <__swsetup_r+0x46>
 8005fe0:	4628      	mov	r0, r5
 8005fe2:	f7ff fb2b 	bl	800563c <_free_r>
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	6363      	str	r3, [r4, #52]	@ 0x34
 8005fea:	89a3      	ldrh	r3, [r4, #12]
 8005fec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005ff0:	81a3      	strh	r3, [r4, #12]
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	6063      	str	r3, [r4, #4]
 8005ff6:	6923      	ldr	r3, [r4, #16]
 8005ff8:	6023      	str	r3, [r4, #0]
 8005ffa:	89a3      	ldrh	r3, [r4, #12]
 8005ffc:	f043 0308 	orr.w	r3, r3, #8
 8006000:	81a3      	strh	r3, [r4, #12]
 8006002:	6923      	ldr	r3, [r4, #16]
 8006004:	b94b      	cbnz	r3, 800601a <__swsetup_r+0x7a>
 8006006:	89a3      	ldrh	r3, [r4, #12]
 8006008:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800600c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006010:	d003      	beq.n	800601a <__swsetup_r+0x7a>
 8006012:	4621      	mov	r1, r4
 8006014:	4628      	mov	r0, r5
 8006016:	f000 f84f 	bl	80060b8 <__smakebuf_r>
 800601a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800601e:	f013 0201 	ands.w	r2, r3, #1
 8006022:	d00a      	beq.n	800603a <__swsetup_r+0x9a>
 8006024:	2200      	movs	r2, #0
 8006026:	60a2      	str	r2, [r4, #8]
 8006028:	6962      	ldr	r2, [r4, #20]
 800602a:	4252      	negs	r2, r2
 800602c:	61a2      	str	r2, [r4, #24]
 800602e:	6922      	ldr	r2, [r4, #16]
 8006030:	b942      	cbnz	r2, 8006044 <__swsetup_r+0xa4>
 8006032:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006036:	d1c5      	bne.n	8005fc4 <__swsetup_r+0x24>
 8006038:	bd38      	pop	{r3, r4, r5, pc}
 800603a:	0799      	lsls	r1, r3, #30
 800603c:	bf58      	it	pl
 800603e:	6962      	ldrpl	r2, [r4, #20]
 8006040:	60a2      	str	r2, [r4, #8]
 8006042:	e7f4      	b.n	800602e <__swsetup_r+0x8e>
 8006044:	2000      	movs	r0, #0
 8006046:	e7f7      	b.n	8006038 <__swsetup_r+0x98>
 8006048:	20000018 	.word	0x20000018

0800604c <_sbrk_r>:
 800604c:	b538      	push	{r3, r4, r5, lr}
 800604e:	4d06      	ldr	r5, [pc, #24]	@ (8006068 <_sbrk_r+0x1c>)
 8006050:	2300      	movs	r3, #0
 8006052:	4604      	mov	r4, r0
 8006054:	4608      	mov	r0, r1
 8006056:	602b      	str	r3, [r5, #0]
 8006058:	f7fb fada 	bl	8001610 <_sbrk>
 800605c:	1c43      	adds	r3, r0, #1
 800605e:	d102      	bne.n	8006066 <_sbrk_r+0x1a>
 8006060:	682b      	ldr	r3, [r5, #0]
 8006062:	b103      	cbz	r3, 8006066 <_sbrk_r+0x1a>
 8006064:	6023      	str	r3, [r4, #0]
 8006066:	bd38      	pop	{r3, r4, r5, pc}
 8006068:	200003a0 	.word	0x200003a0

0800606c <__swhatbuf_r>:
 800606c:	b570      	push	{r4, r5, r6, lr}
 800606e:	460c      	mov	r4, r1
 8006070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006074:	2900      	cmp	r1, #0
 8006076:	b096      	sub	sp, #88	@ 0x58
 8006078:	4615      	mov	r5, r2
 800607a:	461e      	mov	r6, r3
 800607c:	da0d      	bge.n	800609a <__swhatbuf_r+0x2e>
 800607e:	89a3      	ldrh	r3, [r4, #12]
 8006080:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006084:	f04f 0100 	mov.w	r1, #0
 8006088:	bf14      	ite	ne
 800608a:	2340      	movne	r3, #64	@ 0x40
 800608c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006090:	2000      	movs	r0, #0
 8006092:	6031      	str	r1, [r6, #0]
 8006094:	602b      	str	r3, [r5, #0]
 8006096:	b016      	add	sp, #88	@ 0x58
 8006098:	bd70      	pop	{r4, r5, r6, pc}
 800609a:	466a      	mov	r2, sp
 800609c:	f000 f848 	bl	8006130 <_fstat_r>
 80060a0:	2800      	cmp	r0, #0
 80060a2:	dbec      	blt.n	800607e <__swhatbuf_r+0x12>
 80060a4:	9901      	ldr	r1, [sp, #4]
 80060a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80060aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80060ae:	4259      	negs	r1, r3
 80060b0:	4159      	adcs	r1, r3
 80060b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80060b6:	e7eb      	b.n	8006090 <__swhatbuf_r+0x24>

080060b8 <__smakebuf_r>:
 80060b8:	898b      	ldrh	r3, [r1, #12]
 80060ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060bc:	079d      	lsls	r5, r3, #30
 80060be:	4606      	mov	r6, r0
 80060c0:	460c      	mov	r4, r1
 80060c2:	d507      	bpl.n	80060d4 <__smakebuf_r+0x1c>
 80060c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80060c8:	6023      	str	r3, [r4, #0]
 80060ca:	6123      	str	r3, [r4, #16]
 80060cc:	2301      	movs	r3, #1
 80060ce:	6163      	str	r3, [r4, #20]
 80060d0:	b003      	add	sp, #12
 80060d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060d4:	ab01      	add	r3, sp, #4
 80060d6:	466a      	mov	r2, sp
 80060d8:	f7ff ffc8 	bl	800606c <__swhatbuf_r>
 80060dc:	9f00      	ldr	r7, [sp, #0]
 80060de:	4605      	mov	r5, r0
 80060e0:	4639      	mov	r1, r7
 80060e2:	4630      	mov	r0, r6
 80060e4:	f7ff fb16 	bl	8005714 <_malloc_r>
 80060e8:	b948      	cbnz	r0, 80060fe <__smakebuf_r+0x46>
 80060ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060ee:	059a      	lsls	r2, r3, #22
 80060f0:	d4ee      	bmi.n	80060d0 <__smakebuf_r+0x18>
 80060f2:	f023 0303 	bic.w	r3, r3, #3
 80060f6:	f043 0302 	orr.w	r3, r3, #2
 80060fa:	81a3      	strh	r3, [r4, #12]
 80060fc:	e7e2      	b.n	80060c4 <__smakebuf_r+0xc>
 80060fe:	89a3      	ldrh	r3, [r4, #12]
 8006100:	6020      	str	r0, [r4, #0]
 8006102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006106:	81a3      	strh	r3, [r4, #12]
 8006108:	9b01      	ldr	r3, [sp, #4]
 800610a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800610e:	b15b      	cbz	r3, 8006128 <__smakebuf_r+0x70>
 8006110:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006114:	4630      	mov	r0, r6
 8006116:	f000 f81d 	bl	8006154 <_isatty_r>
 800611a:	b128      	cbz	r0, 8006128 <__smakebuf_r+0x70>
 800611c:	89a3      	ldrh	r3, [r4, #12]
 800611e:	f023 0303 	bic.w	r3, r3, #3
 8006122:	f043 0301 	orr.w	r3, r3, #1
 8006126:	81a3      	strh	r3, [r4, #12]
 8006128:	89a3      	ldrh	r3, [r4, #12]
 800612a:	431d      	orrs	r5, r3
 800612c:	81a5      	strh	r5, [r4, #12]
 800612e:	e7cf      	b.n	80060d0 <__smakebuf_r+0x18>

08006130 <_fstat_r>:
 8006130:	b538      	push	{r3, r4, r5, lr}
 8006132:	4d07      	ldr	r5, [pc, #28]	@ (8006150 <_fstat_r+0x20>)
 8006134:	2300      	movs	r3, #0
 8006136:	4604      	mov	r4, r0
 8006138:	4608      	mov	r0, r1
 800613a:	4611      	mov	r1, r2
 800613c:	602b      	str	r3, [r5, #0]
 800613e:	f7fb fa3e 	bl	80015be <_fstat>
 8006142:	1c43      	adds	r3, r0, #1
 8006144:	d102      	bne.n	800614c <_fstat_r+0x1c>
 8006146:	682b      	ldr	r3, [r5, #0]
 8006148:	b103      	cbz	r3, 800614c <_fstat_r+0x1c>
 800614a:	6023      	str	r3, [r4, #0]
 800614c:	bd38      	pop	{r3, r4, r5, pc}
 800614e:	bf00      	nop
 8006150:	200003a0 	.word	0x200003a0

08006154 <_isatty_r>:
 8006154:	b538      	push	{r3, r4, r5, lr}
 8006156:	4d06      	ldr	r5, [pc, #24]	@ (8006170 <_isatty_r+0x1c>)
 8006158:	2300      	movs	r3, #0
 800615a:	4604      	mov	r4, r0
 800615c:	4608      	mov	r0, r1
 800615e:	602b      	str	r3, [r5, #0]
 8006160:	f7fb fa3d 	bl	80015de <_isatty>
 8006164:	1c43      	adds	r3, r0, #1
 8006166:	d102      	bne.n	800616e <_isatty_r+0x1a>
 8006168:	682b      	ldr	r3, [r5, #0]
 800616a:	b103      	cbz	r3, 800616e <_isatty_r+0x1a>
 800616c:	6023      	str	r3, [r4, #0]
 800616e:	bd38      	pop	{r3, r4, r5, pc}
 8006170:	200003a0 	.word	0x200003a0

08006174 <_init>:
 8006174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006176:	bf00      	nop
 8006178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800617a:	bc08      	pop	{r3}
 800617c:	469e      	mov	lr, r3
 800617e:	4770      	bx	lr

08006180 <_fini>:
 8006180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006182:	bf00      	nop
 8006184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006186:	bc08      	pop	{r3}
 8006188:	469e      	mov	lr, r3
 800618a:	4770      	bx	lr
